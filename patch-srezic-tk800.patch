# 
# 
# To apply this patch:
# STEP 1: Chdir to the source directory.
# STEP 2: Run the 'applypatch' program with this patch file as input.
#
# If you do not have 'applypatch', it is part of the 'makepatch' package
# that you can fetch from the Comprehensive Perl Archive Network:
# http://www.perl.com/CPAN/authors/Johan_Vromans/makepatch-x.y.tar.gz
# In the above URL, 'x' should be 2 or higher.
#
# To apply this patch without the use of 'applypatch':
# STEP 1: Chdir to the source directory.
# If you have a decent Bourne-type shell:
# STEP 2: Run the shell with this file as input.
# If you don't have such a shell, you may need to manually create
# the files as shown below.
# STEP 3: Run the 'patch' program with this file as input.
#
# These are the commands needed to create/delete files/directories:
#
touch 'BUGS'
chmod 0660 'BUGS'
touch 'Tk/arrowdownwin.xbm'
chmod 0440 'Tk/arrowdownwin.xbm'
touch 'pod/FBox.pod'
chmod 0660 'pod/FBox.pod'
touch 'pod/IconList.pod'
chmod 0660 'pod/IconList.pod'
touch 'pod/Popup.pod'
chmod 0751 'pod/Popup.pod'
touch 't/browseentry-grabtest.t'
chmod 0551 't/browseentry-grabtest.t'
touch 't/browseentry-subclassing.t'
chmod 0551 't/browseentry-subclassing.t'
touch 't/browseentry2.t'
chmod 0551 't/browseentry2.t'
touch 't/cursor.t'
chmod 0775 't/cursor.t'
touch 't/entry.t'
chmod 0775 't/entry.t'
touch 't/leak.t'
chmod 0660 't/leak.t'
touch 't/listbox.t'
chmod 0775 't/listbox.t'
#
# This command terminates the shell and need not be executed manually.
exit
#
#### End of Preamble ####

#### Patch data follows ####
gdiff -up /dev/null '/usr/local/src/work/Tk800/BUGS'
Index: ./BUGS
*** ./BUGS	Thu Jan  1 01:00:00 1970
--- ./BUGS	Sat Jun 21 22:40:04 2003
***************
*** 0 ****
--- 1,57 ----
+ BUGS
+ 
+ - $w->cget(-cursor) returns a wrong value if the -cursor was
+   constructed with an anonymous array. Workaround: use the Tcl notation, e.g.
+   -cursor => '{@/path/to/your/cursor.xbm} red blue'
+ 
+ - sporadic core dumps on the end of bbbike with the following backtrace:
+ #0  0x283f5594 in Tk_CanvasEventuallyRedraw ()
+    from /usr/perl5.8.0/lib/site_perl/5.8.0/i386-freebsd-64int/auto/Tk/Canvas/Canvas.so
+ #1  0x284010a5 in ImageChangedProc ()
+    from /usr/perl5.8.0/lib/site_perl/5.8.0/i386-freebsd-64int/auto/Tk/Canvas/Canvas.so
+ #2  0x2825e532 in DeleteImage ()
+    from /usr/perl5.8.0/lib/site_perl/5.8.0/i386-freebsd-64int/auto/Tk/Tk.so
+ #3  0x2825e5cb in TkDeleteAllImages ()
+    from /usr/perl5.8.0/lib/site_perl/5.8.0/i386-freebsd-64int/auto/Tk/Tk.so
+ #4  0x2827f0bd in Tk_DestroyWindow ()
+    from /usr/perl5.8.0/lib/site_perl/5.8.0/i386-freebsd-64int/auto/Tk/Tk.so
+ #5  0x2824dbc5 in Tk_DestroyCmd ()
+    from /usr/perl5.8.0/lib/site_perl/5.8.0/i386-freebsd-64int/auto/Tk/Tk.so
+ #6  0x2823356f in Call_Tk ()
+    from /usr/perl5.8.0/lib/site_perl/5.8.0/i386-freebsd-64int/auto/Tk/Tk.so
+ ...
+ 
+ - missing documentation: wrapper[1], $w->property, ConfigChanged,
+   Tk::LabEntry (with advertised widgets etc.)
+ 
+ - The ButtonHack in Tk::BrowseEntry looks suspicious. Does it still
+   work if there's more than one BrowseEntry per Toplevel? Maybe
+   implement a better solution: there's a per-toplevel array or hash
+   which is populated by the references to all containing BrowseEntries.
+   The references are deleted OnDestroy of the BrowseEntry.
+ 
+ - Reported in Message-ID: <20030613095141.GA10412@zen.lcu>: The oneliners
+ 
+   perl -e 'use Tk; tkinit()->Button(-text => 'Exit', -command => sub {exit 1})->pack; MainLoop();'
+ 
+   and
+ 
+   perl -e 'require Tk; import Tk; tkinit()->Button(-text => 'Exit', -command => sub {exit 1})->pack; MainLoop();'
+ 
+   may cause segmentation faults or "Callback called exit" messages.
+   The best is to avoid exit() at all and use $mw->destroy.
+ 
+ - cygwin:
+   Expect 8 subtest failures:
+   * all TList related tests fail
+   * fileevent does not work
+ 
+ - Excess space in TopLevels (Message-ID:
+   <yP%Ga.54900$nr.4758453@twister.southeast.rr.com>): this may be
+   related to the well-known "slow raise" problem in conjunction with
+   some weird layoutRequest code in Tk::ProgressBar
+ 
+ - Tk builds do not work if the source directory path contains spaces.
+ 
+ Please report bugs to either the Perl/Tk Mailing list
+ <ptk@lists.Stanford.EDU> or the Perl/Tk Newsgroup <comp.lang.perl.tk>.
gdiff -up '/usr/local/src/Tk800.024/Canvas/canvtxt' '/usr/local/src/work/Tk800/Canvas/canvtxt'
Index: ./Canvas/canvtxt
--- ./Canvas/canvtxt	Tue Jul 27 20:20:03 1999
+++ ./Canvas/canvtxt	Mon Apr 21 17:53:24 2003
@@ -16,8 +16,9 @@ $menu->cascade(-label => '~File', -menui
 my $txt = text_image();
 
 my $c  = $mw->Scrolled('Canvas',-bg => 'white',
-                       -width => 10*@{$txt->[0]}, 
-                       -height => 10 * @$txt);
+                       -width => 10*@{$txt->[0]},
+                       -height => 10 * @$txt,
+		       -scrollbars => 'osow');
 $c->pack(-expand => 1, -fill => 'both');
 
 my @v = find_vertical($txt);
@@ -58,7 +59,7 @@ foreach my $box (@box)
                  -justify => 'center', -anchor => 'center');
  }
 
-
+$c->configure(-scrollregion => [$c->bbox('all')]);
 
 $mw->update;
 
@@ -313,3 +314,4 @@ sub text_image
   }
  return \@txt;
 }
+
gdiff -up '/usr/local/src/Tk800.024/Compound/Compound.xs' '/usr/local/src/work/Tk800/Compound/Compound.xs'
Index: ./Compound/Compound.xs
--- ./Compound/Compound.xs	Tue Nov  9 13:51:08 1999
+++ ./Compound/Compound.xs	Tue Jun 17 01:24:06 2003
@@ -33,8 +33,8 @@ PROTOTYPES: DISABLE
 BOOT:
  {
   IMPORT_VTABLES;  
-  TixVptr     =     (TixVtab *) SvIV(perl_get_sv("Tk::TixVtab",5));    
-  TixintVptr  =  (TixintVtab *) SvIV(perl_get_sv("Tk::TixintVtab",5));  
+  TixVptr     =     INT2PTR(TixVtab *, SvIV(perl_get_sv("Tk::TixVtab",5)));    
+  TixintVptr  =  INT2PTR(TixintVtab *, SvIV(perl_get_sv("Tk::TixintVtab",5)));  
 
   Tk_CreateImageType(&tixCompoundImageType);
  }
gdiff -up '/usr/local/src/Tk800.024/DragDrop/DragDrop.pm' '/usr/local/src/work/Tk800/DragDrop/DragDrop.pm'
Index: ./DragDrop/DragDrop.pm
--- ./DragDrop/DragDrop.pm	Fri Apr 21 11:56:19 2000
+++ ./DragDrop/DragDrop.pm	Fri Apr 25 15:54:17 2003
@@ -279,11 +279,13 @@ sub Drop
    my $seln = $token->cget('-selection');
    unless ($token->Callback(-predropcommand => $seln, $site))
     {
-     my $id = $token->after(2000,[$token,'Done']);
+# XXX This is ugly if the user restarts a drag within the 2000 ms:
+#     my $id = $token->after(2000,[$token,'Done']);
      my $w = $token->parent;
      $token->InstallHandlers;
      $site->Drop($token,$seln,$e);
      $token->Callback(-postdropcommand => $seln);
+     $token->Done;
     }
   }
  else
gdiff -up '/usr/local/src/Tk800.024/DragDrop/Win32Site/Win32Site.xs' '/usr/local/src/work/Tk800/DragDrop/Win32Site/Win32Site.xs'
Index: ./DragDrop/Win32Site/Win32Site.xs
--- ./DragDrop/Win32Site/Win32Site.xs	Mon Sep 11 18:44:26 2000
+++ ./DragDrop/Win32Site/Win32Site.xs	Mon Apr 21 17:53:25 2003
@@ -35,7 +35,6 @@ HWND	win
 BOOL 	flag
 CODE:
  {
-  LangDebug("Accept %x %d\n",win,flag);
   DragAcceptFiles(win,flag);
  }
 
gdiff -up '/usr/local/src/Tk800.024/Entry/Entry.pm' '/usr/local/src/work/Tk800/Entry/Entry.pm'
Index: ./Entry/Entry.pm
Prereq:  1.22 
--- ./Entry/Entry.pm	Mon Sep 11 16:14:23 2000
+++ ./Entry/Entry.pm	Fri Apr 25 15:54:17 2003
@@ -31,7 +31,7 @@ bootstrap Tk::Entry;
 sub Tk_cmd { \&Tk::entry }
 
 Tk::Methods('bbox','delete','get','icursor','index','insert','scan',
-            'selection','xview');
+            'selection','validate','xview');
 
 use Tk::Submethods ( 'selection' => [qw(clear range adjust present to from)],
 		     'xview'     => [qw(moveto scroll)],
@@ -283,6 +283,7 @@ sub MouseSelect
  return unless defined $cur;
  my $anchor = $w->index('anchor');
  return unless defined $anchor;
+ $Tk::pressX ||= $x;
  if (($cur != $anchor) || (abs($Tk::pressX - $x) >= 3))
   {
    $Tk::mouseMoved = 1
gdiff -up '/usr/local/src/Tk800.024/Event/Event.pm' '/usr/local/src/work/Tk800/Event/Event.pm'
Index: ./Event/Event.pm
--- ./Event/Event.pm	Tue Mar  5 15:27:40 2002
+++ ./Event/Event.pm	Sat Jun  7 21:28:26 2003
@@ -2,7 +2,7 @@ package Tk::Event;
 use vars qw($VERSION $XS_VERSION @EXPORT_OK);
 END { CleanupGlue() }
 $VERSION = '3.026'; # $Id: //depot/Tk8/Event/Event.pm#26 $
-$XS_VERSION = '800.024';
+$XS_VERSION = '800.024012';
 require DynaLoader;
 use base  qw(Exporter DynaLoader);
 @EXPORT_OK = qw($XS_VERSION DONT_WAIT WINDOW_EVENTS  FILE_EVENTS
gdiff -up '/usr/local/src/Tk800.024/Event/Event.xs' '/usr/local/src/work/Tk800/Event/Event.xs'
Index: ./Event/Event.xs
--- ./Event/Event.xs	Mon Jan  7 10:35:44 2002
+++ ./Event/Event.xs	Tue Jun 17 01:45:18 2003
@@ -15,6 +15,13 @@
 #include "pTk/tkEvent.h"
 #include "pTk/tkEvent_f.h"
 
+#ifndef INT2PTR
+#define INT2PTR(any,d) (any)(d)
+#endif
+#ifndef PTR2IV
+#define PTR2IV(p)	INT2PTR(IV,p)
+#endif
+
 void
 LangDebug(char *fmt,...)
 {
@@ -219,7 +226,7 @@ long
 Lang_OSHandle(fd)
 int fd;
 {
-#ifdef WIN32
+#if defined(WIN32) && !defined(__CYGWIN__)
  return win32_get_osfhandle(fd);
 #else
  return fd;
@@ -252,7 +259,7 @@ size_t size;
    typedef int (*fptr)_((void));
    fptr *q = table;
    unsigned i;
-   sv_setiv(FindVarName(name,GV_ADD|GV_ADDMULTI),(IV) table);
+   sv_setiv(FindVarName(name,GV_ADD|GV_ADDMULTI),PTR2IV(table));
    if (size % sizeof(fptr))
     {
      warn("%s is strange size %d",name,size);
@@ -295,7 +302,8 @@ typedef struct PerlIOHandler
   int handlerMask;                /* Events for which we have callbacks */
   int callingMask;                /* Events for which we are in callbacks */
   int pending;
- } PerlIOHandler;
+  SV *mysv;
+  } PerlIOHandler;
 
 typedef struct PerlIOEvent
  {
@@ -600,10 +608,12 @@ int flags;                        /* Fla
          SV *sv = filePtr->readHandler;
          ENTER;
          SAVETMPS;
+         SvREFCNT_inc(filePtr->mysv);
          filePtr->callingMask |= TCL_READABLE;
          LangPushCallbackArgs(&sv);
          LangCallCallback(sv,G_DISCARD);
          filePtr->callingMask &= ~TCL_READABLE;
+         SvREFCNT_dec(filePtr->mysv);
          FREETMPS;
          LEAVE;
         }
@@ -612,10 +622,12 @@ int flags;                        /* Fla
          SV *sv = filePtr->writeHandler;
          ENTER;
          SAVETMPS;
+         SvREFCNT_inc(filePtr->mysv);
          filePtr->callingMask |= TCL_WRITABLE;
          LangPushCallbackArgs(&sv);
          LangCallCallback(sv,G_DISCARD);
          filePtr->callingMask &= ~TCL_WRITABLE;
+         SvREFCNT_dec(filePtr->mysv);
          FREETMPS;
          LEAVE;
         }
@@ -624,10 +636,12 @@ int flags;                        /* Fla
          SV *sv = filePtr->exceptionHandler;
          ENTER;
          SAVETMPS;
+         SvREFCNT_inc(filePtr->mysv);
          filePtr->callingMask |= TCL_EXCEPTION;
          LangPushCallbackArgs(&sv);
          LangCallCallback(sv,G_DISCARD);
          filePtr->callingMask &= ~TCL_EXCEPTION;
+         SvREFCNT_dec(filePtr->mysv);
          FREETMPS;
          LEAVE;
         }
@@ -716,6 +730,7 @@ int mask;                         /* OR'
  filePtr->waitMask    = mask;
  filePtr->pending     = 0;
  filePtr->nextPtr     = firstPerlIOHandler;
+ filePtr->mysv        = obj;
  firstPerlIOHandler   = filePtr;
  PerlIO_watch(filePtr);
  obj = newRV_noinc(obj);
gdiff -up '/usr/local/src/Tk800.024/Event/pTkCallback.c' '/usr/local/src/work/Tk800/Event/pTkCallback.c'
Index: ./Event/pTkCallback.c
--- ./Event/pTkCallback.c	Fri Sep  8 17:24:25 2000
+++ ./Event/pTkCallback.c	Mon Apr 21 17:53:24 2003
@@ -66,7 +66,8 @@ SV *sv;
      if (SvTYPE(SvRV(sv)) == SVt_PVCV)
       {
        AV *av = newAV();
-       av_push(av,SvREFCNT_inc(sv));  /* Increment REFCNT ! */
+       /*       av_push(av,SvREFCNT_inc(sv));*/  /* Increment REFCNT ! */
+       av_push(av,sv);  /* changed by SRT: do not increment REFCNT ! */
        sv = newRV_noinc((SV *) av);
       }
     }
gdiff -up '/usr/local/src/Tk800.024/Event/typemap' '/usr/local/src/work/Tk800/Event/typemap'
Index: ./Event/typemap
--- ./Event/typemap	Tue Jul 27 20:20:05 1999
+++ ./Event/typemap	Tue Jun 17 01:58:54 2003
@@ -1,12 +1,12 @@
-Tcl_TimerProc *			T_IV 
-Tcl_IdleProc *			T_IV
-Tcl_ExitProc *			T_IV
-Tcl_FileProc *			T_IV
-Tcl_EventProc *			T_IV
-ClientData			T_IV
-Tcl_QueuePosition		T_IV
-Tcl_Event *			T_IV
-Tcl_TimerToken			T_IV
+Tcl_TimerProc *			T_PTR
+Tcl_IdleProc *			T_PTR
+Tcl_ExitProc *			T_PTR
+Tcl_FileProc *			T_PTR
+Tcl_EventProc *			T_PTR
+ClientData			T_PTR
+Tcl_QueuePosition		T_PTR
+Tcl_Event *			T_PTR
+Tcl_TimerToken			T_PTR
 PerlIOHandler *			T_TK_IOHANDLER
 
 INPUT
gdiff -up '/usr/local/src/Tk800.024/HList/HList.pm' '/usr/local/src/work/Tk800/HList/HList.pm'
Index: ./HList/HList.pm
--- ./HList/HList.pm	Sat Sep 29 19:48:16 2001
+++ ./HList/HList.pm	Fri Apr 25 15:54:17 2003
@@ -72,6 +72,7 @@ sub ClassInit
  $mw->bind($class,'<Right>',['LeftRight', 'right']);
 
  $mw->PriorNextBind($class);
+ $mw->MouseWheelBind($class);
 
  $mw->bind($class,'<Return>', ['KeyboardActivate']);
  $mw->bind($class,'<space>',  ['KeyboardBrowse']);
gdiff -up '/usr/local/src/Tk800.024/HList/HList.xs' '/usr/local/src/work/Tk800/HList/HList.xs'
Index: ./HList/HList.xs
--- ./HList/HList.xs	Tue Jul 27 20:20:05 1999
+++ ./HList/HList.xs	Tue Jun 17 01:30:04 2003
@@ -38,6 +38,6 @@ CODE:
 BOOT:
  {
   IMPORT_VTABLES;
-  TixVptr     =     (TixVtab *) SvIV(perl_get_sv("Tk::TixVtab",5));    
-  TixintVptr  =  (TixintVtab *) SvIV(perl_get_sv("Tk::TixintVtab",5)); 
+  TixVptr     =     INT2PTR(TixVtab *, SvIV(perl_get_sv("Tk::TixVtab",5)));
+  TixintVptr  =  INT2PTR(TixintVtab *, SvIV(perl_get_sv("Tk::TixintVtab",5)));
  }
gdiff -up '/usr/local/src/Tk800.024/IO/IO.xs' '/usr/local/src/work/Tk800/IO/IO.xs'
Index: ./IO/IO.xs
--- ./IO/IO.xs	Fri Sep  8 11:27:27 2000
+++ ./IO/IO.xs	Tue Jun 17 01:25:12 2003
@@ -294,5 +294,5 @@ InputStream	f
 
 BOOT:
  {
-  TkeventVptr  = (TkeventVtab *) SvIV(perl_get_sv("Tk::TkeventVtab",GV_ADDWARN|GV_ADD));
+  TkeventVptr  = INT2PTR(TkeventVtab *, SvIV(perl_get_sv("Tk::TkeventVtab",GV_ADDWARN|GV_ADD)));
  }
gdiff -up '/usr/local/src/Tk800.024/InputO/InputO.xs' '/usr/local/src/work/Tk800/InputO/InputO.xs'
Index: ./InputO/InputO.xs
--- ./InputO/InputO.xs	Tue Jul 27 20:20:06 1999
+++ ./InputO/InputO.xs	Tue Jun 17 01:25:46 2003
@@ -38,6 +38,6 @@ CODE:
 BOOT:
  {
   IMPORT_VTABLES;
-  TixVptr     =     (TixVtab *) SvIV(perl_get_sv("Tk::TixVtab",5));      
-  TixintVptr  =  (TixintVtab *) SvIV(perl_get_sv("Tk::TixintVtab",5));   
+  TixVptr     =     INT2PTR(TixVtab *, SvIV(perl_get_sv("Tk::TixVtab",5)));
+  TixintVptr  =  INT2PTR(TixintVtab *, SvIV(perl_get_sv("Tk::TixintVtab",5)));
  }
gdiff -up '/usr/local/src/Tk800.024/Listbox/Listbox.pm' '/usr/local/src/work/Tk800/Listbox/Listbox.pm'
Index: ./Listbox/Listbox.pm
Prereq:  1.7 
--- ./Listbox/Listbox.pm	Sat Sep 29 19:48:16 2001
+++ ./Listbox/Listbox.pm	Mon Apr 21 17:53:09 2003
@@ -71,6 +71,7 @@ sub BalloonInfo
 {
  my ($listbox,$balloon,$X,$Y,@opt) = @_;
  my $e = $listbox->XEvent;
+ return if !$e;
  my $index = $listbox->index('@' . $e->x . ',' . $e->y);
  foreach my $opt (@opt)
   {
@@ -108,7 +109,17 @@ sub ClassInit
  $mw->bind($class,'<Shift-Down>',['ExtendUpDown',1]);
 
  $mw->XscrollBind($class);
- $mw->PriorNextBind($class);
+ $mw->bind($class,'<Next>',  sub {
+	       my $w = shift;
+	       $w->yview('scroll',1,'pages');
+	       $w->activate('@0,0');
+	   });
+ $mw->bind($class,'<Prior>', sub {
+	       my $w = shift;
+	       $w->yview('scroll',-1,'pages');
+	       $w->activate('@0,0');
+	   });
+ $mw->MouseWheelBind($class);
 
  $mw->bind($class,'<Control-Home>','Cntrl_Home');
  ;
gdiff -up '/usr/local/src/Tk800.024/MANIFEST' '/usr/local/src/work/Tk800/MANIFEST'
Index: ./MANIFEST
--- ./MANIFEST	Mon Sep 11 21:44:00 2000
+++ ./MANIFEST	Fri May  9 08:09:07 2003
@@ -1,6 +1,7 @@
 Bitmap/Bitmap.pm
 Bitmap/Bitmap.xs
 Bitmap/Makefile.PL
+BUGS
 COPYING				CopyRight and License info.
 Canvas/Canvas.pm
 Canvas/Canvas.xs
@@ -239,6 +240,7 @@ Tk/Xrm.pm
 Tk/act_folder.xbm
 Tk/act_folder.xpm
 Tk/anim.gif
+Tk/arrowdownwin.xbm
 Tk/cbxarrow.xbm
 Tk/file.xbm
 Tk/file.xpm
@@ -332,6 +334,7 @@ demos/demos/images/QuitPBa.xpm
 demos/demos/images/c.icon
 demos/demos/images/cursor.mask
 demos/demos/images/cursor.xbm
+demos/demos/images/cursor.cur
 demos/demos/images/dir.icon
 demos/demos/images/dir.mask
 demos/demos/images/earth.gif
@@ -1228,10 +1231,12 @@ pod/DupName/Dialog.pod
 pod/Entry.pod
 pod/Error.pod
 pod/Eventloop.pod
+pod/FBox.pod
 pod/FileSelect.pod
 pod/Font.pod
 pod/Frame.pod
 pod/HList.pod
+pod/IconList.pod
 pod/IO.pod
 pod/Image.pod
 pod/InputO.pod
@@ -1250,6 +1255,7 @@ pod/NoteBook.pod
 pod/Optionmenu.pod
 pod/Photo.pod
 pod/Pixmap.pod
+pod/Popup.pod
 pod/README
 pod/ROText.pod
 pod/Radiobutton.pod
@@ -1415,14 +1421,21 @@ t/X.t
 t/autoload.t
 t/balloon.t
 t/browseentry.t
+t/browseentry-grabtest.t
+t/browseentry-subclassing.t
+t/browseentry2.t
 t/create.t
+t/cursor.t
 t/dash.t
+t/entry.t
 t/fbox.t
 t/fileevent.t
 t/fileselect.t
 t/font.t
 t/geomgr.t
+t/leak.t
 t/list.t
+t/listbox.t
 t/mega.t
 t/mwm.t
 t/optmenu.t
gdiff -up '/usr/local/src/Tk800.024/Makefile.PL' '/usr/local/src/work/Tk800/Makefile.PL'
Index: ./Makefile.PL
--- ./Makefile.PL	Tue Mar  5 15:00:43 2002
+++ ./Makefile.PL	Sat May  3 11:22:39 2003
@@ -6,7 +6,21 @@ BEGIN
  {
   $IsWin32 = ($^O eq 'MSWin32' || $Config{'ccflags'} =~ /-D_?WIN32_?/);
 
-  $VERSION = '800.024';
+  #$VERSION = '800.024010';
+  open(M, "Tk.pm") or die "Can't open Tk.pm for reading VERSION: $!";
+  while(<M>)
+   {
+    if (/\$Tk::VERSION\s+=\s+'([0-9._]+)'/)
+     {
+      $VERSION = $1;
+      last;
+     }
+   }
+  close M;
+  if (!defined $VERSION)
+   {
+    die "Can't find \$Tk::VERSION in Tk.pm";
+   }
 
   $win_arch = shift @ARGV if @ARGV and $ARGV[0] =~ /^(open32|pm|x|MSWin32)$/;
   require('fix_4_os2.pl'), OS2_massage() if $^O eq 'os2';
@@ -50,7 +64,7 @@ delete $dir->{'pTk'};
 
 Tk::MMutil::TkExtMakefile(
     'VERSION'  => $VERSION,
-    'EXE_FILES' => [qw(ptksh ptked)],
+    'EXE_FILES' => [qw(ptksh ptked gedi)],
     'NAME'     => 'Tk',
     'DIR'      => ['pTk',reverse(sort(keys %$dir))],
     'DISTNAME' => "Tk",
@@ -154,7 +168,7 @@ sub MY::test
 }
 
 sub MY::postamble {
-    '
+ my $str = '
 
 html : subdirs manifypods
 	@cd pod && $(MAKE) html $(PASTHRU)
@@ -184,6 +198,8 @@ MANIFEST : MANIFEST.SKIP $(FIRST_MAKEFIL
 	$(MAKE) manifest
 
 ';
+ $str =~ s/DEFINE=.*// if($^O eq 'cygwin');
+ $str;
 }
 
 
gdiff -up '/usr/local/src/Tk800.024/Mwm/Mwm.xs' '/usr/local/src/work/Tk800/Mwm/Mwm.xs'
Index: ./Mwm/Mwm.xs
--- ./Mwm/Mwm.xs	Tue Jul 27 20:20:06 1999
+++ ./Mwm/Mwm.xs	Tue Jun 17 01:26:14 2003
@@ -34,8 +34,8 @@ PROTOTYPES: DISABLE
 BOOT:
  {
   IMPORT_VTABLES;   
-  TixVptr     =     (TixVtab *) SvIV(perl_get_sv("Tk::TixVtab",5));    
-  TixintVptr  =  (TixintVtab *) SvIV(perl_get_sv("Tk::TixintVtab",5)); 
+  TixVptr     =     INT2PTR(TixVtab *, SvIV(perl_get_sv("Tk::TixVtab",5)));    
+  TixintVptr  =  INT2PTR(TixintVtab *, SvIV(perl_get_sv("Tk::TixintVtab",5))); 
   /* Initialize the display item types */
 #if !defined(__WIN32__) && !defined(__PM__)
   Lang_TkSubCommand("mwm",Tix_MwmCmd);
gdiff -up '/usr/local/src/Tk800.024/NBFrame/NBFrame.xs' '/usr/local/src/work/Tk800/NBFrame/NBFrame.xs'
Index: ./NBFrame/NBFrame.xs
--- ./NBFrame/NBFrame.xs	Tue Jul 27 20:20:06 1999
+++ ./NBFrame/NBFrame.xs	Tue Jun 17 01:26:57 2003
@@ -39,6 +39,6 @@ CODE:
 BOOT:
  {
   IMPORT_VTABLES;
-  TixVptr     =     (TixVtab *) SvIV(perl_get_sv("Tk::TixVtab",5));      
-  TixintVptr  =  (TixintVtab *) SvIV(perl_get_sv("Tk::TixintVtab",5));   
+  TixVptr     =     INT2PTR(TixVtab *, SvIV(perl_get_sv("Tk::TixVtab",5)));
+  TixintVptr  =  INT2PTR(TixintVtab *, SvIV(perl_get_sv("Tk::TixintVtab",5)));
  }
gdiff -up '/usr/local/src/Tk800.024/README.cygwin' '/usr/local/src/work/Tk800/README.cygwin'
Index: ./README.cygwin
--- ./README.cygwin	Fri Sep  8 11:27:27 2000
+++ ./README.cygwin	Mon Apr 21 18:28:16 2003
@@ -90,7 +90,7 @@ PORTING NOTES
       (sometimes $^O eq 'MSWin32' is used instead of $Tk::platform
        eq 'MSWin32' assuming they are equivalent and vice versa)
     + #define distinctions
-        _WIN32                defined by gcc, if X11 need to undef
+        _WIN32                win_arch MSWin32
         __WIN32__             win_arch MSWin32, also defined in pTk/Lang.h
         WIN32                 from #include <windows.h>
                               when precedes #include "perl.h" then need
@@ -107,7 +107,7 @@ FILES (with Cygwin references)
     README.cygwin MANIFEST
     * documentation
 
-    Makefile.PL Tk/MMutil.pm pTk/Makefile.PL
+    Makefile.PL Tk/MMutil.pm pTk/Makefile.PL myConfig
     * make stuff
 
     pTk/mTk/win/tkWinX.c
@@ -149,6 +149,6 @@ TODO
     + Fix gcc warnings, mostly in pTk win32 flavor?
     + Test with cygwin-xfree X Server?
 
-Thu Aug 31 12:54:09 BST 2000
+Sun Jun 10 21:34:30 PST 2001
 Eric Fifer
-efifer@dircon.co.uk
+egf7@columbia.edu
gdiff -up '/usr/local/src/Tk800.024/Scrollbar/Scrollbar.pm' '/usr/local/src/work/Tk800/Scrollbar/Scrollbar.pm'
Index: ./Scrollbar/Scrollbar.pm
--- ./Scrollbar/Scrollbar.pm	Thu Apr 27 16:41:04 2000
+++ ./Scrollbar/Scrollbar.pm	Mon Apr 21 17:53:09 2003
@@ -1,7 +1,6 @@
 # Conversion from Tk4.0 scrollbar.tcl competed.
 package Tk::Scrollbar;
-require Tk;
-import Tk qw($XS_VERSION);
+use Tk qw($XS_VERSION Ev);
 use AutoLoader;
 
 use vars qw($VERSION);
@@ -9,6 +8,9 @@ $VERSION = '3.014'; # $Id: //depot/Tk8/S
 
 use base  qw(Tk::Widget);
 
+#use strict;
+#use vars qw($pressX $pressY @initValues $initPos $activeBg);
+
 Construct Tk::Widget 'Scrollbar';
 
 bootstrap Tk::Scrollbar;
@@ -36,14 +38,14 @@ sub ClassInit
  $mw->bind($class, '<Leave>', 'Leave');
 
  $mw->bind($class, '<1>', 'ButtonDown');
- $mw->bind($class, '<B1-Motion>', 'Drag');
+ $mw->bind($class, '<B1-Motion>', ['Drag', Ev('x'), Ev('y')]);
  $mw->bind($class, '<ButtonRelease-1>', 'ButtonUp');
  $mw->bind($class, '<B1-Leave>', 'NoOp'); # prevent generic <Leave>
  $mw->bind($class, '<B1-Enter>', 'NoOp'); # prevent generic <Enter>
  $mw->bind($class, '<Control-1>', 'ScrlTopBottom');
 
  $mw->bind($class, '<2>', 'ButtonDown');
- $mw->bind($class, '<B2-Motion>', 'Drag');
+ $mw->bind($class, '<B2-Motion>', ['Drag', Ev('x'), Ev('y')]);
  $mw->bind($class, '<ButtonRelease-2>', 'ButtonUp');
  $mw->bind($class, '<B2-Leave>', 'NoOp'); # prevent generic <Leave>
  $mw->bind($class, '<B2-Enter>', 'NoOp'); # prevent generic <Enter>
@@ -65,6 +67,9 @@ sub ClassInit
  $mw->bind($class, '<Home>',          ['ScrlToPos', 0]);
  $mw->bind($class, '<End>',           ['ScrlToPos', 1]);
 
+ $mw->bind($class, '<4>',             ['ScrlByUnits','v',-3]);
+ $mw->bind($class, '<5>',             ['ScrlByUnits','v', 3]);
+
  return $class;
 
 }
@@ -228,19 +233,24 @@ sub Select
 # x, y -	The mouse position at the start of the drag operation.
 
 sub StartDrag
-{my $w = shift;
- my $x = shift;
- my $y = shift;
+{
+ my($w,$x,$y) = @_;
  return unless (defined ($w->cget('-command')));
- $initMouse  = $w->fraction($x,$y);
- @initValues = $w->get();
+ $pressX = $x;
+ $pressY = $y;
+ @initValues = $w->get;
+ my $iv0 = $initValues[0];
  if (@initValues == 2)
   {
-   $initPos = $initValues[0];
+   $initPos = $iv0;
+  }
+ elsif ($iv0 == 0)
+  {
+   $initPos = 0;
   }
  else
   {
-   $initPos = $initValues[2] / $initValues[0];
+   $initPos = $initValues[2]/$initValues[0];
   }
 }
 
@@ -255,23 +265,22 @@ sub StartDrag
 # x, y -	The current mouse position.
 
 sub Drag
-{my $w = shift;
- my $e = $w->XEvent;
- return unless (defined $initMouse);
- my $f = $w->fraction($e->x,$e->y);
- my $delta = $f - $initMouse;
+{
+ my($w,$x,$y) = @_;
+ return if !defined $initPos;
+ my $delta = $w->delta($x-$pressX, $y-$pressY);
  if ($w->cget('-jump'))
   {
    if (@initValues == 2)
     {
-     $w->set($initValues[0]+$delta,$initValues[1]+$delta);
+     $w->set($initValues[0]+$delta, $initValues[1]+$delta);
     }
    else
     {
-     $delta = int($delta * $initValues[0]);
+     $delta = sprintf "%d", $delta * $initValues[0]; # round()
      $initValues[2] += $delta;
      $initValues[3] += $delta;
-     $w->set(@initValues);
+     $w->set(@initValues[2,3]);
     }
   }
  else
@@ -290,15 +299,14 @@ sub Drag
 
 sub EndDrag
 {
- my $w = shift;
- my $x = shift;
- my $y = shift;
- return unless defined($initMouse);
+ my($w,$x,$y) = @_;
+ return if (!defined $initPos);
  if ($w->cget('-jump'))
   {
-   $w->ScrlToPos($initPos + $w->fraction($x,$y) - $initMouse);
+   my $delta = $w->delta($x-$pressX, $y-$pressY);
+   $w->ScrlToPos($initPos+$delta);
   }
- undef $initMouse;
+ undef $initPos;
 }
 
 # tkScrlByUnits --
gdiff -up '/usr/local/src/Tk800.024/TList/TList.xs' '/usr/local/src/work/Tk800/TList/TList.xs'
Index: ./TList/TList.xs
--- ./TList/TList.xs	Tue Jul 27 20:20:07 1999
+++ ./TList/TList.xs	Tue Jun 17 01:27:19 2003
@@ -38,6 +38,6 @@ CODE:
 BOOT:
  {
   IMPORT_VTABLES;
-  TixVptr     =     (TixVtab *) SvIV(perl_get_sv("Tk::TixVtab",5));    
-  TixintVptr  =  (TixintVtab *) SvIV(perl_get_sv("Tk::TixintVtab",5)); 
+  TixVptr     =     INT2PTR(TixVtab *, SvIV(perl_get_sv("Tk::TixVtab",5)));    
+  TixintVptr  =  INT2PTR(TixintVtab *, SvIV(perl_get_sv("Tk::TixintVtab",5))); 
  }
gdiff -up '/usr/local/src/Tk800.024/Text/Text.pm' '/usr/local/src/work/Tk800/Text/Text.pm'
Index: ./Text/Text.pm
Prereq:  1.18 
--- ./Text/Text.pm	Sat Jun  3 12:09:30 2000
+++ ./Text/Text.pm	Wed Apr 23 00:28:23 2003
@@ -143,6 +143,8 @@ sub bindRdOnly
  $mw->bind($class,'<Destroy>','Destroy');
  $mw->bind($class, '<3>', ['PostPopupMenu', Ev('X'), Ev('Y')]  );
 
+ $mw->MouseWheelBind($class);
+
  return $class;
 }
 
@@ -629,6 +631,7 @@ sub ToggleInsertMode
 sub InsertKeypress
 {
  my ($w,$char)=@_;
+ return unless length($char);
  if ($w->OverstrikeMode)
   {
    my $current=$w->get('insert');
@@ -1006,35 +1009,36 @@ sub findandreplacepopup
  my $direction = '-forward';
  $frame->Radiobutton(
   variable => \$direction,
-  text => '-forward',value => '-forward' )
+  text => 'forward',value => '-forward' )
   ->grid(-row=> 2, -column=>1, -padx=> 20, -sticky => 'nw');
  $frame->Radiobutton(
   variable => \$direction,
-  text => '-backward',value => '-backward' )
+  text => 'backward',value => '-backward' )
   ->grid(-row=> 3, -column=>1, -padx=> 20, -sticky => 'nw');
 
  $frame->Label(text=>"Mode:")
   ->grid(-row=> 1, -column=>2, -padx=> 20, -sticky => 'nw');
  my $mode = '-exact';
  $frame->Radiobutton(
-  variable => \$mode, text => '-exact',value => '-exact' )
+  variable => \$mode, text => 'exact',value => '-exact' )
   ->grid(-row=> 2, -column=>2, -padx=> 20, -sticky => 'nw');
  $frame->Radiobutton(
-  variable => \$mode, text => '-regexp',value => '-regexp' )
+  variable => \$mode, text => 'regexp',value => '-regexp' )
   ->grid(-row=> 3, -column=>2, -padx=> 20, -sticky => 'nw');
 
  $frame->Label(text=>"Case:")
   ->grid(-row=> 1, -column=>3, -padx=> 20, -sticky => 'nw');
  my $case = '-case';
  $frame->Radiobutton(
-  variable => \$case, text => '-case',value => '-case' )
+  variable => \$case, text => 'case',value => '-case' )
   ->grid(-row=> 2, -column=>3, -padx=> 20, -sticky => 'nw');
  $frame->Radiobutton(
-  variable => \$case, text => '-nocase',value => '-nocase' )
+  variable => \$case, text => 'nocase',value => '-nocase' )
   ->grid(-row=> 3, -column=>3, -padx=> 20, -sticky => 'nw');
 
  ######################################################
  my $find_entry = $pop->Entry(width=>25);
+ $find_entry->focus;
 
  my $button_find = $pop->Button(text=>'Find',
   command => sub {$w->FindNext ($direction,$mode,$case,$find_entry->get()),} )
@@ -1067,6 +1071,8 @@ sub findandreplacepopup
    {$find_entry->insert('insert', $selected);}
   }
 
+ $find_entry->icursor(0);
+
  my ($replace_entry,$button_replace,$button_replace_all);
  unless ($find_only)
   {
@@ -1095,9 +1101,12 @@ sub findandreplacepopup
   command => sub {$w->FindAll($mode,$case,$find_entry->get());} )
   ->pack(-side => 'left');
 
-  my $button_cancel = $pop->Button(text=>'Cancel',
+ my $button_cancel = $pop->Button(text=>'Cancel',
   command => sub {$pop->destroy()} )
   ->pack(-side => 'left');
+
+ $find_entry->bind("<Return>" => [$button_find, 'invoke']);
+ $find_entry->bind("<Escape>" => [$button_cancel, 'invoke']);
 
  $pop->resizable('yes','no');
  return $pop;
gdiff -up '/usr/local/src/Tk800.024/TextList/TextList.pm' '/usr/local/src/work/Tk800/TextList/TextList.pm'
Index: ./TextList/TextList.pm
--- ./TextList/TextList.pm	Sat Jan 22 15:28:19 2000
+++ ./TextList/TextList.pm	Fri Apr 25 16:12:52 2003
@@ -27,13 +27,13 @@ use strict;
 use vars qw($VERSION);
 $VERSION = '3.002'; # $Id: //depot/Tk8/TextList/TextList.pm#2 $
 
-use Tk::Reindex qw(Tk::ROText ReindexedROText);
+#XXXdel: use Tk::Reindex qw(Tk::ROText); #XXXdel: ReindexedROText);
 
 use base qw(Tk::Derived Tk::ReindexedROText );
 
 use Tk qw (Ev);
 
-use base qw(Tk::ReindexedROText);
+#XXX del: use base qw(Tk::ReindexedROText);
 
 Construct Tk::Widget 'TextList';
 
@@ -46,8 +46,11 @@ sub Populate
  my ($w,$args)=@_;
  my $option=delete $args->{'-selectmode'};
  $w->SUPER::Populate($args);
- $w->ConfigSpecs( -selectmode => ['PASSIVE','selectMode','SelectMode','browse'] );
- $w->ConfigSpecs( -takefocus  => ['PASSIVE','takeFocus','TakeFocus','browse'] );
+ $w->ConfigSpecs( -selectmode  => ['PASSIVE','selectMode','SelectMode','browse'],
+		  -takefocus   => ['PASSIVE','takeFocus','TakeFocus',1],
+		  -spacing3    => ['SELF', undef, undef, 3],
+		  -insertwidth => ['SELF', undef, undef, 0],
+		);
 
 }
 
@@ -107,11 +110,11 @@ sub ClassInit
 sub activate
 {
  my($w,$element)=@_;
- $element=$w->index($element).'.0';
- $w->SUPER::tagRemove('_ACTIVE_TAG', '1.0','end');
- $w->SUPER::tagAdd('_ACTIVE_TAG',
+ $element= $w->index($element).'.0';
+ $w->SUPER::tag('remove', '_ACTIVE_TAG', '1.0','end');
+ $w->SUPER::tag('add', '_ACTIVE_TAG',
    $element.' linestart', $element.' lineend');
- $w->SUPER::markSet('active', $element);
+ $w->SUPER::mark('set', 'active', $element);
 }
 
 
@@ -132,7 +135,7 @@ sub bbox
 sub curselection
 {
  my ($w)=@_;
- my @ranges = $w->SUPER::tagRanges('sel');
+ my @ranges = $w->SUPER::tag('ranges', 'sel');
  my @selection_list;
  while (@ranges)
   {
@@ -295,7 +298,7 @@ sub selectionAnchor
 {
  my ($w, $element)=@_;
  $element=$w->index($element);
- $w->SUPER::markSet('anchor', $element.'.0');
+ $w->SUPER::mark('set', 'anchor', $element.'.0');
 }
 
 #######################################################################
@@ -307,7 +310,7 @@ sub selectionClear
  $element1=$w->index($element1);
  $element2=$element1 unless(defined($element2));
  $element2=$w->index($element2);
- $w->SUPER::tagRemove('sel', $element1.'.0', $element2.'.0 lineend +1c');
+ $w->SUPER::tag('remove', 'sel', $element1.'.0', $element2.'.0 lineend +1c');
 }
 
 #######################################################################
@@ -335,7 +338,7 @@ sub selectionSet
  $element1=$w->index($element1);
  $element2=$element1 unless(defined($element2));
  $element2=$w->index($element2);
- $w->SUPER::tagAdd('sel', $element1.'.0', $element2.'.0 lineend +1c');
+ $w->SUPER::tag('add', 'sel', $element1.'.0', $element2.'.0 lineend +1c');
 }
 
 #######################################################################
@@ -390,7 +393,7 @@ sub tagAdd
  $element2=$w->index($element2);
  $element2.='.0 lineend +1c';
 
- $w->SUPER::tagAdd($tagName, $element1, $element2);
+ $w->SUPER::tag('add', $tagName, $element1, $element2);
 }
 
 #######################################################################
@@ -399,7 +402,7 @@ sub tagAdd
 sub tagAddChar
 {
  my $w=shift;
- $w->SUPER::tagAdd(@_);
+ $w->SUPER::tag('add',@_);
 }
 
 
@@ -416,7 +419,7 @@ sub tagRemove
  $element2=$w->index($element2);
  $element2.='.0 lineend +1c';
 
- $w->SUPER::tagRemove('sel', $element1, $element2);
+ $w->SUPER::tag('remove', 'sel', $element1, $element2);
 }
 
 #######################################################################
@@ -425,7 +428,7 @@ sub tagRemove
 sub tagRemoveChar
 {
  my $w=shift;
- $w->SUPER::tagRemove(@_);
+ $w->SUPER::tag('remove', @_);
 }
 
 
@@ -444,7 +447,7 @@ sub tagNextRange
  $element2=$w->index($element2);
  $element2.='.0 lineend +1c';
 
- my $index = $w->SUPER::tagNextrange('sel', $element1, $element2);
+ my $index = $w->SUPER::tag('nextrange', 'sel', $element1, $element2);
  my ($line,$col)=split(/\./,$index);
  return $line;
 }
@@ -455,7 +458,7 @@ sub tagNextRange
 sub tagNextRangeChar
 {
  my $w=shift;
- $w->SUPER::tagNextrange(@_);
+ $w->SUPER::tag('nextrange', @_);
 }
 
 #######################################################################
@@ -471,7 +474,7 @@ sub tagPrevRange
  $element2=$w->index($element2);
  $element2.='.0 lineend +1c';
 
- my $index = $w->SUPER::tagPrevrange('sel', $element1, $element2);
+ my $index = $w->SUPER::tag('prevrange', 'sel', $element1, $element2);
  my ($line,$col)=split(/\./,$index);
  return $line;
 }
@@ -482,7 +485,7 @@ sub tagPrevRange
 sub tagPrevRangeChar
 {
  my $w=shift;
- $w->SUPER::tagPrevrange(@_);
+ $w->SUPER::tag('prevrange', @_);
 }
 
 
@@ -495,7 +498,7 @@ sub markSet
  my ($w,$mark,$element1)=@_;
  $element1=$w->index($element1);
  $element1.='.0';
- $w->SUPER::markSet($element1,$mark);
+ $w->SUPER::mark('set', $element1,$mark);
 }
 
 #######################################################################
@@ -504,7 +507,7 @@ sub markSet
 sub markSetChar
 {
  my $w=shift;
- $w->SUPER::markSet(@_);
+ $w->SUPER::mark('set', @_);
 }
 
 #######################################################################
@@ -515,7 +518,7 @@ sub markNext
  my ($w,$element1)=@_;
  $element1=$w->index($element1);
  $element1.='.0';
- return $w->SUPER::markNext($element1);
+ return $w->SUPER::mark('next', $element1);
 }
 
 #######################################################################
@@ -524,7 +527,7 @@ sub markNext
 sub markNextChar
 {
  my $w=shift;
- $w->SUPER::markNext(@_);
+ $w->SUPER::mark('next', @_);
 }
 
 
@@ -536,7 +539,7 @@ sub markPrevious
  my ($w,$element1)=@_;
  $element1=$w->index($element1);
  $element1.='.0';
- return $w->SUPER::markPrevious($element1);
+ return $w->SUPER::mark('previous', $element1);
 }
 
 #######################################################################
@@ -545,7 +548,7 @@ sub markPrevious
 sub markPreviousChar
 {
  my $w=shift;
- $w->SUPER::markPrevious(@_);
+ $w->SUPER::mark('previous', @_);
 }
 
 
gdiff -up '/usr/local/src/Tk800.024/TextList/textlist_demo' '/usr/local/src/work/Tk800/TextList/textlist_demo'
Index: ./TextList/textlist_demo
--- ./TextList/textlist_demo	Thu Dec  2 18:47:02 1999
+++ ./TextList/textlist_demo	Fri Apr 25 16:12:58 2003
@@ -23,17 +23,26 @@ wiskey xray yankee zulu
 /;
 
 
-my $lb = $mw->Scrolled($obj)->pack;
+$mw->Label(-text => $obj)->grid(-column => 0, -row => 0);
+my $lb = $mw->Scrolled($obj)->grid(-column => 0, -row => 1);
 $lb->insert('end', @choices);
 $lb->configure(-selectmode=>'extended');
 
+$mw->Label(-text => "Listbox")->grid(-column => 1, -row => 0);
+my $lb2 = $mw->Scrolled("Listbox")->grid(-column => 1, -row => 1, -sticky => "ns");
+$lb2->insert('end', @choices);
+$lb2->configure(-selectmode=>'extended');
+
  $mw->bind('<F1>',
 sub
 {
-	print "current selections are: \n";
-	my @list = $lb->curselection;
-	print join(' ',@list);
-	print "\n\n\n";
+	for my $def ([$lb, $obj],
+		     [$lb2, 'Listbox']) {
+		print "current selections in $def->[1] are: \n";
+		my @list = $def->[0]->curselection;
+		print join(' ',@list);
+		print "\n\n\n";
+	}
 });
 
  $mw->bind('<F2>',
@@ -51,6 +60,9 @@ sub
 		print "tag: $tag    locations = $string \n";
 		}
 
+$lb->activate(10);
+$lb2->activate(10);
+
 });
 
 $lb->tagConfigure('TEST_TAG', foreground=>'red');
@@ -59,5 +71,6 @@ $lb->tagAdd('TEST_TAG', 4);
 $lb->tagAddChar('TEST_TAG', 1.4, 1.5);
 
 $lb->configure(-width=>20);
+$lb2->configure(-width=>20);
 
 MainLoop;
gdiff -up '/usr/local/src/Tk800.024/TixPixmap/Pixmap.xs' '/usr/local/src/work/Tk800/TixPixmap/Pixmap.xs'
Index: ./TixPixmap/Pixmap.xs
--- ./TixPixmap/Pixmap.xs	Tue Jul 27 20:20:07 1999
+++ ./TixPixmap/Pixmap.xs	Tue Jun 17 08:27:49 2003
@@ -39,7 +39,7 @@ TkWindow *winPtr;
    Tcl_Interp *Et_Interp = mainInfo->interp;
    if (Et_Interp)
     {
-#ifdef WIN32
+#if defined(WIN32) && !defined(__GNUC__)
 #pragma warning(disable: 4305)
 #endif
 #define UNSIGNED_CHAR unsigned char
@@ -61,9 +61,9 @@ TkWindow *	win
 BOOT:
  {
   IMPORT_VTABLES;
-  TixVptr     =     (TixVtab *) SvIV(perl_get_sv("Tk::TixVtab",5));    
-  TixintVptr  =  (TixintVtab *) SvIV(perl_get_sv("Tk::TixintVtab",5));  
-  TiximgxpmVptr  =  (TiximgxpmVtab *) SvIV(perl_get_sv("Tk::TiximgxpmVtab",5));  
+  TixVptr     =     INT2PTR(TixVtab *, SvIV(perl_get_sv("Tk::TixVtab",5)));    
+  TixintVptr  =  INT2PTR(TixintVtab *, SvIV(perl_get_sv("Tk::TixintVtab",5)));
+  TiximgxpmVptr  =  INT2PTR(TiximgxpmVtab *, SvIV(perl_get_sv("Tk::TiximgxpmVtab",5)));
 
   Tk_CreateImageType(&tixPixmapImageType);
  }
gdiff -up '/usr/local/src/Tk800.024/Tixish/Balloon.pm' '/usr/local/src/work/Tk800/Tixish/Balloon.pm'
Index: ./Tixish/Balloon.pm
--- ./Tixish/Balloon.pm	Mon Jan 17 20:31:18 2000
+++ ./Tixish/Balloon.pm	Fri May  9 08:09:32 2003
@@ -1,6 +1,12 @@
 #
 # The help widget that provides both "balloon" and "status bar"
 # types of help messages.
+#
+# This is a patched version of Balloon 3.037 - it adds support
+# for different orientations of the balloon widget, depending
+# on wether there's enough space for it. The little arrow now
+# should always point directly to the client.
+# Added by Gerhard Petrowitsch (gerhard.petrowitsch@philips.com)
 
 package Tk::Balloon;
 
@@ -20,6 +26,13 @@ use strict;
 
 my @balloons;
 my $button_up = 0;
+my %arrows = ( TL => 'R0lGODlhBgAGAJEAANnZ2QAAAP///////yH5BAEAAAAALAAAAAAGAAYAAAINjA0HAEdwLCwMKIQfBQA7',
+	       TR => 'R0lGODlhBgAGAJEAANnZ2QAAAP///////yH5BAEAAAAALAAAAAAGAAYAAAIRBGMDwAEQkgAIAAoCABEEuwAAOw==',
+	       BR => 'R0lGODlhBgAGAJEAANnZ2QAAAP///////yH5BAEAAAAALAAAAAAGAAYAAAIPDOHHhYVRAIgIAEISQLELADs=',
+	       BL => 'R0lGODlhBgAGAJEAANnZ2QAAAP///////yH5BAEAAAAALAAAAAAGAAYAAAIPhB1xAUFALCIMKAaAWQAVADs=',
+	       NO => 'R0lGODlhAQABAJEAANnZ2f///////////yH5BAEAAAAALAAAAAABAAEAAAICRAEAOw=='
+	     );
+
 
 sub ClassInit {
     my ($class, $mw) = @_;
@@ -42,17 +55,43 @@ sub Populate {
     $w->configure(-background => 'black');
     my $a = $w->Frame;
     my $m = $w->Frame;
+    my $d = $w->Frame;
+    # the balloon arrows
+    $w->{img_tl} = $w->Photo(-data => $arrows{TL}, '-format' => 'gif');
+    $w->{img_tr} = $w->Photo(-data => $arrows{TR}, '-format' => 'gif');
+    $w->{img_bl} = $w->Photo(-data => $arrows{BL}, '-format' => 'gif');
+    $w->{img_br} = $w->Photo(-data => $arrows{BR}, '-format' => 'gif');
+    $w->{img_no} = $w->Photo(-data => $arrows{NO}, '-format' => 'gif');
+    $w->OnDestroy([$w, 'deletePhotos']);
     $a->configure(-bd => 0);
-    my $al = $a->Label(-bd => 0,
+    $d->configure(-bd => 0);
+    my $atl = $a->Label(-bd => 0,
+		       -relief => 'flat',
+		       -image => $w->{img_no});
+    $atl->pack(-side => 'top', -padx => 1, -pady => 1, -anchor => 'nw');
+    my $abl = $a->Label(-bd => 0,
+		       -relief => 'flat',
+		       -image => $w->{img_no});
+    $abl->pack(-side => 'bottom', -padx => 1, -pady => 1, -anchor => 'sw');
+    my $dtr = $d->Label(-bd => 0,
 		       -relief => 'flat',
-		       -bitmap => '@' . Tk->findINC('balArrow.xbm'));
-    $al->pack(-side => 'left', -padx => 1, -pady => 1, -anchor => 'nw');
+		       -image => $w->{img_no});
+    $dtr->pack(-side => 'top', -padx => 1, -pady => 1, -anchor => 'ne');
+    my $dbr = $d->Label(-bd => 0,
+		       -relief => 'flat',
+		       -image => $w->{img_no});
+    $dbr->pack(-side => 'bottom', -padx => 1, -pady => 1, -anchor => 'se');
+    # the balloon message
     $m->configure(-bd => 0);
     my $ml = $m->Label(-bd => 0,
 		       -padx => 0,
 		       -pady => 0,
 		       -text => $args->{-message});
     $w->Advertise('message' => $ml);
+    $w->Advertise('TLarrow' => $atl);
+    $w->Advertise('TRarrow' => $dtr);
+    $w->Advertise('BLarrow' => $abl);
+    $w->Advertise('BRarrow' => $dbr);
     $ml->pack(-side => 'left',
 	      -anchor => 'w',
 	      -expand => 1,
@@ -61,6 +100,7 @@ sub Populate {
 	      -pady => 3);
     $a->pack(-fill => 'both', -side => 'left');
     $m->pack(-fill => 'both', -side => 'left');
+    $d->pack(-fill => 'both', -side => 'left');
 
     # append to global list of balloons
     push(@balloons, $w);
@@ -70,6 +110,7 @@ sub Populate {
     $w->{'menu_index_over'} = 'none';
     $w->{'canvas_tag'} = '';
     $w->{'canvas_tag_over'} = '';
+
     $w->ConfigSpecs(-installcolormap => ['PASSIVE', 'installColormap', 'InstallColormap', 0],
 		    -initwait => ['PASSIVE', 'initWait', 'InitWait', 350],
 		    -state => ['PASSIVE', 'state', 'State', 'both'],
@@ -77,10 +118,12 @@ sub Populate {
 		    -statusmsg => ['PASSIVE', 'statusMsg', 'StatusMsg', ''],
 		    -balloonmsg => ['PASSIVE', 'balloonMsg', 'BalloonMsg', ''],
 		    -balloonposition => ['PASSIVE', 'balloonPosition', 'BalloonPosition', 'widget'],
+#    -balloonanchor => ['PASSIVE', 'balloonAnchor', 'BalloonAnchor', 'nw'],
 		    -postcommand => ['CALLBACK', 'postCommand', 'PostCommand', undef],
 		    -cancelcommand => ['CALLBACK', 'cancelCommand', 'CancelCommand', undef],
 		    -motioncommand => ['CALLBACK', 'motionCommand', 'MotionCommand', undef],
 		    -background => ['DESCENDANTS', 'background', 'Background', '#C0C080'],
+		    -foreground => ['DESCENDANTS', 'foreground', 'Foreground', undef],
 		    -font => [$ml, 'font', 'Font', '-*-helvetica-medium-r-normal--*-120-*-*-*-*-*-*'],
 		    -borderwidth => ['SELF', 'borderWidth', 'BorderWidth', 1]
 		   );
@@ -125,13 +168,15 @@ sub GetOption
 sub Motion {
     my ($ewin, $x, $y, $s) = @_;
 
-    # Don't do anything if a button is down or a grab is active
-    # 0x1f00 is (Button1Mask | .. | Button5Mask)
-    return if not defined $ewin or ((($s & 0x1f00) or $ewin->grabCurrent()) and not $ewin->isa('Tk::Menu'));
+    return if not defined $ewin;
 
     # Find which window we are over
     my $over = $ewin->Containing($x, $y);
 
+    #return if not defined $ewin or ((($s & 0x1f00) or $ewin->grabCurrent()) and not $ewin->isa('Tk::Menu'));
+#    return if $ewin->grabBad($over);
+    return if &grabBad($ewin, $over);
+
     foreach my $w (@balloons) {
 	# if cursor has moved over the balloon -- ignore
 	next if defined $over and $over->toplevel eq $w;
@@ -199,7 +244,9 @@ sub SwitchToClient {
     return unless Exists($w);
     return unless Exists($client);
     return unless $client->IS($w->{'client'});
-    return if $w->grabCurrent and not $client->isa('Tk::Menu');
+    #return if $w->grabCurrent and not $client->isa('Tk::Menu');
+    #return if $w->grabBad($client);
+    return if &grabBad($w, $client);
     my $command = $w->GetOption(-postcommand => $client);
     if (defined $command) {
 	# Execute the user's command and return if it returns false:
@@ -217,6 +264,27 @@ sub SwitchToClient {
     $w->{'delay'}  = $w->repeat(200, ['Verify', $w, $client]);
 }
 
+sub grabBad {
+
+    my ($w, $client) = @_;
+    
+    return 0 unless Exists($client);
+    my $g = $w->grabCurrent;
+    return 0 unless defined $g;
+    return 0 if $g->isa('Tk::Menu');
+    return 0 if $g eq $client;
+
+    # The grab is OK if $client is a decendant of $g. Use the internal Tcl/Tk
+    # pathname (yes, it's cheating, but it's legal).
+
+    return 0 if $g == $w->MainWindow;
+    my $wp = $w->PathName;
+    my $gp = $g->PathName;
+    return 0 if $wp =~ /^$gp/;
+    return 1;			# bad grab
+
+} # end grabBad
+
 sub Subclient
 {
  my ($w,$data) = @_;
@@ -236,7 +304,9 @@ sub Verify {
     my $deactivate = # DELETE? or move it to the isa-Menu section?:
 	             # ($over ne $client) or
 	             not $client->IS($w->{'client'})
-                     or (!$client->isa('Tk::Menu') && $w->grabCurrent);
+#                     or (!$client->isa('Tk::Menu') && $w->grabCurrent);
+#                     or $w->grabbad($client);
+                     or &grabBad($w, $client);
     if ($deactivate)
      {
       $w->Deactivate;
@@ -288,6 +358,7 @@ sub Popup {
 
     my ($x, $y);
     my $pos = $w->GetOption(-balloonposition => $client);
+#    my $anc = $w->GetOption(-balloonanchor => $client);
     my $postpos = delete $w->{'clients'}{$client}{'postposition'};
     if (defined $postpos) {
 	# The postcommand must have returned a position for the balloon - I will use that:
@@ -304,12 +375,46 @@ sub Popup {
 
     $w->idletasks;
     my($width, $height) = ($w->reqwidth, $w->reqheight);
-    my $xx = ($x + $width > $w->screenwidth
-	      ? $w->screenwidth - $width
-	      : $x);
-    my $yy = ($y + $height > $w->screenheight
-	      ? $w->screenheight - $height
-	      : $y);
+    my($xx, $yy) = ($x,$y);
+    my $ex = 0;
+    if ($x + $width > $w->screenwidth) {
+      $ex |= 1;
+    }
+    if ($y + $height > $w->screenheight) {
+      $ex |= 2;
+    }
+    if ($ex == 0) {
+      $w->Subwidget('TLarrow')->configure(-image => $w->{img_tl});
+      $w->Subwidget('TRarrow')->configure(-image => $w->{img_no});
+      $w->Subwidget('BLarrow')->configure(-image => $w->{img_no});
+      $w->Subwidget('BRarrow')->configure(-image => $w->{img_no});
+      ($xx,$yy) = ($x,$y);
+    } elsif ($ex == 1) {
+      $w->Subwidget('TLarrow')->configure(-image => $w->{img_no});
+      $w->Subwidget('TRarrow')->configure(-image => $w->{img_tr});
+      $w->Subwidget('BLarrow')->configure(-image => $w->{img_no});
+      $w->Subwidget('BRarrow')->configure(-image => $w->{img_no});
+      $x = int($client->pointerx - 2) if ($pos eq 'mouse');
+      ($xx,$yy) = ($x-$width,$y);
+    } elsif ($ex == 2) {
+      $w->Subwidget('TLarrow')->configure(-image => $w->{img_no});
+      $w->Subwidget('TRarrow')->configure(-image => $w->{img_no});
+      $w->Subwidget('BLarrow')->configure(-image => $w->{img_bl});
+      $w->Subwidget('BRarrow')->configure(-image => $w->{img_no});
+      $x = int($client->pointerx + 2) if ($pos eq 'mouse');
+      $y = int($client->pointery - 2) if ($pos eq 'mouse');
+      $y = int($client->rooty + int ($client->height/4.3)) if ($pos eq 'widget');
+      ($xx,$yy) = ($x,$y-$height);
+    } else {
+      $w->Subwidget('TLarrow')->configure(-image => $w->{img_no});
+      $w->Subwidget('TRarrow')->configure(-image => $w->{img_no});
+      $w->Subwidget('BLarrow')->configure(-image => $w->{img_no});
+      $w->Subwidget('BRarrow')->configure(-image => $w->{img_br});
+      $x = int($client->pointerx - 2) if ($pos eq 'mouse');
+      $y = int($client->pointery - 2) if ($pos eq 'mouse');
+      $y = int($client->rooty + int ($client->height/4.3)) if ($pos eq 'widget');
+      ($xx,$yy) = ($x-$width,$y-$height);
+    }
 
     $w->geometry("+$xx+$yy");
     #$w->MoveToplevelWindow($x,$y);
@@ -356,7 +461,15 @@ sub destroy {
     #$w->SUPER::destroy;
     # Above doesn't seem to work but at least I have removed it from the
     # list of balloons and maybe undef'ing the object will get rid of it.
+    $w->deletePhotos();
     undef $w;
+}
+
+sub deletePhotos {
+    my ($w) = @_;
+    for (qw(no tl tr bl br)) {
+	$w->{"img_$_"}->delete if defined $w->{"img_$_"};
+    }
 }
 
 1;
gdiff -up '/usr/local/src/Tk800.024/Tixish/BrowseEntry.pm' '/usr/local/src/work/Tk800/Tixish/BrowseEntry.pm'
Index: ./Tixish/BrowseEntry.pm
--- ./Tixish/BrowseEntry.pm	Fri Sep  8 11:34:36 2000
+++ ./Tixish/BrowseEntry.pm	Mon Apr 21 21:50:05 2003
@@ -1,65 +1,114 @@
 #
 # BrowseEntry is a stripped down version of ComboBox.tcl from Tix4.0
+#
+# Some additions by Slaven Rezic <slaven@rezic.de> to make the widget
+# look like the Windows' Combobox. There are also additional options.
+#
 
 package Tk::BrowseEntry;
 
 use vars qw($VERSION);
-$VERSION = '3.030'; # $Id: //depot/Tk8/Tixish/BrowseEntry.pm#30 $
+$VERSION = '4.007'; # $Id: BrowseEntry.pm,v 1.5 2003/02/13 22:15:57 eserte Exp $
 
 use Tk qw(Ev);
 use Carp;
 use strict;
 
-require Tk::Frame;
-require Tk::LabEntry;
-
 use base qw(Tk::Frame);
 Construct Tk::Widget 'BrowseEntry';
 
+require Tk::LabEntry;
+
+sub LabEntryWidget { "LabEntry" }
+sub ButtonWidget   { "Button"   }
+sub ListboxWidget  { "Listbox"  }
+
 sub Populate {
     my ($w, $args) = @_;
 
-    $w->SUPER::Populate($args);
+    $w->Tk::Frame::Populate($args);
 
     # entry widget and arrow button
     my $lpack = delete $args->{-labelPack};
     if (not defined $lpack) {
 	$lpack = [-side => 'left', -anchor => 'e'];
     }
+    $w->{_BE_Style} = delete $args->{-style} || $Tk::platform;
+    my $LabEntry = $w->LabEntryWidget;
+    my $Listbox  = $w->ListboxWidget;
+    my $Button   = $w->ButtonWidget;
+    # XXX should this be retained?
+#      if (defined $args->{-state} and $args->{-state} eq 'readonly') { # XXX works only at construction time
+#  	$LabEntry = "NoSelLabEntry";
+#  	require Tk::NoSelLabEntry;
+#      }
+    my $e;
     my $var = "";
-    my $e = $w->LabEntry(-labelPack => $lpack,
-			 -label => delete $args->{-label},
-			 -textvariable => \$var,);
-    my $b = $w->Button(-bitmap => '@' . Tk->findINC('cbxarrow.xbm'));
+    my @LabEntry_args = (-textvariable => \$var);
+    if (exists $args->{-label}) {
+	$e = $w->$LabEntry(-labelPack => $lpack,
+			   -label => delete $args->{-label},
+			   @LabEntry_args,
+			  );
+    } else {
+	$e = $w->$LabEntry(@LabEntry_args);
+    }
+    my $b = $w->$Button(-bitmap => '@' . Tk->findINC($w->{_BE_Style} eq 'MSWin32' ? 'arrowdownwin.xbm' : 'cbxarrow.xbm'));
     $w->Advertise('entry' => $e);
     $w->Advertise('arrow' => $b);
     $b->pack(-side => 'right', -padx => 1);
-    $e->pack(-side => 'right', -fill => 'x', -expand => 1, -padx => 1);
+    $e->pack(-side => 'right', -fill => 'x', -expand => 1); #XXX, -padx => 1);
 
     # popup shell for listbox with values.
-    my $c = $w->Toplevel(-bd => 2, -relief => 'raised');
+    my $c = $w->Toplevel(-bd => 2,
+			 -relief => ($w->{_BE_Style} eq 'MSWin32'
+				     ? "solid" : "raised"));
     $c->overrideredirect(1);
     $c->withdraw;
-    my $sl = $c->Scrolled( qw/Listbox -selectmode browse -scrollbars oe/ );
+    my $sl = $c->Scrolled( $Listbox, qw/-selectmode browse -scrollbars oe/ );
+    if ($w->{_BE_Style} eq 'MSWin32' and $Tk::platform eq 'MSWin32') {
+	$sl->configure(-bg => 'SystemWindow', -relief => "flat");
+    }
     $w->Advertise('choices' => $c);
     $w->Advertise('slistbox' => $sl);
     $sl->pack(-expand => 1, -fill => 'both');
 
+    $sl->Subwidget("scrolled")->bind("<Motion>",sub {
+	return unless ($w->{_BE_Style} eq 'MSWin32');
+	my $e = $_[0]->XEvent;
+	my $y = $e->y;
+	my $inx = $sl->nearest($y);
+	if (defined $inx) {
+	    $sl->selectionClear(0, "end");
+	    $sl->selectionSet($inx);
+	}
+   });
+
     # other initializations
     $w->SetBindings;
-    $w->{'popped'} = 0;
-    $w->Delegates('insert' => $sl, 'delete' => $sl, get => $sl, DEFAULT => $e);
+    $w->{'_BE_popped'} = 0;
+    $w->Delegates(get => $sl, DEFAULT => $e);
     $w->ConfigSpecs(
         -listwidth   => [qw/PASSIVE  listWidth   ListWidth/,   undef],
+        -listheight  => [{-height => $sl}, qw/listHeight ListHeight/, undef],
         -listcmd     => [qw/CALLBACK listCmd     ListCmd/,     undef],
+        -autolistwidth   => [qw/PASSIVE autoListWidth AutoListWidth/, undef],
+        -autolimitheight => [qw/PASSIVE autoLimitHeight AutoLimitHeight 0/],
         -browsecmd   => [qw/CALLBACK browseCmd   BrowseCmd/,   undef],
+	-browse2cmd  => [qw/CALLBACK browse2Cmd  Browse2Cmd/,  undef],
         -choices     => [qw/METHOD   choices     Choices/,     undef],
         -state       => [qw/METHOD   state       State         normal/],
         -arrowimage  => [ {-image => $b}, qw/arrowImage ArrowImage/, undef],
-        -variable    => '-textvariable',
+        -variable    => [ {'-textvariable' => $e} ],
 	-colorstate  => [qw/PASSIVE  colorState  ColorState/,  undef],
         -command     => '-browsecmd',
         -options     => '-choices',
+	-label       => [qw/PASSIVE  label       Label/,       undef],
+	-labelPack   => [qw/PASSIVE  labelPack   LabelPack/,   undef],
+		    #-background  => [$e, qw/background Background/,   undef],
+		    #-foreground  => [$e, qw/foreground Foreground/,   undef],
+	-buttontakefocus => [{-takefocus => $b}, 'buttonTakefocus',
+			     'ButtonTakefocus', 1],
         DEFAULT      => [$e] );
 }
 
@@ -93,20 +142,20 @@ sub space
 {
  my $w = shift;
  $w->BtnDown;
- $w->{'savefocus'} = $w->focusCurrent;
+ $w->{'_BE_savefocus'} = $w->focusCurrent;
  $w->Subwidget('slistbox')->focus;
 }
 
 
 sub ListboxRelease
-{
+{    
  my ($w,$x,$y) = @_;
  $w->ButtonHack;
  $w->LbChoose($x, $y);
 }
 
 sub Return
-{
+{     
  my ($w,$l) = @_;
  my($x, $y) = $l->bbox($l->curselection);
  $w->LbChoose($x, $y)
@@ -117,28 +166,37 @@ sub BtnDown {
     my ($w) = @_;
     return if $w->cget( '-state' ) eq 'disabled';
 
-    if ($w->{'popped'}) {
+    if ($w->{'_BE_popped'}) {
 	$w->Popdown;
-	$w->{'buttonHack'} = 0;
+	$w->{'_BE_buttonHack'} = 0;
     } else {
 	$w->PopupChoices;
-	$w->{'buttonHack'} = 1;
+	$w->{'_BE_buttonHack'} = 1;
     }
 }
 
 sub PopupChoices {
     my ($w) = @_;
 
-    if (!$w->{'popped'}) {
-       $w->Callback(-listcmd => $w);
+    if (!$w->{'_BE_popped'}) {
+	$w->Callback(-listcmd => $w);
 	my $e = $w->Subwidget('entry');
 	my $c = $w->Subwidget('choices');
 	my $s = $w->Subwidget('slistbox');
 	my $a = $w->Subwidget('arrow');
-	my $y1 = $e->rooty + $e->height + 3;
+	my $y1 = ($w->{_BE_Style} eq 'MSWin32'
+		  ? $a->rooty + $a->height
+		  : $e->rooty + $e->height + 3
+		 );
 	my $bd = $c->cget(-bd) + $c->cget(-highlightthickness);
-	my $ht = $s->reqheight + 2 * $bd;
-	my $x1 = $e->rootx;
+	# using the real listbox reqheight rather than the
+	# container frame one, which does not change after resizing the
+	# listbox
+	my $ht = $s->Subwidget("scrolled")->reqheight + 2 * $bd;
+	my $x1 = ($w->{_BE_Style} eq 'MSWin32'
+		  ? $e->Subwidget("entry")->rootx
+		  : $e->rootx
+		 );
 	my ($width, $x2);
 	if (defined $w->cget(-listwidth)) {
 	    $width = $w->cget(-listwidth);
@@ -147,18 +205,18 @@ sub PopupChoices {
 	    $x2 = $a->rootx + $a->width;
 	    $width = $x2 - $x1;
 	}
-	my $rw = $c->reqwidth;
-	if ($rw < $width) {
-	    $rw = $width
-	} else {
-	    if ($rw > $width * 3) {
-		$rw = $width * 3;
-	    }
-	    if ($rw > $w->vrootwidth) {
-		$rw = $w->vrootwidth;
-	    }
-	}
-	$width = $rw;
+    	my $rw = $c->reqwidth;
+    	if ($rw < $width) {
+    	    $rw = $width
+    	} else {
+    	    if ($rw > $width * 3) {
+    		$rw = $width * 3;
+    	    }
+    	    if ($rw > $w->vrootwidth) {
+    		$rw = $w->vrootwidth;
+    	    }
+    	}
+    	$width = $rw;
 
 	# if listbox is too far right, pull it back to the left
 	#
@@ -173,18 +231,44 @@ sub PopupChoices {
 	}
 
 	# if listbox is below bottom of screen, pull it up.
+	# check the Win32 taskbar, if possible
+	my $rootheight;
+	if ($Tk::platform eq 'MSWin32' and $^O eq 'MSWin32') {
+	    eval {
+		require Win32Util; # XXX should not use a non-CPAN widget
+		$rootheight = (Win32Util::screen_region($w))[3];
+	    };
+	}
+	if (!defined $rootheight) {
+	    $rootheight = $w->vrootheight;
+	}
+
 	my $y2 = $y1 + $ht;
-	if ($y2 > $w->vrootheight) {
+	if ($y2 > $rootheight) {
 	    $y1 = $y1 - $ht - ($e->height - 5);
 	}
-
 	$c->geometry(sprintf('%dx%d+%d+%d', $rw, $ht, $x1, $y1));
 	$c->deiconify;
 	$c->raise;
 	$e->focus;
-	$w->{'popped'} = 1;
+	$w->{'_BE_popped'} = 1;
+
+	# highlight current selection
+	my $current_sel = $e->get;
+	if (defined $current_sel) {
+	    my $i = 0;
+	    foreach my $str ($s->get(0, "end")) {
+		if ($str eq $current_sel) {
+		    $s->selectionClear(0, "end");
+		    $s->selectionSet($i);
+		    last;
+		}
+		$i++;
+	    }
+	}
 
 	$c->configure(-cursor => 'arrow');
+	$w->{'_BE_grabinfo'} = $w->grabSave;
 	$w->grabGlobal;
     }
 }
@@ -194,13 +278,14 @@ sub LbChoose {
     my ($w, $x, $y) = @_;
     my $l = $w->Subwidget('slistbox')->Subwidget('listbox');
     if ((($x < 0) || ($x > $l->Width)) ||
-	(($y < 0) || ($y > $l->Height))) {
-	# mouse was clicked outside the listbox... close the listbox
-	$w->LbClose;
+        (($y < 0) || ($y > $l->Height))) {
+        # mouse was clicked outside the listbox... close the listbox
+        $w->LbClose;
     } else {
-	# select appropriate entry and close the listbox
-	$w->LbCopySelection;
-       $w->Callback(-browsecmd => $w, $w->Subwidget('entry')->get);
+        # select appropriate entry and close the listbox
+        $w->LbCopySelection;
+	$w->Callback(-browsecmd, $w, $w->Subwidget('entry')->get());
+	$w->Callback(-browse2cmd => $w, $w->LbIndex);
     }
 }
 
@@ -217,11 +302,11 @@ sub LbCopySelection {
     my ($w) = @_;
     my $index = $w->LbIndex;
     if (defined $index) {
-	$w->{'curIndex'} = $index;
+	$w->{'_BE_curIndex'} = $index;
 	my $l = $w->Subwidget('slistbox')->Subwidget('listbox');
         my $var_ref = $w->cget( '-textvariable' );
         $$var_ref = $l->get($index);
-	if ($w->{'popped'}) {
+	if ($w->{'_BE_popped'}) {
 	    $w->Popdown;
 	}
     }
@@ -245,15 +330,19 @@ sub LbIndex {
 # pop down the listbox
 sub Popdown {
     my ($w) = @_;
-    if ($w->{'savefocus'} && Tk::Exists($w->{'savefocus'})) {
-	$w->{'savefocus'}->focus;
-	delete $w->{'savefocus'};
+    if ($w->{'_BE_savefocus'} && Tk::Exists($w->{'_BE_savefocus'})) {
+	$w->{'_BE_savefocus'}->focus;
+	delete $w->{'_BE_savefocus'};
     }
-    if ($w->{'popped'}) {
+    if ($w->{'_BE_popped'}) {
 	my $c = $w->Subwidget('choices');
 	$c->withdraw;
 	$w->grabRelease;
-	$w->{'popped'} = 0;
+	if (ref $w->{'_BE_grabinfo'} eq 'CODE') {
+	    $w->{'_BE_grabinfo'}->();
+	    delete $w->{'_BE_grabinfo'};
+	}
+	$w->{'_BE_popped'} = 0;
     }
 }
 
@@ -262,7 +351,7 @@ sub Popdown {
 sub ButtonHack {
     my ($w) = @_;
     my $b = $w->Subwidget('arrow');
-    if ($w->{'buttonHack'}) {
+    if ($w->{'_BE_buttonHack'}) {
 	$b->butUp;
     }
 }
@@ -281,7 +370,8 @@ sub choices
      $w->insert( 'end', $val);
      $hash{$val} = 1;
     }
-   $old = (@$choices) ? $choices->[0] : undef unless exists $hash{$old};
+   $old = $choices->[0]
+    if defined $old && not exists $hash{$old} && defined $choices->[0];
    $$var = $old;
   }
  else
@@ -309,9 +399,20 @@ sub _set_edit_state {
     if( $state eq 'readonly' ) {
         $entry->configure( -state => 'disabled' );
         $button->configure( -state => 'normal' );
+	if ($w->{_BE_Style} eq 'MSWin32') {
+	    $entry->bind('<1>',[$w,'BtnDown']);
+	    $w->{_BE_OriginalCursor} = $entry->cget( -cursor );
+	    $entry->configure( -cursor => 'left_ptr' );
+	}
     } else {
         $entry->configure( -state => $state );
+	if (exists $w->{_BE_OriginalCursor}) {
+	    $entry->configure(-cursor => delete $w->{_BE_OriginalCursor});
+	}
         $button->configure( -state => $state );
+	if ($w->{_BE_Style} eq 'MSWin32') {
+	    $entry->bind('<1>',['Button1',Tk::Ev('x')]);
+	}
     }
 }
 
@@ -346,6 +447,53 @@ sub shrinkwrap {
     $lb->configure( -width => $size );
 }
 
+sub limitheight {
+    my $w = shift;
+    my $choices_number = shift || $w->Subwidget('slistbox')->index("end");
+    $choices_number = 10 if $choices_number > 10;
+    $w->configure(-listheight => $choices_number) if ($choices_number > 0);
+}
+
+sub insert {
+    my $w = shift;
+    $w->Subwidget("slistbox")->insert(@_);
+    if ($w->cget(-autolimitheight)) {
+	$w->limitheight;
+    }
+    if ($w->cget(-autolistwidth)) {
+	$w->updateListWidth(@_[1..$#_]);
+    }
+}
+
+sub delete {
+    my $w = shift;
+    $w->Subwidget("slistbox")->delete(@_);
+    if ($w->cget(-autolimitheight)) {
+	$w->limitheight;
+    }
+    if ($w->cget(-autolistwidth)) {
+	$w->updateListWidth();
+    }
+}
+
+sub updateListWidth {
+    my $w = shift;
+    my @ins = @_;
+    if (!@ins) {
+	@ins = $w->get(0, "end");
+    }
+
+    my $max_width = 0;
+    foreach my $ins (@ins) {
+	my $new_width = $w->fontMeasure($w->cget(-font), $ins);
+	if ($new_width > $max_width) {
+	    $max_width = $new_width;
+	}
+    }
+    if ($max_width > 20) { # be sane
+	$w->configure(-listwidth => $max_width + 32); # XXX for scrollbar
+    }
+}
 
 1;
 
gdiff -up '/usr/local/src/Tk800.024/Tixish/DialogBox.pm' '/usr/local/src/work/Tk800/Tixish/DialogBox.pm'
Index: ./Tixish/DialogBox.pm
--- ./Tixish/DialogBox.pm	Fri Mar 31 14:09:33 2000
+++ ./Tixish/DialogBox.pm	Fri Apr 25 15:54:18 2003
@@ -27,7 +27,11 @@ sub Populate {
     $cw->{'selected_button'} = '';
     $cw->transient($cw->Parent->toplevel);
     $cw->withdraw;
-    $cw->protocol('WM_DELETE_WINDOW' => sub {});
+    if (@$buttons == 1) {
+	$cw->protocol('WM_DELETE_WINDOW' => sub { $cw->{'default_button'}->invoke });
+    } else {
+	$cw->protocol('WM_DELETE_WINDOW' => sub {});
+    }
 
     # create the two frames
     my $top = $cw->Component('Frame', 'top');
@@ -42,6 +46,7 @@ sub Populate {
     foreach $bl (@$buttons)
      {
 	my $b = $bot->Button(-text => $bl, -command => sub { $cw->{'selected_button'} = "$bl" } );
+	$b->bind('<Return>' => [ $b, 'Invoke']);
 	$cw->Advertise("B_$bl" => $b);
         if ($Tk::platform eq 'MSWin32')
          {
@@ -56,7 +61,6 @@ sub Populate {
 	        $b->pack(-in => $db, -padx => '2', -pady => '2');
 	        $db->pack(-side => 'left', -expand => 1, -padx => 1, -pady => 1);
             }
-	    $cw->bind('<Return>' => [ $b, 'Invoke']);
 	    $cw->{'default_button'} = $b;
 	} else {
 	    $b->pack(-side => 'left', -expand => 1,  -padx => 1, -pady => 1);
@@ -86,13 +90,16 @@ sub Wait
 }
 
 sub Show {
-    my ($cw, $grab) = @_;
+
     croak 'DialogBox: "Show" method requires at least 1 argument'
 	if scalar @_ < 1;
+    my $cw = shift;
+    my ($grab) = @_;
     my $old_focus = $cw->focusSave;
     my $old_grab = $cw->grabSave;
 
-    $cw->Popup();
+    shift if defined $grab && length $grab && ($grab =~ /global/);
+    $cw->Popup(@_);
 
     Tk::catch {
     if (defined $grab && length $grab && ($grab =~ /global/)) {
gdiff -up '/usr/local/src/Tk800.024/Tixish/DirTree.pm' '/usr/local/src/work/Tk800/Tixish/DirTree.pm'
Index: ./Tixish/DirTree.pm
--- ./Tixish/DirTree.pm	Fri Apr 21 11:56:19 2000
+++ ./Tixish/DirTree.pm	Fri Apr 25 16:06:15 2003
@@ -96,6 +96,7 @@ sub chdir {
         next unless length $name;
         push @dirs, $name;
         my $dir = join( '/', @dirs );
+	$dir =~ s|^//|/|;
         $w->add_to_tree( $dir, $name, $parent )
             unless $w->infoExists( $dir );
         $parent = $dir;
gdiff -up '/usr/local/src/Tk800.024/Tixish/LabFrame.pm' '/usr/local/src/work/Tk800/Tixish/LabFrame.pm'
Index: ./Tixish/LabFrame.pm
--- ./Tixish/LabFrame.pm	Thu Apr 27 16:41:04 2000
+++ ./Tixish/LabFrame.pm	Mon Apr 21 17:53:09 2003
@@ -8,52 +8,128 @@ use vars qw($VERSION);
 $VERSION = '3.021'; # $Id: //depot/Tk8/Tixish/LabFrame.pm#21 $
 
 use Tk;
-require Tk::Frame;
-
-use strict;
 use base qw(Tk::Frame);
-Construct Tk::Widget 'LabFrame';
-
+Tk::Widget->Construct('LabFrame');
 
 sub Populate {
     my ($cw, $args) = @_;
-    my $f;
-    my $label;
-    my $lside = exists $args->{-labelside} ?
-	delete $args->{-labelside} : 'top';
-    my $ltext = delete $args->{-label};
+
+    $cw->{m_geoMgr} = "";
+
+    my $border = $cw->Component(
+    Frame => 'border',
+        -relief => 'groove', 
+        -bd => 2, 
+    );
+
+    my $pad = $border->Frame;
+    $cw->Advertise(pad => $pad);
+
+    my $frame = $border->Frame;
+    $cw->Advertise(frame => $frame);
+
+    my $label = $cw->Component(Label => 'label');
+
     $cw->SUPER::Populate($args);
 
-    if ($lside =~ /acrosstop/) {
-	my $border = $cw->Frame(-relief => 'groove', -bd => 2);
-        $cw->Advertise('border' => $border);
-	my $pad = $border->Frame;
-	$f = $border->Frame;
-	$label = $cw->Label(-text => $ltext);
-	my $y = int($label->winfo('reqheight')) / 2;
-	my $ph = $y - int($border->cget(-bd));
-	if ($ph < 0) {
-	    $ph = 0;
-	}
-	$label->form(-top => 0, -left => 4, -padx => 6, -pady => 2);
-        # $label->place('-y' => 2, '-x' => 10);
-	$border->form(-top => $y, -bottom => -1, -left => 0, -right => -1, -padx => 2, -pady => 2);
-	$pad->form(-left => 0, -right => -1, -top => 0, -bottom => $ph);
-	$f->form(-top => $pad, -bottom => -1, -left => 0, -right => -1);
-	# $cw->Delegates('pack' => $cw);
-    } else {
-	$f = $cw->Frame(-relief => 'groove', -bd => 2, %{$args});
-	$label = $cw->Label(-text => $ltext);
-	$label->pack(-side => $lside);
-	$f->pack(-side => $lside, -fill => 'both', -expand => 1);
+    $cw->Delegates(DEFAULT => $frame);
+    $cw->ConfigSpecs(
+        -background    => [[qw/SELF ADVERTISED/],
+                            qw/background Background/],
+        -borderwidth   => [$border, qw/borderWidth Border 2/],
+        -font          => [$label, qw/font Font/],
+        -foreground    => [$label, qw/foreground Foreground black/],
+        -label         => [{-text => $label}, qw/label Label/],
+        -labelside     => [qw/METHOD labelSide LabelSide acrosstop/],
+        -labelvariable => [{-textvariable => $label}],
+        -relief        => [$border, qw/relief Relief groove/],
+        DEFAULT        => [$frame]
+    );
+    return $cw;
+}
+
+use Tk::Submethods(
+    form  => [qw/check forget grid info slaves/],
+    grid  => [qw/bbox columnconfigure configure forget info location
+                 propagate rowconfigure remove size slaves/],
+    pack  => [qw/forget info propagate slaves/],
+    place => [qw/forget info slaves/]
+);
+
+sub labelside {
+    my ($cw, $side) = @_; 
+    return $cw->{Configure}{-labelside} unless $side;
+   
+    my $border = $cw->Subwidget('border');
+    my $pad = $cw->Subwidget('pad');
+    my $frame = $cw->Subwidget('frame');
+    my $label = $cw->Subwidget('label');
+
+    ## packForget/formForget as appropriate
+    foreach ($border, $label, $pad, $frame) {
+        $_->formForget if $cw->{m_geoMgr} eq "form";
+        $_->packForget if ($cw->{m_geoMgr} eq "pack" && $_->ismapped);
     }
-    $cw->Advertise('frame' => $f);
-    $cw->Advertise('label' => $label);
-    $cw->Delegates(DEFAULT => $f);
-    $cw->ConfigSpecs(-labelside => ['PASSIVE', 'labelSide', 'LabelSide', 'acrosstop'],
-		     'DEFAULT' => [$f]);
+ 
+    if ($side eq "acrosstop") {
+
+        my $y = $label->reqheight / 2;
+        my $ph = $y - ($border->cget(-bd));
+        $ph = 0 if $ph < 0;
+
+        $label->form(qw/-top 0 -left 4 -padx 6 -pady 2/);
+        $border->form(-top => $y, 
+            qw/-bottom -1 -left 0 -right -1 -padx 2 -pady 2/);
+        $pad->form(-bottom => $ph,
+            qw/-top 0 -left 0 -right -1/);
+        $frame->form(-top => $pad,
+            qw/-bottom -1 -left 0 -right -1 -fill both/);
+        $cw->{m_geoMgr} = "form";
+   
+    } else {
+
+        $label->pack(-side => $side);
+        $frame->pack(-expand => 1, -fill => 'both');
+        $border->pack(-side => $side, -expand => 1, fill => 'both');
+        $cw->{m_geoMgr} = "pack";
+    }       
+}
+     
+sub form {
+    my $cw = shift;
+    $cw = $cw->Subwidget('frame') 
+        if (@_ && $_[0] =~ /^(?:slaves)$/);
+    $cw->SUPER::form(@_);
+}
+
+sub grid {
+    my $cw = shift;
+    $cw = $cw->Subwidget('frame') if (@_ && $_[0] =~ 
+        /^(?:bbox
+            |columnconfigure
+            |location
+            |propagate
+            |rowconfigure
+            |size
+            |slaves)
+        $/x);
+    $cw->SUPER::grid(@_);
+}
+
+
+sub pack {
+    my $cw = shift;
+    $cw = $cw->Subwidget('frame')
+        if (@_ && $_[0] =~ /^(?:propagate|slaves)$/);
+    $cw->SUPER::pack(@_);
+}
+
+sub place {
+    my $cw = shift;
+    $cw = $cw->Subwidget('frame') 
+        if (@_ && $_[0] =~ /^(?:slaves)$/);
+    $cw->SUPER::place(@_);
 }
 
 1;
 
-__END__
gdiff -up '/usr/local/src/Tk800.024/Tixish/NoteBook.pm' '/usr/local/src/work/Tk800/Tixish/NoteBook.pm'
Index: ./Tixish/NoteBook.pm
--- ./Tixish/NoteBook.pm	Sun Apr 23 14:19:10 2000
+++ ./Tixish/NoteBook.pm	Thu May  1 16:19:26 2003
@@ -50,11 +50,12 @@ sub Populate
  my ($w, $args) = @_;
 
  $w->SUPER::Populate($args);
- $w->{'pad-x1'} = 0;
- $w->{'pad-x2'} = 0;
- $w->{'pad-y1'} = 0;
- $w->{'pad-y2'} = 0;
+ $w->{'pad-x1'} = undef;
+ $w->{'pad-x2'} = undef;
+ $w->{'pad-y1'} = undef;
+ $w->{'pad-y2'} = undef;
 
+ $w->{'windows'} = [];
  $w->{'nWindows'} = 0;
  $w->{'minH'} = 1;
  $w->{'minW'} = 1;
@@ -127,7 +128,7 @@ sub add
  $w->ManageGeometry($f);
  # create default bindings
  $f->bind('<Configure>',[$w,'ClientGeomProc','-configure', $f]);
- $f->bind('<Destroy>',  [$w,'delete',$child,1]);
+ $f->bind('<Destroy>',  [$w,'delete',$child,1]); 
  $w->page_widget($child,$f);
  $w->{'nWindows'}++;
  push(@{$w->{'windows'}}, $child);
@@ -161,6 +162,10 @@ sub raise
      my $myW = $w->Width;
      my $myH = $w->Height;
 
+     if (!defined $w->{'pad-x1'}) {
+	 $w->InitTabSize;
+     }
+
      my $cW = $myW - $w->{'pad-x1'} - $w->{'pad-x2'} - 2 * (defined $w->{-ipadx} ? $w->{-ipadx} : 0);
      my $cH = $myH - $w->{'pad-y1'} - $w->{'pad-y2'} - 2 * (defined $w->{-ipady} ? $w->{-ipady} : 0);
      my $cX = $w->{'pad-x1'} + (defined $w->{-ipadx} ? $w->{-ipadx} : 0);
@@ -259,8 +264,8 @@ sub MouseDown {
 sub MouseUp {
     my ($w, $x, $y) = @_;
     my $name = $w->identify($x, $y);
-    if ((defined $name) &&
-        ($name eq $w->{'down'}) &&
+    if ((defined $name) && (defined $w->{'down'}) &&
+	($name eq $w->{'down'}) &&
         ($w->pagecget($name, -state) eq 'normal')) {
         $w->raise($name);
     } else {
@@ -378,13 +383,7 @@ sub Resize {
 
     return unless Tk::Exists($w) && $w->{'nWindows'} && $w->{'resize'};
 
-    my ($tW, $tH) = $w->geometryinfo;
-    $w->{'pad-x1'} = 2;
-    $w->{'pad-x2'} = 2;
-    $w->{'pad-y1'} = $tH + (defined $w->{'-ipadx'} ? $w->{'-ipadx'} : 0) + 1;
-    $w->{'pad-y2'} = 2;
-    $w->{'minW'} = $tW;
-    $w->{'minH'} = $tH;
+    $w->InitTabSize;
 
     $w->{'resize'} = 0;
     my $reqW = $w->{-width} || 0;
@@ -434,6 +433,17 @@ sub Resize {
     $w->{'counter'} = 0;
     $w->raise($w->{'topchild'} || ${$w->{'windows'}}[0]);
     $w->{'resize'} = 0;
+}
+
+sub InitTabSize {
+    my ($w) = @_;
+    my ($tW, $tH) = $w->geometryinfo;
+    $w->{'pad-x1'} = 2;
+    $w->{'pad-x2'} = 2;
+    $w->{'pad-y1'} = $tH + (defined $w->{'-ipadx'} ? $w->{'-ipadx'} : 0) + 1;
+    $w->{'pad-y2'} = 2;
+    $w->{'minW'} = $tW;
+    $w->{'minH'} = $tH;
 }
 
 1;
gdiff -up '/usr/local/src/Tk800.024/Tixish/Tree.pm' '/usr/local/src/work/Tk800/Tixish/Tree.pm'
Index: ./Tixish/Tree.pm
--- ./Tixish/Tree.pm	Thu Dec 30 19:47:21 1999
+++ ./Tixish/Tree.pm	Thu May 22 21:42:55 2003
@@ -33,6 +33,7 @@ sub Populate
         -indent       => ['SELF', 'indent', 'Indent', 20],
         -width        => ['SELF', 'width', 'Width', 20],
         -itemtype     => ['SELF', 'itemtype', 'Itemtype', 'imagetext'],
+	-foreground   => ['SELF'],
        );
 }
 
gdiff -up '/usr/local/src/Tk800.024/Tk.pm' '/usr/local/src/work/Tk800/Tk.pm'
Index: ./Tk.pm
Prereq:  1.6 
--- ./Tk.pm	Tue Mar  5 14:55:48 2002
+++ ./Tk.pm	Sat Jun  7 21:18:44 2003
@@ -53,7 +53,7 @@ use Carp;
 # is created, $VERSION is checked by bootstrap
 $Tk::version     = '8.0';
 $Tk::patchLevel  = '8.0';
-$Tk::VERSION     = '800.024';
+$Tk::VERSION     = '800.024012'; # PATCHED!
 $Tk::XS_VERSION  = $Tk::VERSION;
 $Tk::strictMotif = 0;
 
@@ -136,18 +136,15 @@ sub NoOp  { }
 
 sub Ev
 {
- my @args = @_;
- my $obj;
- if (@args == 1)
+ if (@_ == 1)
   {
-   my $arg = pop(@args);
-   $obj = (ref $arg) ? $arg : \$arg;
+   my $arg = $_[0];
+   return bless (((ref $arg) ? $arg : \$arg), 'Tk::Ev');
   }
  else
   {
-   $obj = \@args;
+   return bless [@_],'Tk::Ev';
   }
- return bless $obj,'Tk::Ev';
 }
 
 sub InitClass
@@ -247,7 +244,7 @@ sub MessageBox {
                       split(/(abort|retry|ignore|yes|no|cancel|ok)/,
                             lc($type))));
 	$args->{-buttons} = [@buttons];
-	$args->{-default_button} = delete $args->{-default} if
+	$args->{-default_button} = ucfirst(delete $args->{-default}) if
 	    defined $args->{-default};
 	if (not defined $args->{-default_button} and scalar(@buttons) == 1) {
 	   $args->{-default_button} = $buttons[0];
@@ -262,8 +259,18 @@ sub MessageBox {
 sub messageBox
 {
  my ($widget,%args) = @_;
- $args{'-type'} = (exists $args{'-type'}) ? lc($args{'-type'}) : 'ok';
- tk_messageBox(-parent => $widget, %args);
+ # remove in a later version:
+ if (exists $args{'-text'})
+  {
+   warn "The -text option is deprecated. Please use -message instead";
+   if (!exists $args{'-message'})
+    {
+     $args{'-message'} = delete $args{'-text'};
+    }
+  }
+ $args{'-type'}    = (exists $args{'-type'})    ? lc($args{'-type'}) : 'ok';
+ $args{'-default'} = lc($args{'-default'}) if (exists $args{'-default'});
+ ucfirst tk_messageBox(-parent => $widget, %args);
 }
 
 sub getOpenFile
@@ -358,7 +365,7 @@ sub TranslateFileName
  local $_ = shift;
  unless (defined $Home)
   {
-   $Home = $ENV{'HOME'} || ($ENV{'HOMEDRIVE'}.$ENV{'HOMEPATH'});
+   $Home = $ENV{'HOME'} || (defined $ENV{'HOMEDRIVE'} && defined $ENV{'HOMEPATH'} ? $ENV{'HOMEDRIVE'}.$ENV{'HOMEPATH'} : "");
    $Home =~ s#\\#/#g;
    $Home .= '/' unless $Home =~ m#/$#;
   }
gdiff -up '/usr/local/src/Tk800.024/Tk.xs' '/usr/local/src/work/Tk800/Tk.xs'
Index: ./Tk.xs
--- ./Tk.xs	Wed Mar 22 13:29:59 2000
+++ ./Tk.xs	Mon Apr 21 17:53:24 2003
@@ -428,6 +428,29 @@ int	width;
 int	height;
 SV *	source;
 
+void
+pTk_GetBitmap(tkwin, name)
+Tk_Window	tkwin;
+char *	name;
+PPCODE:
+ {
+  Tcl_Interp *interp;
+  Pixmap pixmap;
+  if (TkToWidget(tkwin,&interp) && interp)
+   {
+    pixmap = Tk_GetBitmap(interp, tkwin, name);
+    if (pixmap == None)
+     PUSHs(&PL_sv_undef);
+    else
+     PUSHs(sv_2mortal(newSViv((IV)pixmap)));
+   }
+  else
+   {
+    croak("Invalid widget");
+   }
+ }
+
+
 MODULE = Tk	PACKAGE = Tk::Widget	PREFIX = Tk_
 
 void
gdiff -up '/usr/local/src/Tk800.024/Tk/Adjuster.pm' '/usr/local/src/work/Tk800/Tk/Adjuster.pm'
Index: ./Tk/Adjuster.pm
--- ./Tk/Adjuster.pm	Thu Dec 30 19:47:21 1999
+++ ./Tk/Adjuster.pm	Mon Apr 21 17:52:59 2003
@@ -89,6 +89,7 @@ sub packed
 {
  my ($w,$s,%args) = @_;
  delete $args{'-before'};
+ delete $args{'-in'};
  $args{'-expand'} = 0;
  $args{'-after'} = $s;
  $args{'-fill'} = (($w->vert) ? 'y' : 'x');
gdiff -up '/usr/local/src/Tk800.024/Tk/After.pm' '/usr/local/src/work/Tk800/Tk/After.pm'
Index: ./Tk/After.pm
--- ./Tk/After.pm	Sun Dec 19 16:49:44 1999
+++ ./Tk/After.pm	Fri Apr 25 15:26:21 2003
@@ -83,6 +83,16 @@ sub once
  $obj->[4]->Call;
 }
 
+sub time {
+    my $obj = shift;
+    my $delay = shift;
+    if (defined $delay) {
+	$obj->cancel if $delay == 0;
+	$obj->[2] = $delay;
+    }
+    $obj->[2];
+}
+
 1;
 __END__
 
gdiff -up '/usr/local/src/Tk800.024/Tk/ColorEditor.pm' '/usr/local/src/work/Tk800/Tk/ColorEditor.pm'
Index: ./Tk/ColorEditor.pm
--- ./Tk/ColorEditor.pm	Sun Mar 26 13:20:19 2000
+++ ./Tk/ColorEditor.pm	Fri Apr 25 15:39:00 2003
@@ -658,6 +658,7 @@ sub Populate
             sub {
                 my ($objref) = @_;
                 $objref->Callback(-command => ($objref->{'highlight'}, $objref->cget('-color')));
+		$cw->{'done'} = 1;
             }, $cw,
         ],
     );
@@ -711,9 +712,9 @@ sub Populate
 
 sub Show {
 
-    my($objref) = @_;
+    my($objref, @args) = @_;
 
-    $objref->deiconify;
+    Tk::ColorDialog::Show(@_);
 
 } # end show
 
gdiff -up '/usr/local/src/Tk800.024/Tk/ErrorDialog.pm' '/usr/local/src/work/Tk800/Tk/ErrorDialog.pm'
Index: ./Tk/ErrorDialog.pm
--- ./Tk/ErrorDialog.pm	Sat Oct  2 18:44:27 1999
+++ ./Tk/ErrorDialog.pm	Fri Apr 25 15:31:03 2003
@@ -3,54 +3,16 @@ package Tk::ErrorDialog;
 use vars qw($VERSION);
 $VERSION = '3.009'; # $Id: //depot/Tk8/Tk/ErrorDialog.pm#9 $
 
-use English;
 use Tk ();
 require Tk::Dialog;
 use base qw(Tk::Toplevel);
 
 
-# ErrorDialog - a translation of `tkerror' from Tcl/Tk to TkPerl.
+# ErrorDialog - a translation of bgerror() from Tcl/Tk to Perl/Tk.
 #
 # Currently TkPerl background errors are sent to stdout/stderr; use this
 # module if you want them in a window.  You can also "roll your own" by
 # supplying the routine Tk::Error.
-#
-# Stephen O. Lidie, Lehigh University Computing Center.  95/03/02
-# lusol@Lehigh.EDU
-#
-# This is an OO implementation of `tkerror', with a twist:  since there is
-# only one ErrorDialog object, you aren't required to invoke the constructor
-# to create it; it will be created automatically when the first background
-# error occurs.  However, in order to configure the ErrorDialog object you
-# must call the constructor and create it manually.
-#
-# The ErrorDialog object essentially consists of two subwidgets: an
-# ErrorDialog widget to display the background error and a Text widget for the
-# traceback information.  If required, you can invoke the configure() method
-# to change some characteristics of these subwidgets.
-#
-# Because an ErrorDialog object is a Frame widget all the composite base
-# class methods are available to you.
-#
-# Advertised widgets:  error_dialog, text.
-#
-# 1) Call the constructor to create the ErrorDialog object, which in turn
-#    returns a blessed reference to the new object:
-#
-#    require Tk::ErrorDialog;
-#
-#    $ED = $mw->ErrorDialog(
-#        -cleanupcode     => $code,
-#        -appendtraceback => $bool,
-#    );
-#
-#       mw -   a window reference, usually the result of a MainWindow->new
-#              call.
-#       code - a CODE reference if special post-background error processing
-#              is required (default is undefined).
-#       bool - a boolean indicating whether or not to append successive
-#              tracebacks (default is 1, do append).
-#
 
 use strict;
 
@@ -119,10 +81,10 @@ sub Populate {
     $cw->ConfigSpecs(-cleanupcode => [PASSIVE => undef, undef, undef],
                      -appendtraceback => [ PASSIVE => undef, undef, 1 ]);
     $ED_OBJECT = $cw;
+    $cw->protocol('WM_DELETE_WINDOW' => sub {$cw->withdraw});
     return $cw;
 
-} # end new, ErrorDialog constructor
-
+} # end Populate
 
 sub Tk::Error {
 
@@ -159,6 +121,5 @@ sub Tk::Error {
     $w->break if ($ans =~ /skip/i);
 
 } # end Tk::Error
-
 
 1;
gdiff -up '/usr/local/src/Tk800.024/Tk/FBox.pm' '/usr/local/src/work/Tk800/Tk/FBox.pm'
Index: ./Tk/FBox.pm
--- ./Tk/FBox.pm	Fri Feb 22 14:47:26 2002
+++ ./Tk/FBox.pm	Sat Jun 21 22:33:21 2003
@@ -45,10 +45,6 @@ use base qw(Tk::Toplevel);
 
 Construct Tk::Widget 'FBox';
 
-my $selectFilePath;
-my $selectFile;
-my $selectPath;
-
 sub import {
     if (defined $_[1] and $_[1] eq 'as_default') {
 	local $^W = 0;
@@ -58,6 +54,12 @@ sub import {
     }
 }
 
+# Note that -sortcmd is experimental and the interface is likely to change.
+# Using -sortcmd is really strange :-(
+# $top->getOpenFile(-sortcmd => sub { package Tk::FBox; uc $b cmp uc $a});
+# or, un-perlish, but useable (now activated in code):
+# $top->getOpenFile(-sortcmd => sub { uc $_[1] cmp uc $_[0]});
+
 sub Populate {
     my($w, $args) = @_;
 
@@ -75,10 +77,10 @@ sub Populate {
 		      -textvariable => \$w->{'selectPath'},
 		      -command => ['SetPath', $w]);
     my $upBtn = $f1->Button;
-    if (!defined $updirImage) {
-	$updirImage = $w->Bitmap(-data => "#define updir_width 28\n" .
-	                                  "#define updir_height 16\n" .
-				          <<EOF);
+    if (!defined $updirImage->{$w->MainWindow}) {
+        $updirImage->{$w->MainWindow} = $w->Bitmap(-data => <<EOF);
+#define updir_width 28
+#define updir_height 16
 static char updir_bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00,
    0x20, 0x40, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x01, 0x10, 0x00, 0x00, 0x01,
@@ -88,7 +90,7 @@ static char updir_bits[] = {
    0xf0, 0xff, 0xff, 0x01};
 EOF
     }
-    $upBtn->configure(-image => $updirImage);
+    $upBtn->configure(-image => $updirImage->{$w->MainWindow});
     $dirMenu->configure(-takefocus => 1, -highlightthickness => 2);
     $upBtn->pack(-side => 'right', -padx => 4, -fill => 'both');
     $lab->pack(-side => 'left', -padx => 4, -fill => 'both');
@@ -128,6 +130,7 @@ EOF
        -relief => $f2_lab->cget(-relief),
        -padx => $f2_lab->cget(-padx),
        -pady => $f2_lab->cget(-pady),
+       -takefocus => 0,
       );
     $typeMenuLab->bindtags([$typeMenuLab, 'Label',
 			    $typeMenuLab->toplevel, 'all']);
@@ -198,21 +201,23 @@ EOF
     $w->SetPath(_cwd());
 
     $w->ConfigSpecs(-defaultextension => ['PASSIVE', undef, undef, undef],
-		    -filetypes        => ['PASSIVE', undef, undef, undef],
-		    -initialdir       => ['PASSIVE', undef, undef, undef],
-		    -initialfile      => ['PASSIVE', undef, undef, undef],
-		    -title            => ['PASSIVE', undef, undef, undef],
-		    -type             => ['PASSIVE', undef, undef, 'open'],
-		    -filter           => ['PASSIVE', undef, undef, '*'],
-		    -force            => ['PASSIVE', undef, undef, 0],
-		    'DEFAULT'         => [$icons],
-		   );
+                    -filetypes        => ['PASSIVE', undef, undef, undef],
+                    -initialdir       => ['PASSIVE', undef, undef, undef],
+                    -initialfile      => ['PASSIVE', undef, undef, undef],
+#		    -sortcmd          => ['PASSIVE', undef, undef, sub { lc($a) cmp lc($b) }],
+		    -sortcmd          => ['PASSIVE', undef, undef, sub { lc($_[0]) cmp lc($_[1]) }],
+                    -title            => ['PASSIVE', undef, undef, undef],
+                    -type             => ['PASSIVE', undef, undef, 'open'],
+                    -filter           => ['PASSIVE', undef, undef, '*'],
+                    -force            => ['PASSIVE', undef, undef, 0],
+                    'DEFAULT'         => [$icons],
+                   );
     # So-far-failed attempt to break reference loops ...
     $w->_OnDestroy(qw(dirMenu icons typeMenuLab typeMenuBtn okBtn ent updateId));
     $w;
 }
 
-
+# -initialdir fix with ResolveFile
 sub Show {
     my $w = shift;
 
@@ -225,8 +230,9 @@ sub Show {
     {
 	my $initialdir = $w->cget(-initialdir);
 	if (defined $initialdir) {
-	    if (-d $initialdir) {
-		$w->{'selectPath'} = $initialdir;
+	    my ($flag, $path, $file) = ResolveFile($initialdir, 'junk');
+	    if ($flag eq 'OK' or $flag eq 'FILE') {
+		$w->{'selectPath'} = $path;
 	    } else {
 		$w->Error("\"$initialdir\" is not a valid directory");
 	    }
@@ -253,7 +259,7 @@ sub Show {
 	$typeMenuBtn->configure(-state => 'normal');
 	$typeMenuLab->configure(-state => 'normal');
     } else {
-	$w->configure(-filter => '*');
+#XXX	$w->configure(-filter => '*');
 	$typeMenuBtn->configure(-state => 'disabled',
 				-takefocus => 0);
 	$typeMenuLab->configure(-state => 'disabled');
@@ -286,17 +292,19 @@ sub Show {
     my $ent = $w->{'ent'};
     $ent->focus;
     $ent->delete(0, 'end');
-    $ent->insert(0, $w->{'selectFile'});
-    $ent->selectionFrom(0);
-    $ent->selectionTo('end');
-    $ent->icursor('end');
+    if (defined $w->{'selectFile'} && $w->{'selectFile'} ne '') {
+	$ent->insert(0, $w->{'selectFile'});
+	$ent->selectionFrom(0);
+	$ent->selectionTo('end');
+	$ent->icursor('end');
+    }
 
     # 8. Wait for the user to respond, then restore the focus and
     # return the index of the selected button.  Restore the focus
     # before deleting the window, since otherwise the window manager
     # may take the focus away so we can't redirect it.  Finally,
     # restore any grab that was in effect.
-    $w->waitVariable(\$selectFilePath);
+    $w->waitVariable(\$w->{'selectFilePath'});
     eval {
 	$oldFocus->focus if $oldFocus;
     };
@@ -304,14 +312,14 @@ sub Show {
 	$w->grabRelease;
 	$w->withdraw;
     }
-    if ($oldGrab) {
+    if (Tk::Exists($oldGrab) && $oldGrab->viewable) {
 	if ($grabStatus eq 'global') {
 	    $oldGrab->grabGlobal;
 	} else {
 	    $oldGrab->grab;
 	}
     }
-    return $selectFilePath;
+    return $w->{'selectFilePath'};
 }
 
 # tkFDialog_UpdateWhenIdle --
@@ -347,13 +355,13 @@ sub Update {
     } else {
 	delete $w->{'updateId'};
     }
-    unless (defined $folderImage) {
+    unless (defined $folderImage->{$w->MainWindow}) {
 	require Tk::Pixmap;
-	$folderImage = $w->Pixmap(-file => Tk->findINC('folder.xpm'));
-	$fileImage   = $w->Pixmap(-file => Tk->findINC('file.xpm'));
+	$folderImage->{$w->MainWindow} = $w->Pixmap(-file => Tk->findINC('folder.xpm'));
+	$fileImage->{$w->MainWindow}   = $w->Pixmap(-file => Tk->findINC('file.xpm'));
     }
-    my $folder = $folderImage;
-    my $file   = $fileImage;
+    my $folder = $folderImage->{$w->MainWindow};
+    my $file   = $fileImage->{$w->MainWindow};
     my $appPWD = _cwd();
     if (!ext_chdir($w->{'selectPath'})) {
 	# We cannot change directory to $data(selectPath). $data(selectPath)
@@ -381,19 +389,36 @@ sub Update {
     $icons->DeleteAll;
 
     # Make the dir & file list
-    my $flt = join('|', split(' ', $w->cget(-filter)) );
-    $flt =~ s!([\.\+])!\\$1!g;
-    $flt =~ s!\*!.*!g;
+    my $cwd = _cwd();
     local *FDIR;
-    if( opendir( FDIR,  _cwd() )) {
-      my @files;
-        foreach my $f (sort { lc($a) cmp lc($b) } readdir FDIR) {
-          next if $f eq '.' or $f eq '..';
-          if (-d $f) { $icons->Add($folder, $f); }
-          elsif( $f =~ m!$flt$! ) { push( @files, $f ); }
+    if (opendir(FDIR, $cwd)) {
+        my @files;
+#	my $sortcmd = $w->cget(-sortcmd);
+	my $sortcmd = sub { $w->cget(-sortcmd)->($a,$b) };
+	my $flt = $w->cget(-filter);
+	my $fltcb;
+	if (ref $flt eq 'CODE') {
+	    $fltcb = $flt;
+	} else {
+	    $flt = _rx_to_glob($flt);
+	}
+        foreach my $f (sort $sortcmd readdir(FDIR)) {
+            next if $f eq '.' or $f eq '..';
+	    if ($fltcb) {
+		next if !$fltcb->($w, $f, $cwd);
+	    } else {
+		next if -f $f && $f !~ m!$flt!;
+	    }
+            if (-d $f) {
+		$icons->Add($folder, $f);
+	    } else {
+		push @files, $f;
+	    }
+	}
+	closedir(FDIR);
+	foreach my $f (@files) {
+	    $icons->Add($file, $f);
 	}
-      closedir( FDIR );
-      foreach my $f ( @files ) { $icons->Add($file, $f); }
     }
 
     $icons->Arrange;
@@ -709,7 +734,8 @@ sub OkCmd {
 # Gets called when user presses the "Cancel" button
 #
 sub CancelCmd {
-    undef $selectFilePath;
+    my $w = shift;
+    undef $w->{'selectFilePath'};
 }
 
 # Gets called when user browses the IconList widget (dragging mouse, arrow
@@ -752,8 +778,15 @@ sub ListInvoke {
 	    $w->SetPath($file);
 	}
     } else {
-	$w->{'selectFile'} = $file;
-	$w->Done;
+        my($flag, $path, $file) = ResolveFile($w->{'selectPath'}, $text);
+        if ($flag ne 'OK') {
+            $w->messageBox(-type => 'OK',
+                           -message => "Cannot resolve $w->{'selectPath'}/$text.",
+                           -icon => 'error');
+        } else {
+            $path = JoinFile($path, $file);
+            $w->Done($path);
+        }
     }
 }
 
@@ -780,7 +813,7 @@ sub Done {
 	    return unless (lc($reply) eq 'yes');
 	}
     }
-    $selectFilePath = ($_selectFilePath ne '' ? $_selectFilePath : undef);
+    $w->{'selectFilePath'} = ($_selectFilePath ne '' ? $_selectFilePath : undef);
 }
 
 sub FDialog {
@@ -885,6 +918,18 @@ sub _untaint {
     my $s = shift;
     $s =~ /^(.*)$/;
     $1;
+}
+
+sub _rx_to_glob {
+    my $arg = shift;
+    $arg = join('|', split(' ', $arg));
+    $arg =~ s!([\.\+])!\\$1!g;
+    $arg =~ s!\*!.*!g;
+    $arg = "^" . $arg . "\$";
+    if ($] >= 5.005) {
+	$arg = qr($arg);
+    }
+    $arg;
 }
 
 1;
gdiff -up '/usr/local/src/Tk800.024/Tk/FileSelect.pm' '/usr/local/src/work/Tk800/Tk/FileSelect.pm'
Index: ./Tk/FileSelect.pm
--- ./Tk/FileSelect.pm	Sat May 13 11:22:29 2000
+++ ./Tk/FileSelect.pm	Fri Apr 25 15:11:46 2003
@@ -177,6 +177,7 @@ sub Populate {
     );
     $e->pack(-side => 'bottom', -expand => 0, -fill => 'x');
     $e->bind('<Return>' => [$w => 'validateFile', Ev(['get'])]);
+    $e->bind('<FocusIn>' => [$w => 'SelectionClear']);
 
     # Create directory scrollbox, place at the left-middle.
     my $b = $w->Component(
@@ -337,13 +338,30 @@ sub directory
     {
      if (substr($dir,1,1) eq '/')
       {
-       $dir = $ENV{'HOME'} . substr($dir,1);
+       $dir = (defined $ENV{'HOME'} ? $ENV{'HOME'} : '') . substr($dir,1);
       }
      else
       {my ($uid,$rest) = ($dir =~ m#^~([^/]+)(/.*$)#);
        $dir = (getpwnam($uid))[7] . $rest;
       }
     }
+   my $revert_dir = sub
+    {
+     my $message = shift;
+     $$var = $cw->{OldDirectory};
+     $cw->messageBox(-message => $message, -icon => 'error');
+     if (!defined $$var)
+      {
+       # OldDirectory was never set, so force reread...
+       $$var = $cw->{OldDirectory} = Cwd::getcwd(); # XXX maybe use check like code below...
+       unless ($cw->{'reread'}++)
+        {
+         $cw->Busy;
+         $cw->afterIdle(['reread',$cw])
+        }
+      }
+     $$var;
+    };
    $dir =~ s#([^/\\])[\\/]+$#$1#;
    if (-d $dir)
     {
@@ -359,17 +377,20 @@ sub directory
           }
          else
           {
-           carp "Cannot getcwd in '$dir'";
+	   return $revert_dir->("Cannot getcwd in '$dir'");
+          }
+         if (!chdir($pwd))
+          {
+	   return $revert_dir->("Cannot change directory to $pwd:\n$!");
           }
-         chdir($pwd) || carp "Cannot chdir($pwd) : $!";
-         $cw->{Configure}{'-directory'} = $dir;
+	 $$var = $dir;
         }
        else
         {
-         $cw->BackTrace("Cannot chdir($dir) :$!");
+	 return $revert_dir->("Cannot change directory to $dir:\n$!");
         }
+       $$var = $cw->{OldDirectory} = $dir;
       }
-     $$var = $dir;
      unless ($cw->{'reread'}++)
       {
        $cw->Busy;
@@ -431,10 +452,10 @@ sub reread
        $w->configure(-initialfile => undef) unless $w->cget('-create');
       }
     }
-   $w->{DirectoryString} = $dir . '/' . $w->cget('-filter');
+   $w->{DirectoryString} = $dir . ($dir ne '/' ? '/' : '') . $w->cget('-filter');
   }
  $w->{'reread'} = 0;
- $w->Unbusy;
+ $w->Unbusy if $w->{'Busy'};
 }
 
 sub validateDir
gdiff -up '/usr/local/src/Tk800.024/Tk/IconList.pm' '/usr/local/src/work/Tk800/Tk/IconList.pm'
Index: ./Tk/IconList.pm
--- ./Tk/IconList.pm	Sat Oct  2 18:44:27 1999
+++ ./Tk/IconList.pm	Sat Jun 21 22:26:42 2003
@@ -36,6 +36,7 @@
 
 package Tk::IconList;
 require Tk::Frame;
+use Tk qw(Ev);
 use strict;
 
 use vars qw($VERSION);
@@ -60,11 +61,13 @@ sub Populate {
 			     -highlightthickness => 0,
 			     -takefocus => 0,
 			    );
+    # make sure that the size does not exceed handhelds' dimensions
+    my($sw,$sh) = ($w->screenwidth, $w->screenheight);
     my $canvas = $w->Component('Canvas' => 'canvas',
 			       -bd => 2,
 			       -relief => 'sunken',
-			       -width => 400,
-			       -height => 120,
+			       -width  => ($sw > 420 ? 400 : $sw-20),
+			       -height => ($sh > 160 ? 120 : $sh-40),
 			       -takefocus => 1,
 			      );
     $sbar->pack(-side => 'bottom', -fill => 'x', -padx => 2);
@@ -83,52 +86,30 @@ sub Populate {
 
     # Creates the event bindings.
     $canvas->Tk::bind('<Configure>', sub { $w->Arrange } );
-    $canvas->Tk::bind('<1>',
-		      sub {
-			  my $c = shift;
-			  my $Ev = $c->XEvent;
-			  $w->Btn1($Ev->x, $Ev->y);
-		      }
-		     );
-    $canvas->Tk::bind('<B1-Motion>',
-		      sub {
-			  my $c = shift;
-			  my $Ev = $c->XEvent;
-			  $w->Motion1($Ev->x, $Ev->y);
-		      }
-		     );
-    $canvas->Tk::bind('<Double-ButtonRelease-1>',
-		      sub {
-			  my $c = shift;
-			  my $Ev = $c->XEvent;
-			  $w->Double1($Ev->x,$Ev->y);
-		      }
-		     );
-    $canvas->Tk::bind('<ButtonRelease-1>', sub { $w->CancelRepeat });
-    $canvas->Tk::bind('<B1-Leave>',
-		      sub {
-			  my $c = shift;
-			  my $Ev = $c->XEvent;
-			  $w->Leave1($Ev->x, $Ev->y);
-		      }
-		     );
-    $canvas->Tk::bind('<B1-Enter>', sub { $w->CancelRepeat });
-    $canvas->Tk::bind('<Up>',     sub { $w->UpDown(-1) });
-    $canvas->Tk::bind('<Down>',   sub { $w->UpDown(1)  });
-    $canvas->Tk::bind('<Left>',   sub { $w->LeftRight(-1) });
-    $canvas->Tk::bind('<Right>',  sub { $w->LeftRight(1) });
-    $canvas->Tk::bind('<Return>', sub { $w->ReturnKey });
-    $canvas->Tk::bind('<KeyPress>',
-		      sub {
-			  my $c = shift;
-			  my $Ev = $c->XEvent;
-			  $w->KeyPress($Ev->A);
-		      }
-		     );
+    $canvas->Tk::bind('<1>', [$w,'Btn1',Ev('x'),Ev('y')]);
+    $canvas->Tk::bind('<B1-Motion>', [$w,'Motion1',Ev('x'),Ev('y')]);
+    $canvas->Tk::bind('<Double-ButtonRelease-1>', [$w,'Double1',Ev('x'),Ev('y')]);
+    $canvas->Tk::bind('<ButtonRelease-1>', [$w,'CancelRepeat']);
+    $canvas->Tk::bind('<B1-Leave>', [$w,'Leave1',Ev('x'),Ev('y')]);
+    $canvas->Tk::bind('<B1-Enter>', [$w,'CancelRepeat']);
+    $canvas->Tk::bind('<Up>',       [$w,'UpDown',   -1]);
+    $canvas->Tk::bind('<Down>',     [$w,'UpDown',    1]);
+    $canvas->Tk::bind('<Left>',     [$w,'LeftRight',-1]);
+    $canvas->Tk::bind('<Right>',    [$w,'LeftRight', 1]);
+    $canvas->Tk::bind('<Return>',   [$w,'ReturnKey']);
+    $canvas->Tk::bind('<KeyPress>', [$w,'KeyPress',Ev('A')]);
     $canvas->Tk::bind('<Control-KeyPress>', 'NoOp');
     $canvas->Tk::bind('<Alt-KeyPress>', 'NoOp');
     $canvas->Tk::bind('<FocusIn>', sub { $w->FocusIn });
 
+    $canvas->Tk::bind('<2>',['scan','mark',Ev('x'),Ev('y')]);
+    $canvas->Tk::bind('<B2-Motion>',['scan','dragto',Ev('x'),Ev('y')]);
+    # Remove the standard Canvas bindings
+    $canvas->bindtags([$canvas, $canvas->toplevel, "all"]);
+    # ... and define some again
+    $canvas->Tk::bind('<Home>', ['xview','moveto',0]);
+    $canvas->Tk::bind('<End>',  ['xview','moveto',1]);
+
     $w->ConfigSpecs(-browsecmd =>
 		    ['CALLBACK', 'browseCommand', 'BrowseCommand', undef],
 		    -command =>
@@ -138,6 +119,8 @@ sub Populate {
 		    -foreground =>
 		    ['PASSIVE', 'foreground', 'Foreground', undef],
 		    -fg => '-foreground',
+		    -selectmode =>
+		    ['PASSIVE', 'selectMode', 'SelectMode', 'browse'],
 		   );
 
     $w;
@@ -295,7 +278,7 @@ sub Arrange {
 	$sbar->configure(-command => ['xview', $canvas]);
 	$w->{'noScroll'} = 0;
     }
-    $w->{'itemsPerColumn'} = ($H - $pad) / $dy;
+    $w->{'itemsPerColumn'} = int(($H - $pad) / $dy);
     $w->{'itemsPerColumn'} = 1 if ($w->{'itemsPerColumn'} < 1);
     $w->Select($w->{'list'}[$w->{'curItem'}][2], 0)
       if (exists $w->{'curItem'});
@@ -392,7 +375,7 @@ sub Get {
 
 sub Btn1 {
     my($w, $x, $y) = @_;
-    $w->Subwidget('canvas')->focus;
+    $w->Subwidget('canvas')->CanvasFocus;
     $w->SelectAtXY($x, $y);
 }
 
@@ -473,6 +456,7 @@ sub LeftRight {
     } else {
 	my $oldRTag = $w->{'list'}[$w->{'curItem'}][2];
 	my $newItem = $w->{'curItem'} + $amount * $w->{'itemsPerColumn'};
+	return if $newItem < 0;
 	$rTag = $w->{'list'}[$newItem][2];
 	$rTag = $oldRTag unless (defined $rTag);
     }
gdiff -up '/usr/local/src/Tk800.024/Tk/MMutil.pm' '/usr/local/src/work/Tk800/Tk/MMutil.pm'
Index: ./Tk/MMutil.pm
--- ./Tk/MMutil.pm	Tue Mar  5 15:27:40 2002
+++ ./Tk/MMutil.pm	Sat Jun 28 17:49:39 2003
@@ -272,6 +272,22 @@ sub const_config
    $self->{'LDFLAGS'} =~ s/-(debug|pdb:\w+)\s+//g;
    $self->{'LDDLFLAGS'} =~ s/-(debug|pdb:\w+)\s+//g;
   }
+ elsif ($^O eq 'darwin' )
+  {
+   $self->{'LDDLFLAGS'} =~ s/-flat_namespace//;
+   $self->{'LDDLFLAGS'} =~ s/-undefined\s+suppress//;
+   if ( -e "$Config{'archlib'}/CORE/$Config{'libperl'}" ) {
+    $self->{'LDDLFLAGS'} .= " -L\${PERL_ARCHLIB}/CORE -lperl ";
+   }
+   elsif ( -e "/System/Library/Perl/darwin/CORE/libperl.dylib" ) {
+    $self->{'LDDLFLAGS'} .= " -L/System/Library/Perl/darwin/CORE -lperl ";
+   }
+   else {
+    warn "Can't find libperl.dylib";
+   }
+   $self->{'LDFLAGS'} =~ s/-flat_namespace//;
+   $self->{'LDFLAGS'} =~ s/-undefined\s+suppress//;
+  }
  elsif ($^O =~ /(openbsd)/i)
   {
    # -Bforcearchive is bad news for Tk - we don't want all of libpTk.a in all .so-s.
@@ -332,15 +348,15 @@ sub manifypods
  local $_ = $self->MM::manifypods;
  if ($] >= 5.00565)
   {
-   s/(POD2MAN_EXE.*pod2man)/$1 --center "perl\/Tk Documentation" --release "Tk\$(VERSION)"/;
+   s/(POD2MAN_EXE.*pod2man.*)/$1 --center "perl\/Tk Documentation" --release "Tk\$(VERSION)"/;
   }
  elsif ($] >= 5.003)
   {
-   s/(POD2MAN_EXE.*pod2man)/$1 -center "perl\/Tk Documentation" -release "Tk\$(VERSION)"/;
+   s/(POD2MAN_EXE.*pod2man.*)/$1 -center "perl\/Tk Documentation" -release "Tk\$(VERSION)"/;
   }
  else
   {
-   s/(POD2MAN_EXE.*pod2man)/$1 -center \\"perl\/Tk Documentation\\" -release \\"Tk\$(VERSION)\\"/;
+   s/(POD2MAN_EXE.*pod2man.*)/$1 -center \\"perl\/Tk Documentation\\" -release \\"Tk\$(VERSION)\\"/;
   }
  s/\bpod::/Tk::/mg;
  s/\bpTk:://mg;
@@ -519,10 +535,10 @@ sub TkExtMakefile
      push(@opt,'LD' => 'gcc -shared');
      if ($win_arch eq 'MSWin32')
       {
-       my $extra = "-lcomdlg32 -lgdi32";
+       my $extra = "-L/lib/w32api -lcomdlg32 -lgdi32";
        my $libs = $att{'LIBS'}->[0];
        $att{'LIBS'}->[0] = "$extra $libs";
-       $att{'DEFINE'} .= ' -D__WIN32__';
+       $att{'DEFINE'} .= ' -D__WIN32__ -D_WIN32';
        $att{'DEFINE'} .= ' -DWIN32' if($att{'NAME'} eq 'Tk::pTk');
       }
      elsif ($win_arch eq 'x')
gdiff -up '/usr/local/src/Tk800.024/Tk/Menu.pm' '/usr/local/src/work/Tk800/Tk/Menu.pm'
Index: ./Tk/Menu.pm
Prereq:  1.34 
--- ./Tk/Menu.pm	Thu Apr 27 16:41:04 2000
+++ ./Tk/Menu.pm	Mon Apr 21 17:53:09 2003
@@ -58,6 +58,7 @@ sub InitObject
  my ($menu,$args) = @_;
  my $menuitems = delete $args->{-menuitems};
  $menu->SUPER::InitObject($args);
+ $menu->ConfigSpecs(-foreground => ['SELF']);
  if (defined $menuitems)
   {
    # If any other args do configure now
@@ -693,7 +694,7 @@ sub NextEntry
   }
  $menu->activate($i);
  $menu->GenerateMenuSelect;
- if ($menu->type($i) eq 'cascade')
+ if ($menu->cget('-type') eq 'menubar' && $menu->type($i) eq 'cascade')
   {
    my $cascade = $menu->entrycget($i, '-menu');
    $menu->postcascade($i);
gdiff -up '/usr/local/src/Tk800.024/Tk/Optionmenu.pm' '/usr/local/src/work/Tk800/Tk/Optionmenu.pm'
Index: ./Tk/Optionmenu.pm
--- ./Tk/Optionmenu.pm	Mon Sep 11 16:14:23 2000
+++ ./Tk/Optionmenu.pm	Fri May 30 23:24:37 2003
@@ -34,6 +34,7 @@ sub Populate
                  -options => ['METHOD', undef, undef, undef],
 		 -variable=> ['PASSIVE', undef, undef, undef],
 		 -font    => [['SELF',$menu], undef, undef, undef],
+		 -foreground => [['SELF', 'CHILDREN'], undef, undef, undef],
 
    -takefocus          => [ qw/SELF takefocus          Takefocus          1/ ],
    -highlightthickness => [ qw/SELF highlightThickness HighlightThickness 1/ ],
gdiff -up '/usr/local/src/Tk800.024/Tk/Pane.pm' '/usr/local/src/work/Tk800/Tk/Pane.pm'
Index: ./Tk/Pane.pm
--- ./Tk/Pane.pm	Sat Dec 18 20:57:53 1999
+++ ./Tk/Pane.pm	Mon Apr 21 17:53:09 2003
@@ -20,6 +20,11 @@ use base qw(Tk::Derived Tk::Frame);
 
 Construct Tk::Widget 'Pane';
 
+use Tk::Submethods(
+  grid => [qw/bbox columnconfigure location propagate rowconfigure size slaves/],
+  pack => [qw/propagate slaves/]
+);
+
 sub ClassInit {
     my ($class,$mw) = @_;
     $mw->bind($class,'<Configure>',['QueueLayout',4]);
gdiff -up '/usr/local/src/Tk800.024/Tk/Table.pm' '/usr/local/src/work/Tk800/Tk/Table.pm'
Index: ./Tk/Table.pm
--- ./Tk/Table.pm	Fri Mar 31 17:14:05 2000
+++ ./Tk/Table.pm	Sat Jun  7 20:51:48 2003
@@ -164,12 +164,12 @@ sub Layout
  my $why   = $t->{LayoutPending};
  $t->{LayoutPending} = 0;
 
- if ($sb =~ /^[ns]/)
+ if ($sb =~ /[ns]/)
   {
    $t->{xsb} = $t->Scrollbar(-orient => 'horizontal', -command => ['xview' => $t]) unless (defined $t->{xsb});
    $xsb   = $t->{xsb};
    $xs[3] = $xsb->ReqHeight;
-   if ($sb =~ /^n/)
+   if ($sb =~ /n/)
     {
      $xs[1] = $tadj;
      $tadj += $xs[3];
@@ -185,12 +185,12 @@ sub Layout
    $t->{xsb}->UnmapWindow if (defined $t->{xsb});
   }
 
- if ($sb =~ /[ew]$/)
+ if ($sb =~ /[ew]/)
   {
    $t->{ysb} = $t->Scrollbar(-orient => 'vertical', -command => ['yview' => $t]) unless (defined $t->{ysb});
    $ysb    = $t->{ysb};
    $ys[2]  = $ysb->ReqWidth;
-   if ($sb =~ /w$/)
+   if ($sb =~ /w/)
     {
      $ys[0] = $ladj;
      $ladj += $ys[2];
@@ -432,6 +432,17 @@ sub rows
  if (@_ > 1)
   {
    $t->_configure(-rows => $r);
+   if ($t->{Row} && @{$t->{Row}} > $r)
+    {
+     for my $y ($r .. $#{$t->{Row}})
+      {
+       for my $s (@{$t->{Row}[$y]})
+        {
+	 $s->destroy if $s;
+	}
+      }
+     splice @{ $t->{Row} }, $r;
+    }
    $t->QueueLayout(16);
   }
  return $t->_cget('-rows');
@@ -454,6 +465,17 @@ sub columns
  if (@_ > 1)
   {
    $t->_configure(-columns => $r);
+   if ($t->{Row})
+    {
+     for my $row (@{$t->{Row}})
+      {
+       for my $s (@$row[$r .. $#$row])
+        {
+	 $s->destroy if $s;
+	}
+       splice @$row, $r;
+      }
+    }
    $t->QueueLayout(16);
   }
  return $t->_cget('-columns');
gdiff -up '/usr/local/src/Tk800.024/Tk/TextUndo.pm' '/usr/local/src/work/Tk800/Tk/TextUndo.pm'
Index: ./Tk/TextUndo.pm
--- ./Tk/TextUndo.pm	Sat Sep 29 19:48:16 2001
+++ ./Tk/TextUndo.pm	Fri Apr 25 15:23:45 2003
@@ -1,12 +1,13 @@
 # Copyright (c) 1995-1999 Nick Ing-Simmons.
 # Copyright (c) 1999 Greg London.
+# Copyright (c) 2003 Greg London.
 # All rights reserved.
 # This program is free software; you can redistribute it and/or
 # modify it under the same terms as Perl itself.
 package Tk::TextUndo;
 
 use vars qw($VERSION $DoDebug);
-$VERSION = '3.050'; # $Id: //depot/Tk8/Tk/TextUndo.pm#50 $
+$VERSION = '3.500'; # $Id: //depot/Tk8/Tk/TextUndo.pm#48 $
 $DoDebug = 0;
 
 use Tk qw (Ev);
@@ -571,6 +572,7 @@ sub Insert
  $w->addGlobStart;
  $w->SUPER::Insert($char);
  $w->addGlobEnd;
+ $w->see('insert');
 }
 
 
@@ -709,7 +711,7 @@ sub Save
    my $count=0;
    my $index = '1.0';
    my $progress;
-   my ($lines) = $w->index('end') =~ /^(\d+)\./;
+   my ($lines) = $w->index('end - 1 chars') =~ /^(\d+)\./;
    while ($w->compare($index,'<','end'))
     {
 #    my $end = $w->index("$index + 1024 chars");
@@ -910,7 +912,7 @@ sub MarkSelectionsSavePositions
 sub RestoreSelectionsMarkedSaved
 {
  my ($w)=@_;
- my $i = 0;
+ my $i = 1;
  my %mark_hash;
  foreach my $mark ($w->markNames)
   {
@@ -932,10 +934,30 @@ sub RestoreSelectionsMarkedSaved
 
 ####################################################################
 # selected lines may be discontinous sequence.
-sub SelectedLineNumbers
+sub GetMarkedSelectedLineNumbers
 {
  my ($w) = @_;
- my @ranges = $w->tagRanges('sel');
+
+ my $i = 1;
+ my %mark_hash;
+ my @ranges;
+ foreach my $mark ($w->markNames)
+  {
+   $mark_hash{$mark}=1;
+  }
+
+ while(1)
+  {
+   my $markstart = 'MarkSelectionsSavePositions_'.$i++;
+   last unless(exists($mark_hash{$markstart}));
+   my $indexstart = $w->index($markstart);
+   my $markend = 'MarkSelectionsSavePositions_'.$i++;
+   last unless(exists($mark_hash{$markend}));
+   my $indexend = $w->index($markend);
+
+   push(@ranges, $indexstart, $indexend);
+  }  
+
  my @selection_list;
  while (@ranges)
   {
@@ -959,7 +981,7 @@ sub insertStringAtStartOfSelectedLines
  my ($w,$insert_string)=@_;
  $w->addGlobStart;
  $w->MarkSelectionsSavePositions;
- foreach my $line ($w->SelectedLineNumbers)
+ foreach my $line ($w->GetMarkedSelectedLineNumbers)
   {
    $w->insert($line.'.0', $insert_string);
   }
@@ -973,7 +995,7 @@ sub deleteStringAtStartOfSelectedLines
  $w->addGlobStart;
  $w->MarkSelectionsSavePositions;
  my $length = length($insert_string);
- foreach my $line ($w->SelectedLineNumbers)
+ foreach my $line ($w->GetMarkedSelectedLineNumbers)
   {
    my $start = $line.'.0';
    my $end   = $line.'.'.$length;
gdiff -up '/usr/local/src/Tk800.024/Tk/Trace.pm' '/usr/local/src/work/Tk800/Tk/Trace.pm'
Index: ./Tk/Trace.pm
--- ./Tk/Trace.pm	Mon Sep 11 21:44:39 2000
+++ ./Tk/Trace.pm	Sun Jun 15 22:13:06 2003
@@ -3,9 +3,6 @@ package Tk::Trace;
 use vars qw($VERSION);
 $VERSION = '3.002'; # $Id: //depot/Tk8/Tk/Trace.pm#2 $
 
-use Exporter;
-use base qw/Exporter/;
-@EXPORT = qw/traceVariable traceVdelete traceVinfo/;
 use Tie::Watch;
 use strict;
 
@@ -84,7 +81,7 @@ sub destroy {
     $self->Destroy(@_);                      # destroy variable
 }
 
-sub traceVariable {
+sub Tk::Widget::traceVariable {
     my($parent, $vref, $op, $callback) = @_;
     die "Illegal parent." unless ref $parent;
     die "Illegal variable." unless ref $vref;
@@ -120,7 +117,7 @@ sub traceVariable {
 
 } # end traceVariable
 
-sub traceVdelete {
+sub Tk::Widget::traceVdelete {
     my($parent, $vref, $op_not_honored, $callabck_not_honored) = @_;
     if (defined $trace{$vref}) {
         $trace{$vref}->Unwatch;
@@ -128,7 +125,7 @@ sub traceVdelete {
     }
 }
 
-sub traceVinfo {
+sub Tk::Widget::traceVinfo {
     my($parent, $vref) = @_;
     return (defined $trace{$vref}) ? $trace{$vref}->Info : undef;
 }
@@ -226,6 +223,7 @@ Stop tracing the variable.
 =head1 EXAMPLE
 
  use Tk;
+ use Tk::Trace;
 
  # Trace a Scale's variable and move a meter in unison.
 
@@ -266,7 +264,7 @@ Stop tracing the variable.
 
 =head1 COPYRIGHT
 
-Copyright (C) 2000 - 2000 Stephen O. Lidie. All rights reserved.
+Copyright (C) 2000 - 2003 Stephen O. Lidie. All rights reserved.
 
 This program is free software; you can redistribute it and/or modify it under
 the same terms as Perl itself.
gdiff -up '/usr/local/src/Tk800.024/Tk/Widget.pm' '/usr/local/src/work/Tk800/Tk/Widget.pm'
Index: ./Tk/Widget.pm
--- ./Tk/Widget.pm	Sat Sep 29 19:48:16 2001
+++ ./Tk/Widget.pm	Fri Apr 25 15:29:06 2003
@@ -475,12 +475,6 @@ sub focusSave
 # but does auto-cancel when widget is deleted.
 require Tk::After;
 
-sub afterIdle
-{
- my $w = shift;
- return Tk::After->new($w,'idle','once',@_);
-}
-
 sub afterCancel
 {
  my ($w,$what) = @_;
@@ -492,6 +486,21 @@ sub afterCancel
   }
 }
 
+sub afterIdle
+{
+ my $w = shift;
+ return Tk::After->new($w,'idle','once',@_);
+}
+
+sub afterInfo {
+    my ($w, $id) = @_;
+    if (defined $id) {
+	return ($id->[4], $id->[2], $id->[3]);
+    } else {
+	return sort( keys %{$w->{_After_}} );
+    }
+}
+
 sub after
 {
  my $w = shift;
@@ -818,8 +827,24 @@ sub BusyRecurse
 
 sub Busy
 {
- my ($w,%args) = @_;
+ my ($w,@args) = @_;
  return unless $w->viewable;
+ my($sub, %args);
+ for(my $i=0; $i<=$#args; $i++)
+  {
+   if (ref $args[$i] eq 'CODE')
+    {
+     if (defined $sub)
+      {
+       croak "Multiple code definitions not allowed in Tk::Widget::Busy";
+      }
+     $sub = $args[$i];
+    }
+   else
+    {
+     $args{$args[$i]} = $args[$i+1]; $i++;
+    }
+  }
  my $cursor  = delete $args{'-cursor'};
  my $recurse = delete $args{'-recurse'};
  $cursor  = 'watch' unless defined $cursor;
@@ -856,6 +881,13 @@ sub Busy
  $w->update;
  eval {local $SIG{'__DIE__'};  $w->grab };
  $w->update;
+ if ($sub)
+  {
+   eval { $sub->() };
+   my $err = $@;
+   $w->Unbusy(-recurse => $recurse);
+   die $err if $err;
+  }
 }
 
 sub _busy
@@ -960,6 +992,34 @@ sub XYscrollBind
  $mw->XscrollBind($class);
 }
 
+sub MouseWheelBind
+{
+ my($mw,$class) = @_;
+
+ # The MouseWheel will typically only fire on Windows. However, one
+ # could use the "event generate" command to produce MouseWheel
+ # events on other platforms.
+
+ $mw->Tk::bind($class, '<MouseWheel>',
+	       [ sub { $_[0]->yview('scroll',-($_[1]/120)*3,'units') }, Tk::Ev("D")]);
+
+ if ($Tk::platform eq 'unix')
+  {
+   # Support for mousewheels on Linux/Unix commonly comes through mapping
+   # the wheel to the extended buttons.  If you have a mousewheel, find
+   # Linux configuration info at:
+   #   http://www.inria.fr/koala/colas/mouse-wheel-scroll/
+   $mw->Tk::bind($class, '<4>',
+		 sub { $_[0]->yview('scroll', -3, 'units')
+			   unless $Tk::strictMotif;
+		   });
+   $mw->Tk::bind($class, '<5>',
+		 sub { $_[0]->yview('scroll', 3, 'units')
+			   unless $Tk::strictMotif;
+		   });
+  }
+}
+
 sub ScrlListbox
 {
  my $parent = shift;
@@ -1096,6 +1156,7 @@ sub form
 sub Scrolled
 {
  my ($parent,$kind,%args) = @_;
+ $kind = 'Pane' if $kind eq 'Frame';
  # Find args that are Frame create time args
  my @args = Tk::Frame->CreateArgs($parent,\%args);
  my $name = delete $args{'Name'};
gdiff -up '/usr/local/src/Tk800.024/Tk/Wm.pm' '/usr/local/src/work/Tk800/Tk/Wm.pm'
Index: ./Tk/Wm.pm
--- ./Tk/Wm.pm	Sat Jul  8 12:16:16 2000
+++ ./Tk/Wm.pm	Fri May  2 22:40:22 2003
@@ -16,7 +16,10 @@ use strict qw(vars);
 use vars qw($VERSION);
 $VERSION = '3.023'; # $Id: //depot/Tk8/Tk/Wm.pm#23 $
 
-use Tk::Submethods ( 'wm' => [qw(grid tracing)] );
+use Tk::Submethods;
+
+*{Tk::Wm::wmGrid}    = sub { shift->wm("grid", @_) };
+*{Tk::Wm::wmTracing} = sub { shift->wm("tracing", @_) };
 
 Direct Tk::Submethods ('wm' => [qw(aspect client colormapwindows command
                        deiconify focusmodel frame geometry group
@@ -75,8 +78,8 @@ sub Post
  $X = int($X);
  $Y = int($Y);
  $w->positionfrom('user');
- # $w->geometry("+$X+$Y");
- $w->MoveToplevelWindow($X,$Y);
+ $w->geometry("+$X+$Y");
+ # $w->MoveToplevelWindow($X,$Y);
  $w->deiconify;
  $w->raise;
 }
@@ -123,7 +126,10 @@ sub Popup
   }
  my ($X,$Y) = AnchorAdjust($w->cget('-overanchor'),$rx,$ry,$rw,$rh);
  ($X,$Y)    = AnchorAdjust($w->cget('-popanchor'),$X,$Y,-$mw,-$mh);
- $w->Post($X,$Y); 
+ # adjust to not cross screen borders
+ if ($mw > $w->screenwidth)  { $X = 0 }
+ if ($mh > $w->screenheight) { $Y = 0 }
+ $w->Post($X,$Y);
  $w->waitVisibility;
 }
 
gdiff -up /dev/null '/usr/local/src/work/Tk800/Tk/arrowdownwin.xbm'
Index: ./Tk/arrowdownwin.xbm
--- ./Tk/arrowdownwin.xbm	Thu Jan  1 01:00:00 1970
+++ ./Tk/arrowdownwin.xbm	Mon Apr 21 21:50:45 2003
@@ -0,0 +1,5 @@
+#define arrowdownwin2_width 9
+#define arrowdownwin2_height 13
+static char arrowdownwin2_bits[] = {
+ 0x00,0xfe,0x00,0xfe,0x00,0xfe,0x00,0xfe,0x00,0xfe,0x7c,0xfe,0x38,0xfe,0x10,
+ 0xfe,0x00,0xfe,0x00,0xfe,0x00,0xfe,0x00,0xfe,0x00,0xfe};
gdiff -up '/usr/local/src/Tk800.024/Tk/typemap' '/usr/local/src/work/Tk800/Tk/typemap'
Index: ./Tk/typemap
--- ./Tk/typemap	Tue Jul 27 20:20:10 1999
+++ ./Tk/typemap	Tue Jun 17 01:41:39 2003
@@ -63,7 +63,7 @@ T_TK_UID
 
 T_IVOBJ
 	if (sv_isa($arg, \"${ntype}\")) {
-	    $var = ($type)(SvIV(SvRV($arg)));
+	    $var = INT2PTR($type, SvIV(SvRV($arg)));
 	}
 	else {
 	    $var = ($type) NULL;
@@ -80,7 +80,7 @@ T_NIO
 
 OUTPUT
 T_IVOBJ
-	sv_setref_iv($arg, \"${ntype}\", (IV) $var);
+	sv_setref_iv($arg, \"${ntype}\", PTR2IV($var));
 
 T_TK_UID
 	sv_setpv($arg,$var);
gdiff -up '/usr/local/src/Tk800.024/chnGlue.c' '/usr/local/src/work/Tk800/chnGlue.c'
Index: ./chnGlue.c
--- ./chnGlue.c	Fri Sep  8 11:27:28 2000
+++ ./chnGlue.c	Tue Jun 17 01:20:29 2003
@@ -93,8 +93,12 @@ Tcl_SetChannelOption(Tcl_Interp *interp,
   {
    if (strcmp(newValue,"binary") == 0)
     {
+#ifdef USE_PERLIO
+     PerlIO_binmode(aTHX_ f, '<', O_BINARY, Nullch);
+#else
 #if defined(WIN32) || defined(__EMX__)  || defined(__CYGWIN__)
      setmode(PerlIO_fileno(f), O_BINARY);
+#endif
 #endif
      return TCL_OK;
     }
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/Plot.pm' '/usr/local/src/work/Tk800/demos/demos/widget_lib/Plot.pm'
Index: ./demos/demos/widget_lib/Plot.pm
--- ./demos/demos/widget_lib/Plot.pm	Sat Oct  2 18:44:28 1999
+++ ./demos/demos/widget_lib/Plot.pm	Fri Apr 25 15:59:21 2003
@@ -9,24 +9,16 @@ package Plot;
 #
 # Advertised Plot widgets:  canvas, entry, PostScript_button, view_button.
 
-require 5.002;
+require 5.005_03;
 
 use vars qw/$VERSION @ISA/;
-$VERSION = '3.013'; # $Id: //depot/Tk8/demos/demos/widget_lib/Plot.pm#13 $
+$VERSION = '4.002'; # $Id: //depot/Tkutf8/demos/demos/widget_lib/Plot.pm#2 $
 
 use Tk::Frame;
-use base  qw(Tk::Frame);
+use base  qw/Tk::Frame/;
 Construct Tk::Widget 'Plot';
 use strict;
 
-# Plot Virtual Methods
-# 
-# 	$plot = $MW->Plot(
-#           -title_color        => 'Brown',
-#           -inactive_highlight => 'Skyblue2',
-#           -active_highlight   => 'red',
-#       );
-
 sub Populate {
 
     # Plot composite widget constructor.
@@ -49,8 +41,8 @@ sub Populate {
     my $plot_font = '-*-Helvetica-Medium-R-Normal--*-180-*-*-*-*-*-*';
 
     my $c = $cw->Canvas(
-        -relief => 'raised', 
-        -width  => '450', 
+        -relief => 'raised',
+        -width  => '450',
         -height => '300',
         -cursor => 'top_left_arrow',
     );
@@ -61,7 +53,7 @@ sub Populate {
     $c->createLine(100, 250, 100, 50, -width => 2);
     $c->createText(225, 20, -text => 'A Simple Plot', -font => $plot_font,
 	       -fill => $tc);
-    
+
     my($i, $x, $y, $point, $item);
     for($i = 0; $i <= 10; $i++) {
 	$x = 100 + ($i * 30);
@@ -75,7 +67,7 @@ sub Populate {
 	$c->createText(96, $y, -text => $i * 50.0, -anchor => 'e',
 		   -font => $plot_font);
     } # forend
-    
+
     foreach $point ([12, 56], [20, 94], [33, 98], [32, 120], [61, 180],
 		    [75, 160], [98, 223]) {
 	$x = 100 + (3 * ${$point}[0]);
@@ -154,13 +146,13 @@ sub area_move {
 } # end area_move
 
 sub area_save {
-    
+
     my($w, $pinfo) = @_;
-    
+
     my($x1, $x2, $y1, $y2, $a);
-    
+
     if($pinfo->{'areaX2'} != -1) {
-	($x1, $x2, $y1, $y2) = 
+	($x1, $x2, $y1, $y2) =
 	  @$pinfo{'areaX1', 'areaX2', 'areaY1', 'areaY2'}; # slice !
 	($x1, $x2) = @$pinfo{'areaX2', 'areaX1'} if $x2 <= $x1;
 	($y1, $y2) = @$pinfo{'areaY2', 'areaY1'} if $y2 <= $y1;
@@ -169,7 +161,7 @@ sub area_save {
     } else {
 	$a = $w->postscript;
     }
-    
+
     $SIG{'PIPE'} = sub {};
     open(LPR, "| $pinfo->{'prcmd'}");
     print LPR $a;
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/WidgetDemo.pm' '/usr/local/src/work/Tk800/demos/demos/widget_lib/WidgetDemo.pm'
Index: ./demos/demos/widget_lib/WidgetDemo.pm
--- ./demos/demos/widget_lib/WidgetDemo.pm	Sat Oct  2 18:44:28 1999
+++ ./demos/demos/widget_lib/WidgetDemo.pm	Fri Apr 25 15:59:56 2003
@@ -1,10 +1,11 @@
 package WidgetDemo;
 
-use 5.004;
+use 5.005_03;
+use Tk 800.000;
 use Carp;
 
 use vars qw($VERSION @ISA);
-$VERSION = '3.021'; # $Id: //depot/Tk8/demos/demos/widget_lib/WidgetDemo.pm#21 $
+$VERSION = '4.004'; # $Id: //depot/Tkutf8/demos/demos/widget_lib/WidgetDemo.pm#4 $
 
 use Tk;
 use Tk::Toplevel;
@@ -58,9 +59,9 @@ sub Populate {
         -wraplength => '4i',
         -justify    => 'left',
         -text       => $text,
-        @label_attributes,			 
+        @label_attributes,
     );
-    
+
     my $demo_frame = $cw->Frame;
     $cw->Advertise('WidgetDemo' => $demo_frame); # deprecated
 
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/arrows.pl' '/usr/local/src/work/Tk800/demos/demos/widget_lib/arrows.pl'
Index: ./demos/demos/widget_lib/arrows.pl
--- ./demos/demos/widget_lib/arrows.pl	Tue Jul 27 20:20:13 1999
+++ ./demos/demos/widget_lib/arrows.pl	Fri Apr 25 15:57:14 2003
@@ -17,7 +17,7 @@ sub arrows {
     );
 
     my $c = $TOP->Canvas(
-        -width       => '500', 
+        -width       => '500',
         -height      => '350',
         -relief      => 'sunken',
 	-borderwidth => 2,
@@ -70,7 +70,7 @@ sub arrows {
             sub {$ainfo{move_sub} = \&{"arrow_move${n}"}}
         );
     }
-    
+
     # Bindings to move a resize box and redraw the arrow.
 
     $c->bind('box', '<B1-Motion>' =>
@@ -84,7 +84,7 @@ sub arrow_err {
 
     my($c) = @_;
 
-    my $i = $c->create(qw/text .6i .1i -anchor n -text/ => "Range error!");
+    my $i = $c->createText(qw/.6i .1i -anchor n -text/ => "Range error!");
     $c->after(4000, sub { $c->delete($i) });
 
 } # end errow_err
@@ -164,40 +164,40 @@ sub arrow_setup {
     # Create the arrow and outline.
 
     $c->delete('all');
-    $c->create('line', $v->{x1}, $v->{'y'}, $v->{x2}, $v->{'y'}, 
+    $c->createLine($v->{x1}, $v->{'y'}, $v->{x2}, $v->{'y'},
 	       -width => 10*$v->{width},
 	       -arrowshape => [10*$v->{a}, 10*$v->{b}, 10*$v->{c}],
 	       -arrow => 'last', @{$v->{bigLineStyle}});
     my $xtip = $v->{x2}-10*$v->{b};
     my $deltaY =  10*$v->{c}+5*$v->{width};
-    $c->create('line', $v->{x2}, $v->{'y'}, $xtip, $v->{'y'}+$deltaY,
+    $c->createLine($v->{x2}, $v->{'y'}, $xtip, $v->{'y'}+$deltaY,
 	       $v->{x2}-10*$v->{a}, $v->{'y'}, $xtip, $v->{'y'}-$deltaY,
 	       $v->{x2}, $v->{'y'}, -width => 2, -capstyle => 'round',
 	       -joinstyle => 'round');
 
     # Create the boxes for reshaping the line and arrowhead.
 
-    $c->create('rectangle', $v->{x2}-10*$v->{a}-5, $v->{'y'}-5,
+    $c->createRectangle($v->{x2}-10*$v->{a}-5, $v->{'y'}-5,
 	       $v->{x2}-10*$v->{a}+5, $v->{'y'}+5, @{$v->{boxStyle}},
 	       -tags => ['box1', 'box']);
-    $c->create('rectangle', $xtip-5, $v->{'y'}-$deltaY-5, $xtip+5,
+    $c->createRectangle($xtip-5, $v->{'y'}-$deltaY-5, $xtip+5,
 	       $v->{'y'}-$deltaY+5, @{$v->{boxStyle}},
 	       -tags => ['box2', 'box']);
-    $c->create('rectangle', $v->{x1}-5, $v->{'y'}-5*$v->{width}-5,
+    $c->createRectangle($v->{x1}-5, $v->{'y'}-5*$v->{width}-5,
 	       $v->{x1}+5, $v->{'y'}-5*$v->{width}+5, @{$v->{boxStyle}},
 	       -tags => ['box3', 'box']);
 
     # Create three arrows in actual size with the same parameters
 
-    $c->create('line', $v->{x2}+50, 0, $v->{x2}+50, 1000, -width => 2);
+    $c->createLine($v->{x2}+50, 0, $v->{x2}+50, 1000, -width => 2);
     my $tmp = $v->{x2}+100;
-    $c->create('line', $tmp, $v->{'y'}-125, $tmp, $v->{'y'}-75,
+    $c->createLine($tmp, $v->{'y'}-125, $tmp, $v->{'y'}-75,
 	       -width => $v->{width}, -arrow => 'both',
 	       -arrowshape => [$v->{a}, $v->{b}, $v->{c}]);
-    $c->create('line', $tmp-25, $v->{'y'}, $tmp+25, $v->{'y'},
+    $c->createLine($tmp-25, $v->{'y'}, $tmp+25, $v->{'y'},
 	       -width => $v->{width}, -arrow => 'both',
 	       -arrowshape =>[$v->{a}, $v->{b}, $v->{c}]);
-    $c->create('line', $tmp-25, $v->{'y'}+75, $tmp+25, $v->{'y'}+125,
+    $c->createLine($tmp-25, $v->{'y'}+75, $tmp+25, $v->{'y'}+125,
 	       -width => $v->{width}, -arrow => 'both',
 	       -arrowshape => [$v->{a}, $v->{b}, $v->{c}]);
     $c->itemconfigure($cur, @{$v->{activeStyle}}) if $cur =~ /box?/;
@@ -206,31 +206,31 @@ sub arrow_setup {
     # dimensions.
 
     $tmp = $v->{x2}+10;
-    $c->create('line', $tmp, $v->{'y'}-5*$v->{width}, $tmp, $v->{'y'}-$deltaY,
+    $c->createLine($tmp, $v->{'y'}-5*$v->{width}, $tmp, $v->{'y'}-$deltaY,
 	       -arrow => 'both', -arrowshape => $v->{smallTips});
-    $c->create('text', $v->{x2}+15, $v->{'y'}-$deltaY+5*$v->{c},
+    $c->createText($v->{x2}+15, $v->{'y'}-$deltaY+5*$v->{c},
 	       -text => $v->{c}, -anchor => 'w');
     $tmp =  $v->{x1}-10;
-    $c->create('line', $tmp, $v->{'y'}-5*$v->{width}, $tmp,
+    $c->createLine($tmp, $v->{'y'}-5*$v->{width}, $tmp,
 	       $v->{'y'}+5*$v->{width}, -arrow => 'both',
 	       -arrowshape => $v->{smallTips});
-    $c->create('text', $v->{x1}-15, $v->{'y'}, -text => $v->{width},
+    $c->createText($v->{x1}-15, $v->{'y'}, -text => $v->{width},
 	       -anchor => 'e');
     $tmp = $v->{'y'}+5*$v->{width}+10*$v->{c}+10;
-    $c->create('line', $v->{x2}-10*$v->{a}, $tmp, $v->{x2}, $tmp,
+    $c->createLine($v->{x2}-10*$v->{a}, $tmp, $v->{x2}, $tmp,
 	       -arrow => 'both', -arrowshape => $v->{smallTips});
-    $c->create('text', $v->{x2}-5*$v->{a}, $tmp+5, -text => $v->{a},
+    $c->createText($v->{x2}-5*$v->{a}, $tmp+5, -text => $v->{a},
 	       -anchor => 'n');
     $tmp = $tmp+25;
-    $c->create('line', $v->{x2}-10*$v->{b}, $tmp, $v->{x2}, $tmp, 
+    $c->createLine($v->{x2}-10*$v->{b}, $tmp, $v->{x2}, $tmp,
 	       -arrow => 'both', -arrowshape => $v->{smallTips});
-    $c->create('text', $v->{x2}-5*$v->{b}, $tmp+5, -text => $v->{b},
+    $c->createText($v->{x2}-5*$v->{b}, $tmp+5, -text => $v->{b},
 	       -anchor => 'n');
 
-    $c->create('text', $v->{x1}, 310, -text => "-width =>  $v->{width}",
+    $c->createText($v->{x1}, 310, -text => "-width =>  $v->{width}",
 	       -anchor => 'w',
 	       -font => '-*-Helvetica-Medium-R-Normal--*-180-*-*-*-*-*-*');
-    $c->create('text', $v->{x1}, 330,
+    $c->createText($v->{x1}, 330,
 	       -text => "-arrowshape =>  [$v->{a}, $v->{b}, $v->{c}]",
 	       -anchor => 'w',
 	       -font => '-*-Helvetica-Medium-R-Normal--*-180-*-*-*-*-*-*');
@@ -238,5 +238,5 @@ sub arrow_setup {
     $v->{count}++;
 
 } # end arrow_setup
-    
+
 1;
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/bind.pl' '/usr/local/src/work/Tk800/demos/demos/widget_lib/bind.pl'
Index: ./demos/demos/widget_lib/bind.pl
--- ./demos/demos/widget_lib/bind.pl	Tue Jul 27 20:20:13 1999
+++ ./demos/demos/widget_lib/bind.pl	Fri Apr 25 15:58:09 2003
@@ -10,7 +10,7 @@ sub bind {
     my($demo) = @_;
     $TOP = $MW->WidgetDemo(
         -name     => $demo,
-        -text     =>'',				      
+        -text     =>'',
         -title    => 'Text Demonstration - Tag Bindings',
         -iconname => 'bind',
     );
@@ -44,19 +44,19 @@ sub bind {
     $t->insert('end', '6. A grid that demonstrates how canvases can be scrolled.', 'd6');
 
     foreach $tag (qw(d1 d2 d3 d4 d5 d6)) {
-	$t->tag('bind', $tag, '<Any-Enter>' => 
-            sub {shift->tag('configure', $tag, @bold)}
+	$t->tagBind($tag, '<Any-Enter>' =>
+            sub {shift->tagConfigure($tag, @bold)}
         );
-	$t->tag('bind', $tag, '<Any-Leave>' =>
-            sub {shift->tag('configure', $tag, @normal)}
+	$t->tagBind($tag, '<Any-Leave>' =>
+            sub {shift->tagConfigure($tag, @normal)}
         );
     }
-    $t->tag(qw/bind d1 <1>/ => sub {&items('items')});
-    $t->tag(qw/bind d2 <1>/ => sub {&plot('plot')});
-    $t->tag(qw/bind d3 <1>/ => sub {&ctext('ctext')});
-    $t->tag(qw/bind d4 <1>/ => sub {&arrows('arrows')});
-    $t->tag(qw/bind d5 <1>/ => sub {&ruler('ruler')});
-    $t->tag(qw/bind d6 <1>/ => sub {&cscroll('cscroll')});
+    $t->tagBind(qw/d1 <1>/ => sub {&items('items')});
+    $t->tagBind(qw/d2 <1>/ => sub {&plot('plot')});
+    $t->tagBind(qw/d3 <1>/ => sub {&ctext('ctext')});
+    $t->tagBind(qw/d4 <1>/ => sub {&arrows('arrows')});
+    $t->tagBind(qw/d5 <1>/ => sub {&ruler('ruler')});
+    $t->tagBind(qw/d6 <1>/ => sub {&cscroll('cscroll')});
 
     $t->mark(qw/set insert 0.0/);
 
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/floor.pl' '/usr/local/src/work/Tk800/demos/demos/widget_lib/floor.pl'
Index: ./demos/demos/widget_lib/floor.pl
--- ./demos/demos/widget_lib/floor.pl	Tue Jul 27 20:20:16 1999
+++ ./demos/demos/widget_lib/floor.pl	Fri Apr 25 15:54:18 2003
@@ -1,12 +1,13 @@
 # floor.pl
 
+use Tk::Trace;
 use subs qw/floor_bg1 floor_bg2 floor_bg3 floor_display floor_fg1 floor_fg2
 	    floor_fg3 floor_room_changed/;
 use vars qw/$TOP/;
 
 sub floor {
 
-    # Create a top-level window containing a canvas that displays the
+    # Create a top-level window containing a Canvas that displays the
     # floorplan for DEC's Western Research Laboratory.
 
     my($demo) = @_;
@@ -21,8 +22,8 @@ sub floor {
 			   -borderwidth 2 -scrollbars se/);
     $c->pack(qw/-expand yes -fill both/);
 
-    # Create an entry for displaying and typing in current room.
-    untie $floor::current_room;
+    # Create an Entry for displaying and typing in current room.
+
     $floor::current_room = '';
     my $c_entry = $c->Entry(qw/-width 10 -relief sunken -borderwidth 2
 			    -textvariable/ => \$floor::current_room);
@@ -56,7 +57,7 @@ sub floor {
     floor_display $c->Subwidget('canvas'), 3, \%floor_labels, \%floor_items,
         \%cinfo, \$active_floor, $c_entry;
 
-    # Set up event bindings for canvas.
+    # Set up event bindings for the Canvas.
 
     my $floor_number;
     for $floor_number (1..3) {
@@ -68,31 +69,39 @@ sub floor {
     $c->bind('room', '<Enter>' => sub {
 	my($c) = @_;
 	my $id = $c->find('withtag' => 'current');
-	$floor::current_room  = $floor_labels{$c->find('withtag','current')}
-	    if defined $id;
+	$id = $id->[0] if ref($id) eq 'ARRAY';
+	$floor::current_room  = $floor_labels{$id} if defined $id;
 	$c->idletasks;
     });
     $c->bind('room', '<Leave>' => sub {$floor::current_room = ''});
-    $c->Tk::bind('<2>' => sub {
+    $c->CanvasBind('<2>' => sub {
 	my($c) = @_;
         my $e = $c->XEvent;
-	$c->scan('mark', $e->x, $e->y);
+	$c->scanMark($e->x, $e->y);
     });
-    $c->Tk::bind('<B2-Motion>' => sub {
+    $c->CanvasBind('<B2-Motion>' => sub {
 	my($c) = @_;
         my $e = $c->XEvent;
-	$c->scan('dragto', $e->x, $e->y);
+	$c->scanDragto($e->x, $e->y);
     });
-    $c->Tk::bind('<Enter>', => [sub {shift; shift->focus}, $c_entry]);
-    tie $floor::current_room, 'floor', $c->Subwidget('canvas'), \%floor_items,
-        \%cinfo;
+    $c->CanvasBind('<Enter>', => [sub {shift; shift->focus}, $c_entry]);
+
+    $c->traceVariable(\$floor::current_room, 'w' =>
+        [sub {
+            my($index, $value, $op, $floor_items, $cinfo) = @_;
+            return if $op eq 'u';
+	    $floor_current_room = $value;
+	    &floor_room_changed($c->Subwidget('canvas'), $floor_items, $cinfo);
+	    $value;		# always return variable's new value
+	}, \%floor_items, \%cinfo],
+    ); 
 
 } # floor
 
 sub floor_display {
 
     # The following procedure recreates the floorplan display in the
-    # canvas given by "w".  The floor given by "active" (1, 2, or 3) is
+    # Canvas given by "w".  The floor given by "active" (1, 2, or 3) is
     # displayed on top, with office structure visible.  (Used as a callback
     # and a normal function.)
 
@@ -1311,51 +1320,5 @@ sub floor_fg3 {;
     $w->create('line', qw(258 250 243 250), -fill => $color, -tags => ['floor3', 'wall']);
 
 } # end floor_fg3;
-
-package floor;
-
-# $current_room is tied to package "floor" for tracing purposes, thus, when
-# characters are typed in the Entry widget we can call floor_room_changed()
-# at every keystroke, and when a valid room number is found light the room up.
-#
-# All other global variables are also "floor" qualified.
-
-my($class, $current_room, $canvas, $floor_items, $cinfo);
-
-sub TIESCALAR {
-
-    # "new" method for scalars.  Save reference to the floorplan canvas,
-    # item descriptions and canvas info hash in this package's namespace.
-    #
-    # Return a blessed reference, which is what FETCH and STORE will get.
-
-    ($class, $canvas, $floor_items, $cinfo) = @_;
-    my $self;
-    bless \$self, $class;
-
-}
-
-sub FETCH {
-
-    # Method to handle reads of the tied variable:  simply return it's value.
-   
-    my($current_room) = @_;
-    return $$current_room;
-
-}
-
-sub STORE {
-
-    # Method to handle writes to the tied variable:  simply store it's value.
-    # Call floor_room_changed() to highlight a room, if possible.
-
-    my($current_room, $value) = @_;
-    $$current_room = $value;
-    &::floor_room_changed($canvas, $floor_items, $cinfo);
-
-}
-
-sub DESTROY {			# class destructor (unused)
-}
 
 1;
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/form.pl' '/usr/local/src/work/Tk800/demos/demos/widget_lib/form.pl'
Index: ./demos/demos/widget_lib/form.pl
--- ./demos/demos/widget_lib/form.pl	Tue Jul 27 20:20:16 1999
+++ ./demos/demos/widget_lib/form.pl	Fri Apr 25 15:58:27 2003
@@ -4,7 +4,7 @@ use vars qw/$TOP/;
 
 sub form {
 
-    # Create a top-level window that displays a bunch of entries with 
+    # Create a top-level window that displays a bunch of entries with
     # tabs set up to move between them.
 
     my($demo) = @_;
@@ -19,9 +19,9 @@ sub form {
     foreach ('Name:', 'Address:', '', '', 'Phone:') {
 	my $e = $f->Entry(qw/-relief sunken -width 40/);
 	my $l = $f->Label(-text => $_, -anchor => 'e', -justify => 'right');
-        Tk::grid( $l, -row => $row, -column => 0, -sticky => 'e');
-        Tk::grid( $e, -row => $row++, -column => 1,-sticky => 'ew');
-        $f->gridRowconfigure(1,-weight => 1);  
+        $l->grid(-row => $row, -column => 0, -sticky => 'e');
+        $e->grid(-row => $row++, -column => 1,-sticky => 'ew');
+        $f->gridRowconfigure(1,-weight => 1);
 	$e->focus if $_ eq 'Name:';
     }
     $TOP->bind('<Return>' => [$TOP => 'destroy']);
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/hscale.pl' '/usr/local/src/work/Tk800/demos/demos/widget_lib/hscale.pl'
Index: ./demos/demos/widget_lib/hscale.pl
--- ./demos/demos/widget_lib/hscale.pl	Tue Jul 27 20:20:16 1999
+++ ./demos/demos/widget_lib/hscale.pl	Fri Apr 25 15:58:39 2003
@@ -19,8 +19,8 @@ sub hscale {
 
     my $canvas = $frame->Canvas(
         qw/width 50 -height 50 -bd 0 -highlightthickness 0/);
-    $canvas->create(qw/polygon 0 0 1 1 2 2 -fill DeepSkyBlue3 -tags poly/);
-    $canvas->create(qw/line 0 0 1 1 2 2 0 0 -fill black -tags line/);
+    $canvas->createPolygon(qw/0 0 1 1 2 2 -fill DeepSkyBlue3 -tags poly/);
+    $canvas->createLine (qw/0 0 1 1 2 2 0 0 -fill black -tags line/);
 
     my $scale = $frame->Scale(qw/-orient horizontal -length 284 -from 0
         -to 250 -tickinterval 50 -command/ => [\&hscale_width, $canvas]);
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/menus.pl' '/usr/local/src/work/Tk800/demos/demos/widget_lib/menus.pl'
Index: ./demos/demos/widget_lib/menus.pl
--- ./demos/demos/widget_lib/menus.pl	Tue Jul 27 20:20:16 1999
+++ ./demos/demos/widget_lib/menus.pl	Mon Apr 21 17:53:24 2003
@@ -159,8 +159,10 @@ sub menus {
     $menubar->bind('<<MenuSelect>>' => sub {
 	my $label = undef;
 	my $w = $Tk::event->W;
-	$label = $w->entrycget('active', -label);
-	$status_bar = $label;
+	eval {local $SIG{__DIE__};
+	      $label = $w->entrycget('active', -label);
+	      $status_bar = $label;
+	};
 	$TOP->idletasks;
     });
 
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/search.pl' '/usr/local/src/work/Tk800/demos/demos/widget_lib/search.pl'
Index: ./demos/demos/widget_lib/search.pl
--- ./demos/demos/widget_lib/search.pl	Tue Jul 27 20:20:17 1999
+++ ./demos/demos/widget_lib/search.pl	Fri Apr 25 15:59:34 2003
@@ -13,7 +13,7 @@ sub search {
     my($demo) = @_;
     $TOP = $MW->WidgetDemo(
         -name     => $demo,
-        -text     =>'',				      
+        -text     =>'',
         -title    => 'Text Demonstration - Search and Highlight',
         -iconname => 'search',
     );
@@ -55,13 +55,13 @@ sub search {
 	search_flash_matches $text,
             ['configure', 'search',
                 -background => '#ce5555', -foreground => 'white'], 800,
-            ['configure', 'search', 
+            ['configure', 'search',
                 -background => undef,     -foreground => undef],   200;
       } else {
 	search_flash_matches $text,
-            ['configure', 'search', 
+            ['configure', 'search',
                 -background => 'black',   -foreground => 'white'], 800,
-            ['configure', 'search', 
+            ['configure', 'search',
                -background => undef,      -foreground => undef],   200;
       }
 
@@ -94,7 +94,7 @@ sub search_flash_matches {
     my($w, $cmd1, $sleep1, $cmd2, $sleep2) = @_;
 
     $w->tag(@{$cmd1});
-    $w->after($sleep1, 
+    $w->after($sleep1,
 	      [\&search_flash_matches, $w, $cmd2, $sleep2, $cmd1, $sleep1]);
 
 } # end search_flash_matches
@@ -117,13 +117,13 @@ sub search_load_file {
     if (not open(F, "<$$file")) {
 	$MW->Dialog(
             -title  => 'File Not Found',
-            -text   => $OS_ERROR,
+            -text   => "$!: '$$file'",
             -bitmap => 'error',
         )->Show;
 	return;
     }
     $w->delete(qw/1.0 end/);
-    $bytes = read F, $buf, 10000;	# after all, it IS just an example
+    $bytes = read F, $buf, 10_000;	# after all, it IS just an example
     $w->insert('end', $buf);
     if ($bytes == 10000) {
 	$w->insert('end', "\n\n**************** File truncated at 10,000 bytes! ****************\n");
@@ -141,7 +141,7 @@ sub search_text {
     # Arguments:
     #
     # w -	The window in which to search.  Must be a text widget.
-    # string -	Reference to the string to search for.  The search is done 
+    # string -	Reference to the string to search for.  The search is done
     #           using exact matching only;  no special characters.
     # tag -	Tag to apply to each instance of a matching string.
 
@@ -149,13 +149,13 @@ sub search_text {
 
     return unless ref($string) && length($$string);
 
-    $w->tag('remove',  $tag, qw/0.0 end/);
+    $w->tagRemove($tag, qw/0.0 end/);
     my($current, $length) = ('1.0', 0);
-    
+
     while (1) {
 	$current = $w->search(-count => \$length, $$string, $current, 'end');
 	last if not $current;
-	$w->tag('add', $tag, $current, "$current + $length char");
+	$w->tagAdd($tag, $current, "$current + $length char");
 	$current = $w->index("$current + $length char");
     }
 
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/style.pl' '/usr/local/src/work/Tk800/demos/demos/widget_lib/style.pl'
Index: ./demos/demos/widget_lib/style.pl
--- ./demos/demos/widget_lib/style.pl	Sat Jul  8 18:09:52 2000
+++ ./demos/demos/widget_lib/style.pl	Fri Apr 25 16:20:17 2003
@@ -15,11 +15,13 @@ sub style {
         -iconname => 'style',
     );
 
-    $TOP->fontCreate(qw/C_small  -family courier   -size 10/);
-    $TOP->fontCreate(qw/C_big    -family courier   -size 14 -weight bold/);
-    $TOP->fontCreate(qw/C_vbig   -family helvetica -size 24 -weight bold/);
-    $TOP->fontCreate(qw/C_bold   -family courier   -size 12 -weight bold
-		     -slant italic/);
+    eval { # eval, in case fonts already exist
+	$TOP->fontCreate(qw/C_small  -family courier   -size 10/);
+	$TOP->fontCreate(qw/C_big    -family courier   -size 14 -weight bold/);
+	$TOP->fontCreate(qw/C_vbig   -family helvetica -size 24 -weight bold/);
+	$TOP->fontCreate(qw/C_bold   -family courier   -size 12 -weight bold
+			 -slant italic/);
+    };
 
     my $t = $TOP->Scrolled(qw/Text -setgrid true -width  70 -height 32
 			   -font normal -wrap word -scrollbars e/);
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widget_lib/vscale.pl' '/usr/local/src/work/Tk800/demos/demos/widget_lib/vscale.pl'
Index: ./demos/demos/widget_lib/vscale.pl
--- ./demos/demos/widget_lib/vscale.pl	Tue Jul 27 20:20:17 1999
+++ ./demos/demos/widget_lib/vscale.pl	Fri Apr 25 15:59:43 2003
@@ -19,10 +19,10 @@ sub vscale {
 
     my $canvas = $frame->Canvas(
         qw/-width 50 -height 50 -borderwidth 0 -highlightthickness 0/);
-    $canvas->create(qw/polygon 0 0 1 1 2 2 -fill SeaGreen3 -tags poly/);
-    $canvas->create(qw/line 0 0 1 1 2 2 0 0 -fill black -tags line/);
+    $canvas->createPolygon(qw/0 0 1 1 2 2 -fill SeaGreen3 -tags poly/);
+    $canvas->createLine(qw/0 0 1 1 2 2 0 0 -fill black -tags line/);
 
-    my $scale = $frame->Scale(qw/-orient vertical -length 284 -from 0 
+    my $scale = $frame->Scale(qw/-orient vertical -length 284 -from 0
         -to 250 -tickinterval 50 -command/ => [\&vscale_height, $canvas]);
     $scale->set(75);
 
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widtrib/Gedi.pl' '/usr/local/src/work/Tk800/demos/demos/widtrib/Gedi.pl'
Index: ./demos/demos/widtrib/Gedi.pl
--- ./demos/demos/widtrib/Gedi.pl	Sat Jan 15 13:26:40 2000
+++ ./demos/demos/widtrib/Gedi.pl	Mon Apr 21 17:53:24 2003
@@ -93,7 +93,7 @@ sub Gedi {
         -iconname         => 'GEDI',
     );
 
-
+$TOP->withdraw;
 
 $text_frame = $TOP->Frame->pack
 	(-anchor=>'nw', expand=>'yes', -fill => 'both'); # autosizing
@@ -106,7 +106,7 @@ $textwindow = $text_frame->Scrolled(
 	# once window shrinks below height
 	# and the line counters go off the screen.
 	# seems to be a problem with the Tk::pack command;
-	height => 40, 	 
+#	height => 40, 	 
 	-background => 'white',
 	-wrap=> 'none', 
 	-setgrid => 'true', # use this for autosizing
@@ -159,6 +159,15 @@ while(<DATA>)
 $textwindow->ResetUndo;
 
 $textwindow->CallNextGUICallback;
+
+# adjust height
+$TOP->update;
+my $menuheight = ($TOP->wrapper)[1];
+my $TOPheight = 30 + $TOP->reqheight + $menuheight;
+if ($TOP->screenheight < $TOPheight) {
+    $textwindow->GeometryRequest($textwindow->reqwidth, $textwindow->reqheight - ($TOPheight - $TOP->screenheight));
+}
+$TOP->deiconify;
 
 }
 
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widtrib/HList2.pl' '/usr/local/src/work/Tk800/demos/demos/widtrib/HList2.pl'
Index: ./demos/demos/widtrib/HList2.pl
--- ./demos/demos/widtrib/HList2.pl	Tue Jul 27 20:20:17 1999
+++ ./demos/demos/widtrib/HList2.pl	Mon Apr 21 17:53:24 2003
@@ -65,7 +65,6 @@ sub HList2 {
 	}
     };
     my $rnd_window = sub {
-	return undef; # XXX disable for now
 	my $yn = int(rand(10));
 	if ($yn == 3) {
 	    ('Button', 'Entry')[rand(2)];
@@ -88,7 +87,7 @@ sub HList2 {
 	    my $btn;
 	    my $style = $h->ItemStyle($style_type);
 	    if ($style_type eq 'window') {
-		$style->configure(-pady => 0, -padx => 0);
+		$style->configure(-pady => 0, -padx => 0, -anchor => "nw");
 		if ($window eq 'Button') {
 		    $btn = $h->Button
 		      (-text => 'Click me!',
gdiff -up '/usr/local/src/Tk800.024/demos/demos/widtrib/balloon.pl' '/usr/local/src/work/Tk800/demos/demos/widtrib/balloon.pl'
Index: ./demos/demos/widtrib/balloon.pl
--- ./demos/demos/widtrib/balloon.pl	Tue Jul 27 20:20:17 1999
+++ ./demos/demos/widtrib/balloon.pl	Wed Apr 23 00:10:29 2003
@@ -54,8 +54,11 @@ the mouse is over.
 
 END
 
-my $c1 = $top->Canvas(-height => 100, -width => 300, -bg => 'white')->pack(-padx => 8, -pady => 8);
-my $c2 = $top->Canvas(-height => 100, -width => 300, -bg => 'white')->pack(-padx => 8, -pady => 8);
+my $clbf = $top->Frame->pack;
+my $cf   = $clbf->Frame->pack(-side => "left");
+
+my $c1 = $cf->Canvas(-height => 100, -width => 300, -bg => 'white')->pack(-padx => 8, -pady => 8);
+my $c2 = $cf->Canvas(-height => 100, -width => 300, -bg => 'white')->pack(-padx => 8, -pady => 8);
 my $id = $c1->create('text', 10, 10,
 		     -anchor => 'nw',
 		     -text => "This is a canvas.  You can also attach\nballoons to specific items in a canvas");
@@ -69,6 +72,9 @@ $c2->create('text', 10, 10,
 	    -anchor => 'nw',
 	    -text => "Or you can attach the balloon\nto the canvas as a whole.");
 
+my $lb = $clbf->Listbox->pack(-side => "left");
+$lb->insert(qw/end one two three four/);
+
 # create the balloon widget
 my $b = $top->Balloon(-statusbar => $status);
 
@@ -141,6 +147,11 @@ $b->attach($c1,
 		   });
 $b->attach($c2,
 	   -msg => 'This balloon is attached to the canvas itself.',
+	  );
+
+$b->attach($lb,
+	   -balloonposition => 'mouse',
+	   -msg => [qw/1 2 3 4/],
 	  );
 
 # destroy the balloons when I am destroyed:
gdiff -up '/usr/local/src/Tk800.024/demos/widget' '/usr/local/src/work/Tk800/demos/widget'
Index: ./demos/widget
--- ./demos/widget	Sat Jul  8 18:09:52 2000
+++ ./demos/widget	Fri Apr 25 15:56:48 2003
@@ -1,7 +1,6 @@
 #!/usr/local/bin/perl -w
 
-require 5.004;
-
+use 5.005_03;
 use Tk 800.000;
 use lib Tk->findINC('demos/widget_lib');
 use Tk::widgets qw/Dialog ErrorDialog ROText/;
@@ -67,7 +66,7 @@ my $help = $menubar->cascade(qw/-label H
     ]);
 
 my $T = $MW->Scrolled('ROText',
-    -scrollbars => 'e',		
+    -scrollbars => 'e',
     -wrap       => 'word',
     -width      => 60,
     -height     => 30,
@@ -244,7 +243,7 @@ my $DIALOG_ABOUT = $MW->Dialog(
     -default_button => 'OK',
     -buttons        => ['OK'],
     -text           => "         widget\n\nPerl Version $]" .
-		       "\nTk Version $Tk::VERSION\n\n      2000/07/07",
+		       "\nTk Version $Tk::VERSION\n\n      2002/11/17",
 );
 $help->cget(-menu)->entryconfigure('About',
     -command => [$DIALOG_ABOUT => 'Show'],
@@ -497,9 +496,11 @@ defaults to the released user contribute
  # Stephen.O.Lidie@Lehigh.EDU, 2000/07/06, Lehigh University.
  #     Remove inswt() from widget and styles.pl to show the proper Perl/Tk
  #     idiom for inserting Text tags.  Various and sundry cleanups.
+ # sol0@lehigh.edu, 2002/11/17, Lehigh University Computing Center.
+ #     Update for Tk 8.4.x.
 
 =head1 AUTHOR
 
-Steve Lidie <Stephen.O.Lidie@Lehigh.EDU>
+Steve Lidie <sol0@Lehigh.EDU>
 
 =cut
gdiff -up '/usr/local/src/Tk800.024/lib/Tie/Watch.pm' '/usr/local/src/work/Tk800/lib/Tie/Watch.pm'
Index: ./lib/Tie/Watch.pm
--- ./lib/Tie/Watch.pm	Mon Sep 11 21:44:39 2000
+++ ./lib/Tie/Watch.pm	Sat Jun  7 20:46:30 2003
@@ -255,7 +255,7 @@ sub new {
     croak "Tie::Watch::new(): -variable is required." if not defined $variable;
 
     my($type, $watch_obj) = (ref $variable, undef);
-    if ($type =~ /SCALAR/) {
+    if ($type =~ /(SCALAR|REF)/) {
 	@arg_defaults{@scalar_callbacks} = (
 	    [\&Tie::Watch::Scalar::Destroy],  [\&Tie::Watch::Scalar::Fetch],
 	    [\&Tie::Watch::Scalar::Store]);
@@ -282,7 +282,7 @@ sub new {
     @ahsh{@margs} = @arg_defaults{@margs}; # fill in missing values
     normalize_callbacks \%ahsh;
 
-    if ($type =~ /SCALAR/) {
+    if ($type =~ /(SCALAR|REF)/) {
         $watch_obj = tie $$variable, 'Tie::Watch::Scalar', %ahsh;
     } elsif ($type =~ /ARRAY/) {
         $watch_obj = tie @$variable, 'Tie::Watch::Array',  %ahsh;
@@ -345,10 +345,10 @@ sub Unwatch {
 
     my $variable = $_[0]->{-variable};
     my $type = ref $variable;
-    my $copy = $_[0]->{-ptr} if $type !~ /SCALAR/;
+    my $copy = $_[0]->{-ptr} if $type !~ /(SCALAR|REF)/;
     my $shadow = $_[0]->{-shadow};
     undef $_[0];
-    if ($type =~ /SCALAR/) {
+    if ($type =~ /(SCALAR|REF)/) {
 	untie $$variable;
     } elsif ($type =~ /ARRAY/) {
 	untie @$variable;
gdiff -up '/usr/local/src/Tk800.024/myConfig' '/usr/local/src/work/Tk800/myConfig'
Index: ./myConfig
--- ./myConfig	Fri Mar 31 12:06:53 2000
+++ ./myConfig	Tue Apr 22 23:33:15 2003
@@ -340,7 +340,7 @@ if ($win_arch eq 'x') {
   $define .= " -D__PM__";
   $inc = "-I../pTk/mTk/xlib -I../../pTk/mTk/xlib -IpTk/mTk/xlib -ImTk/os2_rc";
   $xlib = "";                          # No library is needed
-} elsif ($IsWin32) {
+} elsif ($IsWin32 or $^O eq 'cygwin') {
   $inc = '-I$(TKDIR)/pTk/mTk/xlib';
 }
 
gdiff -up '/usr/local/src/Tk800.024/pTk/Xlib.excwin' '/usr/local/src/work/Tk800/pTk/Xlib.excwin'
Index: ./pTk/Xlib.excwin
--- ./pTk/Xlib.excwin	Fri Jul 13 12:39:41 2001
+++ ./pTk/Xlib.excwin	Mon Apr 21 18:06:14 2003
@@ -38,4 +38,5 @@ XSetTransientForHint
 XReadBitmapFile
 XOpenDisplay
 XLoadQueryFont
-XCreateWindow
\ No newline at end of file
+XCreateWindow
+XRectInRegion
gdiff -up '/usr/local/src/Tk800.024/pTk/mTk/generic/tkBind.c' '/usr/local/src/work/Tk800/pTk/mTk/generic/tkBind.c'
Index: ./pTk/mTk/generic/tkBind.c
Prereq:  1.4 
--- ./pTk/mTk/generic/tkBind.c	Fri Sep  8 17:31:51 2000
+++ ./pTk/mTk/generic/tkBind.c	Mon Apr 21 17:53:25 2003
@@ -5052,7 +5052,12 @@ InitKeymapInfo(dispPtr)
 	}
 	keysym = XKeycodeToKeysym(dispPtr->display, *codePtr, 0);
 	if (keysym == XK_Mode_switch) {
-	    dispPtr->modeModMask |= ShiftMask << (i/modMapPtr->max_keypermod);
+	    if (strstr(ServerVendor(dispPtr->display), "XFree86") &&
+		VendorRelease(dispPtr->display) == 3360) {
+	        dispPtr->modeModMask = 0x2000;
+	    } else {
+	        dispPtr->modeModMask |= ShiftMask << (i/modMapPtr->max_keypermod);
+	    }
 	}
 	if ((keysym == XK_Meta_L) || (keysym == XK_Meta_R)) {
 	    dispPtr->metaModMask |= ShiftMask << (i/modMapPtr->max_keypermod);
gdiff -up '/usr/local/src/Tk800.024/pTk/mTk/generic/tkBitmap.c' '/usr/local/src/work/Tk800/pTk/mTk/generic/tkBitmap.c'
Index: ./pTk/mTk/generic/tkBitmap.c
Prereq:  1.6 
--- ./pTk/mTk/generic/tkBitmap.c	Sat Mar 25 14:22:55 2000
+++ ./pTk/mTk/generic/tkBitmap.c	Thu Jun 19 05:11:37 2003
@@ -26,7 +26,7 @@
  * temporarily turn off that warning message.
  */
 
-#if defined(__WIN32__) || defined(_WIN32)
+#if (defined(__WIN32__) || defined(_WIN32)) && !defined(__GNUC__)
 #pragma warning (disable : 4305)
 #endif
 
@@ -43,7 +43,7 @@
 #include "warning.bmp"
 #include "tk.bmp"
 
-#if defined(__WIN32__) || defined(_WIN32)
+#if (defined(__WIN32__) || defined(_WIN32)) && !defined(__GNUC__)
 #pragma warning (default : 4305)
 #endif
 
gdiff -up '/usr/local/src/Tk800.024/pTk/mTk/generic/tkImgPhoto.c' '/usr/local/src/work/Tk800/pTk/mTk/generic/tkImgPhoto.c'
Index: ./pTk/mTk/generic/tkImgPhoto.c
Prereq:  1.4 
--- ./pTk/mTk/generic/tkImgPhoto.c	Tue Mar  5 14:55:48 2002
+++ ./pTk/mTk/generic/tkImgPhoto.c	Mon Apr 21 17:53:25 2003
@@ -3389,7 +3389,7 @@ MatchFileFormat(interp, chan, fileName, 
 	} else {
 	    Tcl_AppendResult(interp,
 		    "couldn't recognize data in image file \"",
-		    fileName, "\"", (char *) NULL);
+		    Tcl_GetStringFromObj(fileName, NULL), "\"", (char *) NULL);
 	}
 	return TCL_ERROR;
     }
gdiff -up '/usr/local/src/Tk800.024/pTk/mTk/generic/tkPlace.c' '/usr/local/src/work/Tk800/pTk/mTk/generic/tkPlace.c'
Index: ./pTk/mTk/generic/tkPlace.c
Prereq:  1.2 
--- ./pTk/mTk/generic/tkPlace.c	Sat Sep  9 15:13:15 2000
+++ ./pTk/mTk/generic/tkPlace.c	Mon Apr 21 17:53:25 2003
@@ -272,7 +272,7 @@ Tk_PlaceCmd(clientData, interp, argc, ar
 	}
 	if (slavePtr->flags & CHILD_REL_WIDTH) {
 	    Tcl_AppendElement(interp,"-relwidth");
-	    Tcl_IntResults(interp,1,1, slavePtr->relWidth);
+	    Tcl_DoubleResults(interp,1,1, slavePtr->relWidth);
 	} else {
 	    Tcl_AppendElement(interp,"-relwidth");
 	    Tcl_AppendElement(interp,"");
@@ -286,7 +286,7 @@ Tk_PlaceCmd(clientData, interp, argc, ar
 	}
 	if (slavePtr->flags & CHILD_REL_HEIGHT) {
 	    Tcl_AppendElement(interp,"-relheight");
-	    Tcl_IntResults(interp,1,1, slavePtr->relHeight);
+	    Tcl_DoubleResults(interp,1,1, slavePtr->relHeight);
 	} else {
 	    Tcl_AppendElement(interp,"-relheight");
 	    Tcl_AppendElement(interp,"");
gdiff -up '/usr/local/src/Tk800.024/pTk/mTk/generic/tkTextIndex.c' '/usr/local/src/work/Tk800/pTk/mTk/generic/tkTextIndex.c'
Index: ./pTk/mTk/generic/tkTextIndex.c
Prereq:  1.2 
--- ./pTk/mTk/generic/tkTextIndex.c	Mon Nov 15 15:59:27 1999
+++ ./pTk/mTk/generic/tkTextIndex.c	Mon Apr 21 17:53:25 2003
@@ -212,6 +212,8 @@ TkTextGetIndex(interp, textPtr, string, 
     int wantLast, result;
     char c;
 
+    if (*string == 0) goto error;
+
     /*
      *---------------------------------------------------------------------
      * Stage 1: check to see if the index consists of nothing but a mark
gdiff -up '/usr/local/src/Tk800.024/pTk/mTk/tixGeneric/tixDiStyle.c' '/usr/local/src/work/Tk800/pTk/mTk/tixGeneric/tixDiStyle.c'
Index: ./pTk/mTk/tixGeneric/tixDiStyle.c
--- ./pTk/mTk/tixGeneric/tixDiStyle.c	Fri Sep  8 17:58:24 2000
+++ ./pTk/mTk/tixGeneric/tixDiStyle.c	Tue Apr 22 22:56:37 2003
@@ -976,7 +976,7 @@ DItemStylePrintProc(clientData, tkwin, w
     Tix_DItemStyle *stylePtr = *((Tix_DItemStyle**)(widRec+offset));
     Arg result = NULL;
     if (stylePtr != NULL && !(stylePtr->base.flags & TIX_STYLE_DEFAULT)) {
-        LangSetObj(&result,LangObjectObj(stylePtr->base.interp,
+        LangSetArg(&result,LangObjectArg(stylePtr->base.interp,
                                          stylePtr->base.name));
     }
     return result;
gdiff -up '/usr/local/src/Tk800.024/pTk/mTk/unix/tkUnixWm.c' '/usr/local/src/work/Tk800/pTk/mTk/unix/tkUnixWm.c'
Index: ./pTk/mTk/unix/tkUnixWm.c
Prereq:  1.3 
--- ./pTk/mTk/unix/tkUnixWm.c	Sat Sep  9 09:32:55 2000
+++ ./pTk/mTk/unix/tkUnixWm.c	Fri May  2 19:26:06 2003
@@ -4301,8 +4301,6 @@ TkWmProtocolEventProc(winPtr, eventPtr)
  *
  * Side effects:
  *	WinPtr gets restacked  as specified by aboveBelow and otherPtr.
- *	This procedure doesn't return until the restack has taken
- *	effect and the ConfigureNotify event for it has been received.
  *
  *----------------------------------------------------------------------
  */
@@ -4317,155 +4315,43 @@ TkWmRestackToplevel(winPtr, aboveBelow, 
 				 * above or below *all* siblings. */
 {
     XWindowChanges changes;
-    XWindowAttributes atts;
     unsigned int mask;
-    Window window, dummy1, dummy2, vRoot;
-    Window *children;
-    unsigned int numChildren;
-    int i;
-    int desiredIndex = 0;	/* Initialized to stop gcc warnings. */
-    int ourIndex = 0;		/* Initialized to stop gcc warnings. */
-    unsigned long serial;
-    XEvent event;
-    int diff;
-    Tk_ErrorHandler handler;
     TkWindow *wrapperPtr;
 
+    memset(&changes, 0, sizeof(XWindowChanges));
     changes.stack_mode = aboveBelow;
-    changes.sibling = None;
     mask = CWStackMode;
-    if (winPtr->window == None) {
-	Tk_MakeWindowExist((Tk_Window) winPtr);
-    }
-    if (winPtr->wmInfoPtr->flags & WM_NEVER_MAPPED) {
-	/*
-	 * Can't set stacking order properly until the window is on the
-	 * screen (mapping it may give it a reparent window), so make sure
-	 * it's on the screen.
-	 */
-
-	TkWmMapWindow(winPtr);
-    }
-    wrapperPtr = winPtr->wmInfoPtr->wrapperPtr;
-    window = (winPtr->wmInfoPtr->reparent != None)
-	    ? winPtr->wmInfoPtr->reparent : wrapperPtr->window;
-    if (otherPtr != NULL) {
-	if (otherPtr->window == None) {
-	    Tk_MakeWindowExist((Tk_Window) otherPtr);
-	}
-	if (otherPtr->wmInfoPtr->flags & WM_NEVER_MAPPED) {
-	    TkWmMapWindow(otherPtr);
-	}
-	changes.sibling = (otherPtr->wmInfoPtr->reparent != None)
-		? otherPtr->wmInfoPtr->reparent
-		: otherPtr->wmInfoPtr->wrapperPtr->window;
-	mask = CWStackMode|CWSibling;
-    }
 
     /*
-     * Before actually reconfiguring the window, see if it's already
-     * in the right place.  If so then don't reconfigure it.  The
-     * reason for this extra work is that some window managers will
-     * ignore the reconfigure request if the window is already in
-     * the right place, causing a long delay in WaitForConfigureNotify
-     * while it times out.  Special note: if the window is almost in
-     * the right place, and the only windows between it and the right
-     * place aren't mapped, then we don't reconfigure it either, for
-     * the same reason.
+     * Make sure that winPtr and its wrapper window have been created.
      */
-
-    vRoot = winPtr->wmInfoPtr->vRoot;
-    if (vRoot == None) {
-	vRoot = RootWindowOfScreen(Tk_Screen((Tk_Window) winPtr));
+    if (winPtr->wmInfoPtr->flags & WM_NEVER_MAPPED) {
+	TkWmMapWindow(winPtr);
     }
-    if (XQueryTree(winPtr->display, vRoot, &dummy1, &dummy2,
-	    &children, &numChildren) != 0) {
-	/*
-	 * Find where our window is in the stacking order, and
-	 * compute the desired location in the stacking order.
-	 */
-
-	for (i = 0; i < numChildren; i++) {
-	    if (children[i] == window) {
-		ourIndex = i;
-	    }
-	    if (children[i] == changes.sibling) {
-		desiredIndex = i;
-	    }
-	}
-	if (mask & CWSibling) {
-	    if (aboveBelow == Above) {
-		if (desiredIndex < ourIndex) {
-		    desiredIndex += 1;
-		}
-	    } else {
-		if (desiredIndex > ourIndex) {
-		    desiredIndex -= 1;
-		}
-	    }
-	} else {
-	    if (aboveBelow == Above) {
-		desiredIndex = numChildren-1;
-	    } else {
-		desiredIndex = 0;
-	    }
-	}
+    wrapperPtr = winPtr->wmInfoPtr->wrapperPtr;
 
+    if (otherPtr != NULL) {
 	/*
-	 * See if there are any mapped windows between where we are
-	 * and where we want to be.
+	 * The window is to be restacked with respect to another toplevel.
+	 * Make sure it has been created as well.
 	 */
-
-	handler = Tk_CreateErrorHandler(winPtr->display, -1, -1, -1,
-		(Tk_ErrorProc *) NULL, (ClientData) NULL);
-	while (desiredIndex != ourIndex) {
-	    if ((XGetWindowAttributes(winPtr->display, children[desiredIndex],
-		    &atts) != 0) && (atts.map_state != IsUnmapped)) {
-		break;
-	    }
-	    if (desiredIndex < ourIndex) {
-		desiredIndex++;
-	    } else {
-		desiredIndex--;
-	    }
-	}
-	Tk_DeleteErrorHandler(handler);
-	XFree((char *) children);
-	if (ourIndex == desiredIndex) {
-	    return;
+	if (otherPtr->wmInfoPtr->flags & WM_NEVER_MAPPED) {
+	    TkWmMapWindow(otherPtr);
 	}
+	changes.sibling = otherPtr->wmInfoPtr->wrapperPtr->window;
+	mask |= CWSibling;
     }
 
     /*
-     * Reconfigure the window.  This tricky because of two things:
-     * (a) Some window managers, like olvwm, insist that we raise
-     *     or lower the toplevel window itself, as opposed to its
-     *     decorative frame.  Attempts to raise or lower the frame
-     *     are ignored.
-     * (b) If the raise or lower is relative to a sibling, X will
-     *     generate an error unless we work with the frames (the
-     *     toplevels themselves aren't siblings).
-     * Fortunately, the procedure XReconfigureWMWindow is supposed
-     * to handle all of this stuff, so be careful to use it instead
-     * of XConfigureWindow.
+     * Reconfigure the window.  Note that we use XReconfigureWMWindow
+     * instead of XConfigureWindow, in order to handle the case
+     * where the window is to be restacked with respect to another toplevel.  
+     * See [ICCCM] 4.1.5 "Configuring the Window" and XReconfigureWMWindow(3)
+     * for details.
      */
 
-#if 0
-    if (!(mask & CWSibling)) {
-	window = winPtr->window;
-    }
-#endif
-
-    serial = NextRequest(winPtr->display);
     XReconfigureWMWindow(winPtr->display, wrapperPtr->window,
 	    Tk_ScreenNumber((Tk_Window) winPtr), mask,  &changes);
-
-    /*
-     * Wait for the reconfiguration to complete.  If we don't wait, then
-     * the window may not restack for a while and the application might
-     * observe it before it has restacked.
-     */
-    WaitForConfigureNotify(winPtr, serial);
 }
 
 /*
gdiff -up '/usr/local/src/Tk800.024/pTk/mTk/win/tkWinCursor.c' '/usr/local/src/work/Tk800/pTk/mTk/win/tkWinCursor.c'
Index: ./pTk/mTk/win/tkWinCursor.c
Prereq:  1.2 
--- ./pTk/mTk/win/tkWinCursor.c	Mon Nov 15 15:59:31 1999
+++ ./pTk/mTk/win/tkWinCursor.c	Mon Apr 21 20:20:41 2003
@@ -115,6 +115,10 @@ TkGetCursorByName(interp, tkwin, arg)
 	cursorPtr->system = 0;
     }
     if (cursorPtr->winCursor == NULL) {
+        cursorPtr->winCursor = LoadCursorFromFile(string);
+	cursorPtr->system = 0;
+    }
+    if (cursorPtr->winCursor == NULL) {
 	ckfree((char *)cursorPtr);
 	Tcl_AppendResult(interp, "bad cursor spec \"", string, "\"",
 		(char *) NULL);
gdiff -up '/usr/local/src/Tk800.024/pTk/mTk/win/tkWinPort.h' '/usr/local/src/work/Tk800/pTk/mTk/win/tkWinPort.h'
Index: ./pTk/mTk/win/tkWinPort.h
Prereq:  1.3 
--- ./pTk/mTk/win/tkWinPort.h	Mon Mar 13 18:53:14 2000
+++ ./pTk/mTk/win/tkWinPort.h	Mon Apr 21 20:20:41 2003
@@ -51,7 +51,9 @@
 
 #define NBBY 8
 
+#ifndef OPEN_MAX
 #define OPEN_MAX 32
+#endif
 
 /*
  * The following define causes Tk to use its internal keysym hash table
gdiff -up '/usr/local/src/Tk800.024/pTk/ptkCanvGrid.c' '/usr/local/src/work/Tk800/pTk/ptkCanvGrid.c'
Index: ./pTk/ptkCanvGrid.c
Prereq:  1.2 
--- ./pTk/ptkCanvGrid.c	Sun Dec  5 18:05:17 1999
+++ ./pTk/ptkCanvGrid.c	Fri Apr 25 16:18:10 2003
@@ -509,21 +509,24 @@ DisplayGrid(canvas, itemPtr, display, dr
     ComputeGridBbox(canvas, gridPtr);    
 
     /* Clip grid to the scroll region */
-    if (cx < (double) (canvasPtr->scrollX1))
+    if (canvasPtr->regionArg != NULL)
      {
-      cx = (double) (canvasPtr->scrollX1);
-     }
-    if (cy < (double) (canvasPtr->scrollY1))
-     {
-      cy = (double) (canvasPtr->scrollY1);
-     }
-    if (mx > (double) (canvasPtr->scrollX2))
-     {
-      mx = (double) (canvasPtr->scrollX2);
-     }
-    if (my > (double) (canvasPtr->scrollY2))
-     {
-      my = (double) (canvasPtr->scrollY2);
+      if (cx < (double) (canvasPtr->scrollX1))
+       {
+  	cx = (double) (canvasPtr->scrollX1);
+       }
+      if (cy < (double) (canvasPtr->scrollY1))
+       {
+  	cy = (double) (canvasPtr->scrollY1);
+       }
+      if (mx > (double) (canvasPtr->scrollX2))
+       {
+  	mx = (double) (canvasPtr->scrollX2);
+       }
+      if (my > (double) (canvasPtr->scrollY2))
+       {
+  	my = (double) (canvasPtr->scrollY2);
+       }
      }
 
     /* Compute first grid point within the region to be drawn */
gdiff -up '/usr/local/src/Tk800.024/pod/Animation.pod' '/usr/local/src/work/Tk800/pod/Animation.pod'
Index: ./pod/Animation.pod
--- ./pod/Animation.pod	Sat Sep 29 19:48:16 2001
+++ ./pod/Animation.pod	Mon Apr 21 17:52:59 2003
@@ -12,7 +12,7 @@ Tk::Animation - Display sequence of Tk::
   use Tk::Animation
   my $img = $widget->Animation('-format' => 'gif', -file => 'somefile.gif');
 
-  $img->add_frames(@images);
+  $img->add_frame(@images);
 
   $img->start_animation($period);
   $img->stop_animation;
@@ -23,7 +23,7 @@ Tk::Animation - Display sequence of Tk::
 In the simple case when C<Animation> is passed a GIF89 style GIF with
 multiple 'frames', it will build an internal array of C<Photo> images.
 
-The C<add_frames> method adds images to the sequence. It is provided
+The C<add_frame> method adds images to the sequence. It is provided
 to allow animations to be constructed from separate images.
 All images must be C<Photo>s and should all be the same size.
 
gdiff -up '/usr/local/src/Tk800.024/pod/Balloon.pod' '/usr/local/src/work/Tk800/pod/Balloon.pod'
Index: ./pod/Balloon.pod
--- ./pod/Balloon.pod	Tue Nov  9 14:17:59 1999
+++ ./pod/Balloon.pod	Fri Apr 25 16:48:38 2003
@@ -34,6 +34,14 @@ Tk::Balloon - pop up help balloons.
 				},
 	      );
 
+    # Balloon attached to items in a listbox widget:
+    $b->attach($listbox, -balloonposition => 'mouse',
+			 -msg => ['first listbox element',
+				  '2nd listbox element',
+				  ...
+				 ],
+	      );
+
 =head1 DESCRIPTION
 
 B<Balloon> provides the framework to create and attach help
@@ -41,15 +49,15 @@ balloons to various widgets so that when
 widget for more than a specified amount of time, a help balloon is
 popped up.
 
-=head2 Balloons and Menus
+=head2 Balloons and Menus or Listboxes
 
-If the balloon is attached to a B<Menu> widget and the message arguments
-are array references, then each element in the array will be the
-message corresponding to a menu entry. The balloon message will then
-be shown for the entry which the mouse pauses over. Otherwise it is
-assumed that the balloon is to be attached to the B<Menu> as a whole.
-You can have separate status and balloon messages just like normal
-balloons.
+If the balloon is attached to a B<Menu> or B<Listbox> widget and the
+message arguments are array references, then each element in the array
+will be the message corresponding to a menu entry or listbox element.
+The balloon message will then be shown for the entry which the mouse
+pauses over. Otherwise it is assumed that the balloon is to be
+attached to the B<Menu> or B<Listbox> as a whole. You can have
+separate status and balloon messages just like normal balloons.
 
 =head2 Balloons and Canvases
 
@@ -62,6 +70,16 @@ assumed that the balloon is to be attach
 You can have separate status and balloon messages just like normal
 balloons.
 
+=head2 Balloon Position
+
+By default, the balloon pops up at the lower right side of the client.
+If it would extend outside the lower screen border, its positioned at the
+upper right side. If it would extend outside the right screen border
+it's shown on the lower left side of the client. If it would extend
+outside both the lower and the right screen border, it's positioned
+at the upper left side of the client. Thus, the little arrow always
+points to the attached client.
+
 =head1 OPTIONS
 
 B<Balloon> accepts all of the options that the B<Frame> widget
@@ -198,6 +216,10 @@ Detaches the specified I<widget> from th
 
 Destroys the specified balloon.
 
+=head1 ADVERTISED SUBWIDGETS
+
+The balloon label is advertised as C<message>.
+
 =head1 EXAMPLES
 
 See the balloon demo included with the widget demo script that came with
@@ -222,7 +244,10 @@ then the balloon will remain until you m
 
 =head1 BUGS
 
-Hopefully none, probably some.
+If using balloons attached to listbox entries or canvas items in a
+scrolled widget, then the subwidget have to be used:
+
+    $balloon->attach($w->Subwidget("scrolled"), -msg => ...);
 
 =head1 AUTHORS
 
@@ -232,6 +257,8 @@ B<Jason A. Smith> <smithj4@rpi.edu> adde
 other enhancements.
 
 B<Slaven Rezic> <eserte@cs.tu-berlin.de> added support for canvas items.
+
+B<Gerhard Petrowitsch> <gerhard@petrowitsch.de> added intelligent positioning
 
 =head1 HISTORY
 
gdiff -up '/usr/local/src/Tk800.024/pod/BrowseEntry.pod' '/usr/local/src/work/Tk800/pod/BrowseEntry.pod'
Index: ./pod/BrowseEntry.pod
--- ./pod/BrowseEntry.pod	Tue Nov  9 14:18:00 1999
+++ ./pod/BrowseEntry.pod	Mon Apr 21 21:50:11 2003
@@ -18,6 +18,12 @@ Tk::BrowseEntry - entry widget with popu
     ...
     $b->pack;
 
+=head1 SUPER-CLASS
+
+The C<BrowseEntry> class is derived from the C<Frame> class and
+inherits all the methods, options and subwidgets of its super-class.
+By default, options and methods are delegated to the entry subwidget.
+
 =head1 DESCRIPTION
 
 BrowseEntry is a poor man's ComboBox. It may be considered an
@@ -25,17 +31,25 @@ enhanced version of LabEntry which provi
 choices of the possible values that the Entry may
 take. BrowseEntry supports all the options LabEntry supports
 except B<-textvariable>. This is replaced by B<-variable>. Other
-options that BrowseEntry supports.
+options that BrowseEntry supports:
 
 =over 4
 
-=item B<-listwidth>
+=item B<-arrowimage>
 
-Specifies the width of the popup listbox.
+Specifies the image to be used in the arrow button beside the entry
+widget. The default is an downward arrow image in the file cbxarrow.xbm
 
-=item B<-variable>
+=item B<-autolimitheight>
 
-Specifies the variable in which the entered value is to be stored.
+If set to a true value, then the height of the listbox will be at most
+the number of entries in the list. The overall maximum of
+C<-listheight> still applies.
+
+=item B<-autolistwidth>
+
+If set to a true value, then the width of the listbox will match the
+width of the largest entry.
 
 =item B<-browsecmd>
 
@@ -44,6 +58,26 @@ popped up listbox. It is passed the widg
 entry selected. This function is called after the entry variable
 has been assigned the value.
 
+=item B<-browse2cmd>
+
+Like C<-browsecmd>, but the callback is called with the listbox index
+instead of the selected value.
+
+=item B<-buttontakefocus>
+
+Set the C<-takefocus> option of the button subwidget.
+
+=item B<-choices>
+
+Specifies the list of choices to pop up.  This is a reference to an
+array of strings specifying the choices.
+
+=item B<-colorstate>
+
+The state of the widget is reflected by color. A non-editable entry
+widget will get a light gray background, while an editable entry will
+be almost white. [This may change]
+
 =item B<-listcmd>
 
 Specifies the function to call when the button next to the entry
@@ -51,15 +85,13 @@ is pressed to popup the choices in the l
 popping up the listbox, so can be used to populate the entries in
 the listbox.
 
-=item B<-arrowimage>
+=item B<-listheight>
 
-Specifies the image to be used in the arrow button beside the entry
-widget. The default is an downward arrow image in the file cbxarrow.xbm
+Set the height of the listbox. See also C<-autolimitheight>.
 
-=item B<-choices>
+=item B<-listwidth>
 
-Specifies the list of choices to pop up.  This is a reference to an
-array of strings specifying the choices.
+Specifies the width of the popup listbox.
 
 =item B<-state>
 
@@ -69,6 +101,19 @@ and the arrow button won't activate.  If
 entry may not be edited, but it may be changed by choosing a value
 from the popup listbox.  normal is the default.
 
+=item B<-style>
+
+Set the "style" of the widget. Permitted values are C<MSWin32> and
+C<unix>. By default C<-style> is set to the current platform. Widgets
+with the C<unix> style will look like a normal C<BrowseEntry> widget,
+whereas with the C<MSWin32> style the arrow will look close to the
+Windows' standard combobox widget, while moving the mouse the entries
+will be highlighted, and probably includes other changes.
+
+=item B<-variable>
+
+Specifies the variable in which the entered value is to be stored.
+
 =back
 
 =head1 METHODS
@@ -84,8 +129,67 @@ then becomes available as one of the cho
 
 Deletes items from I<index1> to I<index2>.
 
+=item B<get>
+
+The get method is delegated to the choices listbox.
+
+=back
+
+=head1 ADVERTISED WIDGETS
+
+The following widgets are advertised:
+
+=over
+
+=item entry
+
+The entry widget.
+
+=item arrow
+
+The button with the arrow image.
+
+=item choices
+
+The toplevel widget containing the choice listbox.
+
+=item slistbox
+
+The scrolled listbox with the choices.
+
+=back
+
+=head1 SUBCLASSING
+
+To make subclassing easier, the following methods may be overridden to
+use other standard widgets in composing the mega widget:
+
+=over
+
+=item LabEntryWidget
+
+A widget class compatible with Tk::LabEntry used for the entry.
+
+=item ButtonWidget
+
+A widget class compatible with Tk::Button used for the arrow button.
+
+=item ListboxWidget
+
+A widget class compatible with Tk::Listbox used for the choices
+listbox.
+
 =back
 
+For example to use a C<NumEntry> widget (from the Tk-GBARR CPAN
+distribution) instead of the normal C<Entry> widget:
+
+    package Tk::NumBrowseEntry;
+    use base qw(Tk::BrowseEntry);
+    use Tk::NumEntry;
+    Construct Tk::Widget 'NumBrowseEntry';
+    sub LabEntryWidget { "NumEntry" }
+
 =head1 BUGS
 
 BrowseEntry should really provide more of the ComboBox options.
@@ -95,6 +199,8 @@ BrowseEntry should really provide more o
 B<Rajappa Iyer> rsi@earthling.net
 
 B<Chris Dean> ctdean@cogit.com made additions.
+
+More additions by B<Slaven Rezic> slaven@rezic.de
 
 This code was inspired by ComboBox.tcl in Tix4.0 by Ioi Lam and
 bears more than a passing resemblance to ComboBox code. This may
gdiff -up '/usr/local/src/Tk800.024/pod/Dialog.pod' '/usr/local/src/work/Tk800/pod/Dialog.pod'
Index: ./pod/Dialog.pod
--- ./pod/Dialog.pod	Tue Nov  9 14:18:00 1999
+++ ./pod/Dialog.pod	Fri Apr 25 15:54:19 2003
@@ -19,16 +19,17 @@ S<    >I<$dialog> = I<$parent>-E<gt>B<Di
 
 =head1 DESCRIPTION
 
-This procedure is part of the Tk script library - its arguments describe a
-dialog box.
-After creating a dialog box, B<Dialog> waits for the user to
-select one of the buttons either by clicking on the button with the
-mouse or by typing return to invoke the default button (if any).
-Then it returns the text string of the selected button.
+This procedure is part of the Tk script library - its arguments
+describe a dialog box.  After creating a dialog box, B<Dialog> waits
+for the user to select one of the Buttons either by clicking on the
+Button with the mouse or by typing return to invoke the default Button
+(if any).  Then it returns the text string of the selected Button.
 
 While waiting for the user to respond, B<Dialog> sets a local
 grab.  This prevents the user from interacting with the application
-in any way except to invoke the dialog box.  See B<Show()> method.
+in any way except to invoke the dialog box.  See the B<Show()> method.
+
+=head1 OPTIONS
 
 The following option/value pairs are supported:
 
@@ -40,23 +41,22 @@ Text to appear in the window manager's t
 
 =item B<-text>
 
-Message to appear in the top portion of the dialog box.
+Message to appear in the top portion of the Dialog.
 
 =item B<-bitmap>
 
-If non-empty, specifies a bitmap to display in the top portion of
-the dialog, to the left of the text.
-If this is an empty string then no bitmap is displayed in the dialog.
+If non-empty, specifies a bitmap to display in the top portion of the
+Dialog, to the left of the text.  If this is an empty string then no
+bitmap is displayed in the Dialog.
 
 =item B<-default_button>
 
-Text label string of the button that displays the default ring.
+Text label string of the Button that displays the default ring.
 
 =item B<-buttons>
 
-A reference to a list of button label strings.
-Each I<string> specifies text to display in a button,
-in order from left to right.
+A reference to a list of Button label strings.  Each I<string>
+specifies text to display in a Button, in order from left to right.
 
 =back
 
@@ -64,11 +64,34 @@ in order from left to right.
 
 =over 4
 
-=item C<$answer = $dialog-E<gt>B<Show>(?-global?);>
+=item I<$answer> = $dialog-E<gt>B<Show(>?-global?B<)>;
 
-This method displays the dialog, waits for the user's response, and stores
-the text string of the selected button in C<$answer>.  If I<-global> is
+This method displays the Dialog, waits for the user's response, and stores
+the text string of the selected Button in I<$answer>.  If I<-global> is
 specified a global (rather than local) grab is performed.
+
+The actual Dialog is shown using the B<Popup> method. Any other
+options supplied to B<Show> are passed to B<Popup>, and can be used to
+position the Dialog on the screen. Please read Tk::Popup for details.
+
+=back
+
+=head1 ADVERTISED WIDGETS
+
+Because Tk::Dialog is a subclass of Tk::DialogBox it inherits all the
+advertised subwidgets of its superclass: e.g. "B_button-text", where
+'button-text' is a Button's -text value. Additionally, Tk::Dialog
+advertises:
+
+=over 4
+
+=item B<message>
+
+The dialog's Label widget containing the message text.
+
+=item B<bitmap>
+
+The dialog's Label widget containing the bitmap image.
 
 =back
 
gdiff -up '/usr/local/src/Tk800.024/pod/DialogBox.pod' '/usr/local/src/work/Tk800/pod/DialogBox.pod'
Index: ./pod/DialogBox.pod
--- ./pod/DialogBox.pod	Tue Nov  9 14:18:00 1999
+++ ./pod/DialogBox.pod	Fri Apr 25 15:42:51 2003
@@ -19,32 +19,35 @@ Tk::DialogBox - create and manipulate a 
 =head1 DESCRIPTION
 
 B<DialogBox> is very similar to B<Dialog> except that it allows
-any widget in the top frame. B<DialogBox> creates two
-frames---"top" and "bottom". The bottom frame shows all the
-specified buttons, lined up from left to right. The top frame acts
+any widget in the top Frame. B<DialogBox> creates two
+Frames, I<top> and I<bottom>. The bottom Frame shows all the
+specified Buttons, lined up from left to right. The top Frame acts
 as a container for all other widgets that can be added with the
-B<add()> method. The non-standard options recognized by
-B<DialogBox> are as follows:
+B<add()> method.
+
+=head1 OPTIONS
+
+The options recognized by B<DialogBox> are as follows:
 
 =over 4
 
 =item B<-title>
 
-Specify the title of the dialog box. If this is not set, then the
+Specify the title of the DialogBox. If this is not set, then the
 name of the program is used.
 
 =item B<-buttons>
 
-The buttons to display in the bottom frame. This is a reference to
-an array of strings containing the text to put on each
-button. There is no default value for this. If you do not specify
-any buttons, no buttons will be displayed.
+The button names to display in the bottom Frame. This is a reference
+to an array of strings containing the text to put on each
+Button. There is no default value for this. If you do not specify any
+button names, no Buttons are displayed.
 
 =item B<-default_button>
 
-Specifies the default button that is considered invoked when user
-presses <Return> on the dialog box. This button is highlighted. If
-no default button is specified, then the first element of the
+Specifies the default Button that is considered invoked when user
+presses <Return> on the DialogBox. This Button is highlighted. If
+no default Button is specified, then the first element of the
 array whose reference is passed to the B<-buttons> option is used
 as the default.
 
@@ -59,29 +62,54 @@ B<DialogBox> supports only two methods a
 =item B<add(>I<widget>, I<options>B<)>
 
 Add the widget indicated by I<widget>. I<Widget> can be the name
-of any Tk widget (standard or contributed). I<Options> are the
-options that the widget accepts. The widget is advertized as a
-subwidget of B<DialogBox>.
-
-=item B<Show(>I<grab>B<)>
-
-Display the dialog box, until user invokes one of the buttons in
-the bottom frame. If the grab type is specified in I<grab>, then
-B<Show> uses that grab; otherwise it uses a local grab. Returns
-the name of the button invoked.
+of any Tk widget (standard or contributed). I<options> are the
+options that the widget accepts. The widget is advertised as a
+subwidget of B<DialogBox>. The first character of I<widget> is
+lower-cased and used as the advertised name.
+
+=item B<Show(>I<?-global?>B<)>
+
+Displays the Dialog until the user invokes one of the Buttons in the
+bottom Frame. If the grab type I<-global> is specified, then B<Show>
+uses that grab; otherwise it defaults to a local grab. Returns the
+name of the Button invoked.
+
+The actual Dialog is shown using the B<Popup> method. Any other
+options supplied to B<Show> are passed to B<Popup>, and can be used to
+position the Dialog on the screen. Please read L<Tk::Popup> for
+details.
 
 =back
 
+=head1 ADVERTISED WIDGETS
+
+=over 4
+
+=item B<top>
+
+The subwidget reference to the top half of the DialogBox widget, the Frame
+containing widgets added by the B<add> method.
+
+=item B<bottom>
+
+The subwidget reference to the bottom half of the DialogBox widget, the Frame
+containing the Button widgets.
+
+=item B<B_"button-text">
+
+Individual subwidget references to the Buttons in the DialogBox widget. The
+subwidget name is the string I<B_> concatenated with the Button's -text
+value.
+
 =head1 BUGS
 
 There is no way of removing a widget once it has been added to the
-top frame.
+top frame, unless you access the I<top> subwidget and go through the
+child widgets.
 
-There is no control over the appearance of the buttons in the
-bottom frame nor is there any way to control the placement of the
-two frames with respect to each other e.g. widgets to the left,
-buttons to the right instead of widgets on the top and buttons on
-the bottom always.
+There is no control over the appearance of the Buttons in the
+bottom Frame nor is there any way to control the placement of the
+two Frames with respect to each other.
 
 =head1 AUTHOR
 
gdiff -up '/usr/local/src/Tk800.024/pod/Error.pod' '/usr/local/src/work/Tk800/pod/Error.pod'
Index: ./pod/Error.pod
--- ./pod/Error.pod	Tue Nov  9 14:18:00 1999
+++ ./pod/Error.pod	Fri Apr 25 15:08:24 2003
@@ -77,13 +77,47 @@ any remaining errors are skipped without
 The B<Tk> module includes a default B<Tk::Error> subroutine
 that simply reports the error on stderr.
 
-An alternate definition is provided via :
+=head1 Tk::ErrorDialog
+
+An alternate definition is provided via:
 
 S<    >C<require Tk::ErrorDialog;>
 
 that posts a dialog box containing the error message and offers
 the user a chance to see a stack trace showing where the
 error occurred.
+
+This is an OO implementation of the Tcl/Tk command B<bgerror>, with a
+twist: since there is only one B<ErrorDialog> widget, you aren't required
+to invoke the constructor to create it; it will be created
+automatically when the first background error occurs.  However, in
+order to configure the I<-cleanupcode> and I<-appendtraceback>
+B<ErrorDialog> options you must call the constructor and create it
+manually.
+
+The B<ErrorDialog> object essentially consists of two subwidgets: a
+B<Dialog> widget to display the background error and a B<Text> widget
+for the traceback information.  If required, you can invoke various
+widget methods to customize these subwidgets - their advertised names
+are described below.
+
+S<    >I<$mw>-E<gt>B<ErrorDialog>(-cleanupcode => I<code>, -appendtraceback => I<bool>);
+
+$mw is a window reference.
+
+I<code> is a CODE reference if special post-background error
+processing is required (default is undefined). The callback subroutine
+is called with @_ having the same arguments that B<Tk::Error> was
+invoked with.
+
+I<bool> is a boolean indicating whether or not to append successive
+tracebacks (default is 1, do append).
+
+=head2 Advertised ErrorDialog widgets
+
+I<error_dialog> is the Dialog widget reference.
+
+I<text> is the Text widget reference containing the traceback information.
 
 =head1 BUGS
 
gdiff -up /dev/null '/usr/local/src/work/Tk800/pod/FBox.pod'
Index: ./pod/FBox.pod
--- ./pod/FBox.pod	Thu Jan  1 01:00:00 1970
+++ ./pod/FBox.pod	Mon Apr 21 17:53:09 2003
@@ -0,0 +1,71 @@
+=head1 NAME
+
+Tk::FBox - a file dialog
+
+=for pm Tk/FBox.pm
+
+=for category Popups and Dialogs
+
+=head1 SYNOPSIS
+
+    use Tk::FBox;
+    $file = $mw->FBox(...)->Show;
+
+=head1 DESCRIPTION
+
+C<Tk::FBox> is the dialog implementation behind the C<getOpenFile> and
+C<getSaveFile> method calls in the Unix/X11 world. As such, it
+supports all options for these methods and additionally:
+
+=over
+
+=item -sortcmd => sub { $_[0] cmp $_[1] }
+
+Specified a callback for changing the sorting of the icons in the
+C<IconList> widget. By default, perl's C<cmp> operator will be used.
+
+From the source code:
+
+  # Using -sortcmd is really strange :-(
+  # $top->getOpenFile(-sortcmd => sub { package Tk::FBox; uc $b cmp uc $a});
+  # or, un-perlish, but useable (now activated in code):
+  # $top->getOpenFile(-sortcmd => sub { uc $_[1] cmp uc $_[0]});
+
+This is an experimental option and subject to change.
+
+=item -type => $type
+
+Type should be "open" (default) or "save".
+
+=item -filter => $val
+
+A filter to restrict the directories and files in the icon list. If
+specified as a glob pattern, then only B<files> will be filtered by
+the pattern. If specified as a subroutine, then this subroutine will
+be called for every file and directory and should return a true value,
+if the argument should be accepted for the icon list. The arguments of
+this subroutine are: I<FBox widget reference>, I<basename of file>,
+and I<directory name>.
+
+The subroutine form of this option is experimental.
+
+=item -force => $bool
+
+If true, then there will be no dialog if a file already exists.
+
+=back
+
+=head1 COPYRIGHT
+
+The original tkfbox.tcl from Tcl/Tk is:
+
+Copyright (c) 1994-1996 Sun Microsystems, Inc.
+
+See the file "license.terms" for information on usage and redistribution
+of this file, and for a DISCLAIMER OF ALL WARRANTIES.
+
+Translated to Perl/Tk by Slaven Rezic <slaven@rezic.de>.
+
+=head1 SEE ALSO
+
+Tk::getOpenFile, Tk::IconList.
gdiff -up /dev/null '/usr/local/src/work/Tk800/pod/IconList.pod'
Index: ./pod/IconList.pod
--- ./pod/IconList.pod	Thu Jan  1 01:00:00 1970
+++ ./pod/IconList.pod	Mon Apr 21 17:53:09 2003
@@ -0,0 +1,82 @@
+=head1 NAME
+
+Tk::IconList - an icon list widget
+
+=for pm Tk/IconList.pm
+
+=for category Derived Widgets
+
+=head1 SYNOPSIS
+
+    use Tk::IconList;
+    $il = $mw->IconList(-browsecmd => sub { ... },
+                        -command   => sub { ... })->pack;
+    $il->Add($icon1, $text1);
+    $il->Add($icon2, $text2);
+    $il->Arrange;
+    ...
+    $il->DeleteAll;
+
+=head1 DESCRIPTION
+
+=head2 OPTIONS
+
+=over
+
+=item -browsecmd
+
+=item -command
+
+=item -font
+
+-item -foreground|-fg
+
+=back
+
+=head2 METHODS
+
+=over 4
+
+=item DeleteAll
+
+Deletes all the items inside the canvas subwidget and reset the IconList's
+state.
+
+=item Add($image, $text)
+
+Adds an icon into the IconList with the designated image and text.
+
+=item Arrange
+
+Places the icons in a column-major arrangement.
+
+=item Get
+
+Return the selected item.
+
+=item Invoke
+
+Gets called when the user invokes the IconList (usually by double-clicking
+or pressing the Return key) (internal method).
+
+=item See($tag)
+
+If the item is not (completely) visible, scroll the canvas so that it
+becomes visible (internal method).
+
+=back
+
+=head1 COPYRIGHT
+
+The original tkfbox.tcl from Tcl/Tk is:
+
+Copyright (c) 1994-1996 Sun Microsystems, Inc.
+
+See the file "license.terms" for information on usage and redistribution
+of this file, and for a DISCLAIMER OF ALL WARRANTIES.
+
+Translated to Perl/Tk by Slaven Rezic <slaven@rezic.de>.
+
+=head1 SEE ALSO
+
+Tk::FBox.
gdiff -up '/usr/local/src/Tk800.024/pod/LabFrame.pod' '/usr/local/src/work/Tk800/pod/LabFrame.pod'
Index: ./pod/LabFrame.pod
--- ./pod/LabFrame.pod	Tue Nov  9 14:18:00 1999
+++ ./pod/LabFrame.pod	Mon Apr 21 17:53:09 2003
@@ -1,4 +1,3 @@
-
 =head1 NAME
 
 Tk::LabFrame - labeled frame.
@@ -28,6 +27,14 @@ Additional options of B<LabFrame> are:
 
 =over 4
 
+=item B<-font> =E<gt> I<font>
+
+Specifies the label's font
+
+=item B<-foreground> =E<gt> I<color>
+
+Specifies the label's foreground color
+
 =item B<-label> =E<gt> I<text>
 
 The text of the label to be placed with the Frame.
@@ -41,6 +48,33 @@ creates a grooved frame around the centr
 near the northwest corner such that it appears to "overwrite" the
 groove.
 
+=item B<-labelvariable> =E<gt> I<scalar_ref>
+
+Specifies a reference to a variable and used as an 
+alternative to -label. If the value of the variable changes,
+then the widget will be updated automatically to reflect the
+change. Used like -textvariable.
+
+=back
+
+=head1 ADVERTISED SUBWIDGETS
+
+See L<Tk::mega/"Subwidget"> how to use advertised widgets.
+
+=over 4
+
+=item I<border>
+
+  Frame used to display the border
+
+=item I<frame>
+
+  Frame used to create new LabFrame children. 
+
+=item I<label>
+
+  Label used for displaying text
+
 =back
 
 =head1 EXAMPLE
@@ -74,4 +108,3 @@ distribution by Ioi Lam. The code may be
 terms as Perl.
 
 =cut
-
gdiff -up '/usr/local/src/Tk800.024/pod/NoteBook.pod' '/usr/local/src/work/Tk800/pod/NoteBook.pod'
Index: ./pod/NoteBook.pod
--- ./pod/NoteBook.pod	Tue Nov  9 14:18:00 1999
+++ ./pod/NoteBook.pod	Wed Apr 23 00:22:11 2003
@@ -46,6 +46,34 @@ The amount of internal horizontal paddin
 
 The amount of internal vertical padding around the pages.
 
+=item B<-backpagecolor>
+
+The background color of the tabs and back page.
+
+=item B<-disabledforeground>
+
+XXX
+
+=item B<-focuscolor>
+
+The color of the focus border around the tabs.
+
+=item B<-font>
+
+The font of the tab labels.
+
+=item B<-inactivebackground>
+
+XXX
+
+=item B<-tabpadx>
+
+Horizonzal padding around the tab label.
+
+=item B<-tabpady>
+
+Vertical padding around the tab label.
+
 =back
 
 =head1 METHODS
@@ -142,6 +170,11 @@ the values accepted in the B<add> method
 Like configure for the page indicated by I<pageName>. I<Options> may
 be any of the options accepted by the B<add> method.
 
+=item B<pages>
+
+Returns a list consisting of the names of all currently defined
+pages, i.e., those created with the B<add> method.
+
 =item B<raise(>I<pageName>B<)>
 
 Raise the page identified by I<pageName>.
@@ -149,6 +182,35 @@ Raise the page identified by I<pageName>
 =item B<raised()>
 
 Returns the name of the currently raised page.
+
+=item B<geometryinfo>
+
+Return the dimensions of the tab area.
+
+=item B<identify(>I<x>,I<y>B<)>
+
+Identify the tab's page name under the specified coordinates. Return
+an empty string if there's no tab.
+
+=item B<info(E<quot>pagesE<quot>)>
+
+Return a list of all pages.
+
+=item B<info(E<quot>focusE<quot>)>
+
+Return the page name of the tab with the current focus.
+
+=item B<info(E<quot>focusnextE<quot>)>
+
+Return the page name of the tab which would receive the next focus.
+
+=item B<info(E<quot>focusprevE<quot>)>
+
+Return the page name of the tab which had the previous focus.
+
+=item B<info(E<quot>activeE<quot>)>
+
+Return the page name of the active tab.
 
 =back
 
gdiff -up /dev/null '/usr/local/src/work/Tk800/pod/Popup.pod'
Index: ./pod/Popup.pod
--- ./pod/Popup.pod	Thu Jan  1 01:00:00 1970
+++ ./pod/Popup.pod	Fri Apr 25 15:36:47 2003
@@ -0,0 +1,89 @@
+
+=head1 NAME
+
+Tk::Wm::Popup - popup dialog windows.
+
+=for pm Tk/Wm.pm
+
+=for category Tk Toplevel widgets
+
+=head1 SYNOPSIS
+
+ $dialog->Popup(qw/
+     -popover    => 'cursor' | $widget | undef,
+     -overanchor => c | n | ne | e | se | s | sw | w | nw,
+     -popanchor  => c | n | ne | e | se | s | sw | w | nw,
+ /);
+
+=head1 DESCRIPTION
+
+You've probably had occasion to use a Dialog (or DialogBox)
+widget. These widgets are derived from a Toplevel (which is a subclass
+of Tk::Wm, the window manager) and spend most of their time in a
+withdrawn state. It's also common to use Toplevels as containers for
+custom built popup windows.  Menus, too, are dialogs derived from the
+window manager class. For this discussion, we'll use the simple term
+I<dialog> to refer any widget that pops up and awaits user
+interaction, whether it be a Menu, a special purpose Toplevel, or any
+of the dialog-type widgets, including, but not limited to, ColorEditor,
+Dialog, DialogBox, ErrorDialog, FileSelect, FBox, getOpenFile and
+getSaveFile.
+
+When it's time to display these dialogs, we call the Perl/Tk
+window manager B<Popup> method. B<Popup> accepts three special purpose
+options that specify placement information in high-level terms rather
+than numerical coordinates. It is B<Popup>'s responsibility to take
+our human specifications and turn them into actual screen
+coordinates before displaying the dialog.
+
+We can direct the dialog to appear in two general locations, either
+over another window (e.g. the root window (screen) or a particular
+widget), or over the cursor. This is called the I<popover
+location>. Once we've made this decision we can further refine the
+exact placement of the dialog relative to the popover location by
+specifying the intersection of two I<anchor points>. The I<popanchor
+point> is associated with the dialog and the I<overanchor point> is
+associated with the popover location (whether it be a window or the
+cursor). The point where the two anchor points coincide is the I<popup
+locus>. Anchor points are string values and can be I<c> (for center),
+or any of the eight cardinal compass points: I<n>, I<ne>, I<e>, I<se>,
+I<s>, I<sw>, I<w> or I<nw>.
+
+For example, if I<-popover> specifies a widget, I<-popanchor> is I<sw>,
+and I<-overanchor> is I<ne>, the the dialog's southwest corner pops up
+at the widget's northeast corner.
+
+=head1 OPTIONS
+
+The options recognized by B<Popup> are as follows:
+
+=over 4
+
+=item B<-popover>
+
+Specifies whether the dialog "pops over" a window or the cursor. 
+It may be the string I<cursor>, a widget reference, or undef for the 
+root window.
+
+=item B<-popanchor>
+
+Specifies the anchor point of the dialog.  For instance, if I<e> is
+specified, the right side of the dialog is the anchor.
+
+=item B<-overanchor>
+
+Specifies where the dialog should anchor relative to the popover
+location. For instance, if I<e> is specified the dialog appears over
+the right side of the popover location and if it's I<ne> the the
+dialog is positioned at the upper-right corner of the popover location.
+
+=back
+
+=head1 AUTHOR
+
+Nick Ing-Simmons, Steve Lidie
+
+This code is distributed under the same terms as Perl.
+
+=cut
+
gdiff -up '/usr/local/src/Tk800.024/pod/Toplevel.pod' '/usr/local/src/work/Tk800/pod/Toplevel.pod'
Index: ./pod/Toplevel.pod
--- ./pod/Toplevel.pod	Tue Nov  9 14:18:00 1999
+++ ./pod/Toplevel.pod	Mon Apr 21 17:53:15 2003
@@ -108,6 +108,10 @@ This option is special in that it may no
 database, and it may not be modified with the B<configure>
 method.
 
+=item Switch:	B<-title>
+
+Specifies the title of the toplevel window.
+
 =item Name:	B<use>
 
 =item Class:	B<Use>
gdiff -up '/usr/local/src/Tk800.024/pod/after.pod' '/usr/local/src/work/Tk800/pod/after.pod'
Index: ./pod/after.pod
--- ./pod/after.pod	Sat Feb 19 14:01:05 2000
+++ ./pod/after.pod	Fri Apr 25 15:54:18 2003
@@ -25,6 +25,8 @@ S<  >I<$id> = I<$widget>-E<gt>B<afterIdl
 
 S<  >I<$widget>-E<gt>B<afterInfo>?(I<$id>)?
 
+S<  >I<$id>-E<gt>B<time>(?I<delay>?)
+
 =head1 DESCRIPTION
 
 This method is used to delay execution of the program or to execute
@@ -35,13 +37,42 @@ and callbacks are associated with I<$wid
 when the widget is destroyed. An almost identical interface, but without
 automatic cancel, and without repeat is provided via Tk::after method.
 
+=head2 Internal Details
+
 The internal Tk::After class has the following synopsis:
 
-  $id = Tk::After->new($widget,$time,'once',callback);
-  $id = Tk::After->new($widget,$time,'repeat',callback);
+  $id = Tk::After->new($widget, tid, $time, 'once',   callback);
+  $id = Tk::After->new($widget, tid, $time, 'repeat', callback);
   $id->cancel;
+  $id->time(?delay?);
+
+$id is a Tk::After object, an array of 5 elements:	
+
+I<$widget> is the parent widget reference.
+
+I<tid> is the internal timer id, a unique string.
+
+I<$time> is the string 'idle', representing an idle queue timer, or a
+integer millisecond value.
+ 
+I<once> or I<repeat> specifies whether the timer is a one-time B<after>
+event, or a repeating B<repeat> event.
+
+I<callback> specifies a Perl/Tk Tk::Callback object.
+
+=head1 Changing a B<repeat> timer interval 
+
+It's posible to change a B<repeat> timer's delay value, or even cancel
+any timer, using the B<time> method. If I<delay> is specified and
+non-zero, a new timer delay is established.  If I<delay> is zero the
+timer event is canceled just as if I<$id>-E<gt>B<cancel> were invoked.
+In all cases the current millisecond timer delay is returned.
+
+Note: the new timer delay will take effect on the I<subsequent> timer
+event - this command will not cancel the pending timer event and
+re-issue it with the new delay time. 
 
-The B<after> method has several forms as follows:
+=head1 The after() method has several forms as follows:
 
 =over 4
 
@@ -73,7 +104,7 @@ to be executed in a futher I<ms>, and so
 
 =item I<$widget>-E<gt>B<afterCancel>(I<$id>)
 
-=item I<$id>-E<gt>cancel
+=item I<$id>-E<gt>B<cancel>
 
 Cancels the execution of a delayed command that
 was previously scheduled.
@@ -104,15 +135,18 @@ L<Tk::Error|Tk::Error> mechanism is used
 
 =item I<$widget>-E<gt>B<afterInfo>?(I<$id>)?
 
-This command returns information about existing event handlers.  If no I<$id>
-argument is supplied, the command returns a list of the identifiers for all
-existing  event handlers created by the B<after> command for this MainWindow. If
-I<$id> is supplied, it specifies an existing handler; I<$id> must have been the
-return value from some previous call to B<after> and it must not have triggered
-yet or been cancelled. In this case the command returns a list with two elements.
-The first element of the list is the callback associated  with I<$id>, and the
-second element is either B<idle> or B<timer> to indicate what kind of event
-handler it is.
+This command returns information about existing event handlers.  If no
+I<$id> argument is supplied, the command returns a list of the
+identifiers for all existing event handlers created by the B<after>
+and B<repeat> commands for I<$widget>. If I<$id> is supplied, it
+specifies an existing handler; I<$id> must have been the return value
+from some previous call to B<after> or B<repeat> and it must not have
+triggered yet or been cancelled. In this case the command returns a
+list with three elements.  The first element of the list is the
+callback associated with I<$id>, the second element is either B<idle>
+or the I<integer> timer millisecond value to indicate what kind of
+event handler it is, and the third is a string I<once> or I<repeat> to
+differentiate an B<after> from a B<repeat> event.
 
 =back
 
gdiff -up '/usr/local/src/Tk800.024/pod/mega.pod' '/usr/local/src/work/Tk800/pod/mega.pod'
Index: ./pod/mega.pod
--- ./pod/mega.pod	Tue Nov  9 14:18:00 1999
+++ ./pod/mega.pod	Fri Apr 25 16:16:24 2003
@@ -291,13 +291,15 @@ S<    >I<$another> = I<$mega>-E<gt>B<pri
 
 Get the widget reference of an advertised subwidget.
 
+S<    >I<@subwidget> = I<$cw>-E<gt>B<Subwidget>();
+
 S<    >I<$subwidget> = I<$cw>-E<gt>B<Subwidget>(I<name>);
 
 S<    >I<@subwidget> = I<$cw>-E<gt>B<Subwidget>(I<name> ?,...?);
 
-Returns the widget reference(s) of the subwidget known under the
-name I<name>.  See L<Advertise|"Advertise"> method how to define
-I<name> for a subwidget.
+Returns the widget reference(s) of the subwidget known under the given
+name(s). Without arguments, return all known subwidgets of I<$cw>. See
+L<Advertise|"Advertise"> method how to define I<name> for a subwidget.
 
 B<Comment:> Mega Widget Users: Use B<Subwidget> to get I<only>
 documented subwidgets.
gdiff -up '/usr/local/src/Tk800.024/pod/messageBox.pod' '/usr/local/src/work/Tk800/pod/messageBox.pod'
Index: ./pod/messageBox.pod
--- ./pod/messageBox.pod	Mon Nov 22 16:32:54 1999
+++ ./pod/messageBox.pod	Mon Apr 21 17:53:24 2003
@@ -10,12 +10,14 @@ S<    >I<$response> = I<$widget>-E<gt>B<
 
 =head1 DESCRIPTION
 
-This method uses L<Tk::Dialog|Tk::Dialog> to quickly create several common dialog boxes.
-A dialog widget consists of a message, an icon and a set of buttons (see
-the I<-type> option).  After the message window is popped up,  B<messageBox>
-waits  for the user to select one of the buttons and return the button text.
-NOTE:  unlike B<Tk::Dialog> which creates its widget once and can be used
-many times, the B<messageBox> window is created every time it's used.
+This method uses L<Tk::Dialog|Tk::Dialog> to quickly create several
+common dialog boxes. A dialog widget consists of a message, an icon
+and a set of buttons (see the I<-type> option). After the message
+window is popped up, B<messageBox> waits for the user to select one of
+the buttons and return the button text (note that it's best to check the
+returned value in a case insensitive manner). NOTE: unlike
+B<Tk::Dialog> which creates its widget once and can be used many
+times, the B<messageBox> window is created every time it's used.
 
 The following option/value pairs are supported:
 
@@ -24,7 +26,7 @@ The following option/value pairs are sup
 =item B<-default>
 
 The case-sensitive symbolic name of the default button
-for this message window  ('OK',  'Cancel'  and  so
+for this message window  ('Ok',  'Cancel'  and  so
 on).  See  B<-type>  for a list of the symbolic names.
 If the message box has  just  one  button  it  will
 automatically  be  made  the  default, otherwise if
@@ -33,8 +35,9 @@ default button.
 
 =item B<-icon>
 
-Specifies an icon to display. Any of the builtin Tk bitmaps can
-specified.
+Specifies an icon to display. On X11 any of the builtin Tk bitmaps can
+specified. On Windows only B<error>, B<info>, B<question> or
+B<warning> are supported.
 
 =item B<-message>
 
@@ -46,14 +49,15 @@ Specifies  a  string to display as the t
 
 =item B<-type>
 
-Specifies a predefined set of buttons to be displayed. The following values are possible:
-'AbortRetryIgnore', 'OK', 'OKCancel', 'RetryCancel', 'YesNo' or 'YesNoCancel'.
+Specifies a predefined set of buttons to be displayed. The following
+values are possible: 'AbortRetryIgnore', 'Ok', 'OkCancel',
+'RetryCancel', 'YesNo' or 'YesNoCancel'.
 
 =back
 
 =head1 EXAMPLE
 
-I<$repsonse> = I<$mw>-E<gt>B<messageBox>(-icon =E<gt> 'questhead', -message =E<gt> 'Hello World!', -title =E<gt> 'My title', -type =E<gt> 'AbortRetryIgnore', -default =E<gt> 'Retry');
+I<$response> = I<$mw>-E<gt>B<messageBox>(-icon =E<gt> 'question', -message =E<gt> 'Hello World!', -title =E<gt> 'My title', -type =E<gt> 'AbortRetryIgnore', -default =E<gt> 'Retry');
 
 =head1 AUTHOR
 
gdiff -up '/usr/local/src/Tk800.024/pod/options.pod' '/usr/local/src/work/Tk800/pod/options.pod'
Index: ./pod/options.pod
--- ./pod/options.pod	Mon Nov 22 16:32:54 1999
+++ ./pod/options.pod	Fri Apr 25 15:13:52 2003
@@ -660,6 +660,15 @@ The way in which the string is displayed
 particular widget and may be determined by other options, such as
 B<anchor> or B<justify>.
 
+=item Name:	B<tile>
+
+=item Class:	B<Tile>
+
+=item Switch:	B<-tile>
+
+Specifies image used to display the widget. If image is the empty
+string, then the normal background color is displayed.
+
 =item Name:	B<troughColor>
 
 =item Class:	B<Background>
@@ -749,9 +758,9 @@ on how this option is used.
 
 =head1 SEE ALSO
 
-L<Tk::option|Tk::option>
-L<Tk::callbacks|Tk::callbacks>
-L<Tk::configspec|Tk::configspec>
+L<Tk::option>
+L<Tk::callbacks>
+L<Tk::ConfigSpecs>
 L<Tk_GetPixels|Tk::pTk::GetPixels>
 
 =head1 KEYWORDS
gdiff -up '/usr/local/src/Tk800.024/pod/pack.pod' '/usr/local/src/work/Tk800/pod/pack.pod'
Index: ./pod/pack.pod
--- ./pod/pack.pod	Tue Nov  9 14:18:01 1999
+++ ./pod/pack.pod	Fri Apr 25 16:16:58 2003
@@ -152,6 +152,10 @@ than receiving default values.
 
 =over 4
 
+=item I<$slave>-E<gt>B<packConfigure>?(I<options>)?
+
+Same as B<pack>.
+
 =item I<$slave>-E<gt>B<packForget>
 
 Removes I<slave> from the packing order for its
gdiff -up '/usr/local/src/Tk800.024/ptked' '/usr/local/src/work/Tk800/ptked'
Index: ./ptked
--- ./ptked	Sat Apr 29 10:20:31 2000
+++ ./ptked	Mon Apr 21 17:53:24 2003
@@ -57,6 +57,21 @@ use Tk::widgets qw(TextUndo Scrollbar Me
 use Getopt::Std;
 # use Tk::ErrorDialog;
 
+{
+ package Tk::TextUndoPtked;
+ @Tk::TextUndoPtked::ISA = qw(Tk::TextUndo);
+ Construct Tk::Widget 'TextUndoPtked';
+ sub Save {
+  my $w = shift;
+  $w->SUPER::Save(@_);
+  $w->toplevel->title($w->FileName);
+ }
+ sub Load {
+  my $w = shift;
+  $w->SUPER::Load(@_);
+  $w->toplevel->title($w->FileName);
+ }
+}
 
 my $top = MainWindow->new();
 
@@ -90,10 +105,10 @@ Tk::Event::HandleSignals();
 $SIG{'INT'} = sub { $top->WmDeleteWindow };
 
 $top->iconify;
-$top->optionAdd('*TextUndo.Background' => '#fff5e1');
+$top->optionAdd('*TextUndoPtked.Background' => '#fff5e1');
 $top->fontCreate('ptked',-family => 'courier', -size => ($^O eq 'MSWin32' ? 11 : -12),
                  -weight => 'normal', -slant => 'roman');
-$top->optionAdd('*TextUndo.Font' => 'ptked');
+$top->optionAdd('*TextUndoPtked.Font' => 'ptked');
 
 foreach my $file (@ARGV)
  {
@@ -128,9 +143,9 @@ sub Create_Edit
  $ed->withdraw;
  $top->{'Edits'}++;
  $ed->OnDestroy([\&RemoveEdit,$top]);
- my $t = $ed->Scrolled('TextUndo', -wrap => 'none', -scrollbars => 'osre');
+ my $t = $ed->Scrolled('TextUndoPtked', -wrap => 'none', -scrollbars => 'osre');
  $t->pack(-expand => 1, -fill => 'both');
- $t = $t->Subwidget('textundo');
+ $t = $t->Subwidget('scrolled');
  my $menu = $t->menu;
  $menu->cascade(-label => '~Help', -menuitems => [
                 [Button => '~About...', -command => [\&About,$ed]],
gdiff -up '/usr/local/src/Tk800.024/ptksh' '/usr/local/src/work/Tk800/ptksh'
Index: ./ptksh
--- ./ptksh	Tue Jul 27 20:21:21 1999
+++ ./ptksh	Sun Apr 27 09:38:14 2003
@@ -194,7 +194,7 @@ L<perldebug|perldebug>
 
 =head1 VERSION
 
-VERSION 2.01 6/18/98
+VERSION 2.02
 
 =head1 AUTHORS
 
@@ -217,7 +217,7 @@ use Tk;
 use vars qw($NAME $VERSION $FONT @FONT $WIN32 $HOME $HISTFILE $HISTSAVE $PROMPT $INITFILE);
 
 $NAME = 'ptksh';
-$VERSION = '2.01';
+$VERSION = '2.02';
 $WIN32 = 1 if $^O =~ /Win32/;
 $HOME = $WIN32 ? ($ENV{HOMEDRIVE} . $ENV{HOMEPATH}) || 'C:\\' : $ENV{HOME} . "/";
 @FONT = ($WIN32 ? (-font => 'systemfixed') : () );
@@ -632,6 +632,7 @@ sub _u {
 sub _d
   {
     require Data::Dumper;
+    local $Data::Dumper::Deparse = 1;
     print Data::Dumper::Dumper(@_);
   }
 
gdiff -up '/usr/local/src/Tk800.024/t/Trace.t' '/usr/local/src/work/Tk800/t/Trace.t'
Index: ./t/Trace.t
--- ./t/Trace.t	Tue Jul 27 20:21:21 1999
+++ ./t/Trace.t	Thu Apr 24 23:52:48 2003
@@ -2,7 +2,7 @@ BEGIN { $|=1; $^W=1; }
 use strict;
 use Test;
 use Tk;
-plan test => 5;
+plan test => 7;
 my $var = 'One';
 my $mw = MainWindow->new;
 my $e  = $mw->Entry(-textvariable => \$var)->pack;
@@ -16,3 +16,14 @@ ok($e->get,$var,"Entry does not track va
 chop($var);
 ok($e->get,'Thre',"Entry does not track chop-ing variable");
 
+my $nv;
+$mw->Entry(-textvariable => \$nv);
+$nv = 3/2;
+ok($nv, 3/2, "IV should not override NV");
+
+my $pv_chop = 421;
+chop($pv_chop);
+$mw->Entry(-textvariable => \$pv_chop);
+ok($pv_chop, "42", "PV flag not set");
+
+__END__
gdiff -up '/usr/local/src/Tk800.024/t/balloon.t' '/usr/local/src/work/Tk800/t/balloon.t'
Index: ./t/balloon.t
--- ./t/balloon.t	Sat Jan 15 13:20:35 2000
+++ ./t/balloon.t	Mon Apr 21 17:53:48 2003
@@ -4,7 +4,7 @@ use strict;
 use Test;
 use Tk;
 
-BEGIN { plan tests => 8 };
+BEGIN { plan tests => 10 };
 
 my $mw = Tk::MainWindow->new;
 eval { $mw->geometry('+10+10'); };  # This works for mwm and interactivePlacement
@@ -43,6 +43,17 @@ ok($@, "", 'Problem attaching message to
 
 eval { $balloon->configure(-motioncommand => \&motioncmd); };
 ok($@, "", "Can't set motioncommand option");
+
+my $lb = $mw->Listbox->pack;
+$lb->insert("end",1,2,3,4);
+eval { $balloon->attach($lb, -msg => ['one','two','three','four']); };
+ok($@, "", 'Problem attaching message to Listbox items');
+
+my $slb = $mw->Scrolled('Listbox')->pack;
+$lb->insert("end",1,2,3,4);
+eval { $balloon->attach($slb->Subwidget('scrolled'),
+			-msg => ['one','two','three','four']); };
+ok($@, "", 'Problem attaching message to scrolled Listbox items');
 
 ## not yet:
 #  $l->eventGenerate("<Motion>");
gdiff -up /dev/null '/usr/local/src/work/Tk800/t/browseentry-grabtest.t'
Index: ./t/browseentry-grabtest.t
--- ./t/browseentry-grabtest.t	Thu Jan  1 01:00:00 1970
+++ ./t/browseentry-grabtest.t	Mon Apr 21 21:50:20 2003
@@ -0,0 +1,51 @@
+#!/usr/bin/perl -w
+# -*- perl -*-
+
+#
+# $Id: browseentry-grabtest.t,v 1.3 2003/04/21 19:49:24 eserte Exp $
+# Author: Slaven Rezic
+#
+
+# test whether grabs are correctly saved
+
+use strict;
+
+use Tk;
+use Tk::BrowseEntry;
+
+BEGIN {
+    if (!eval q{
+	use Test;
+	1;
+    }) {
+	print "# tests only work with installed Test module\n";
+	print "1..1\n";
+	print "ok 1\n";
+	exit;
+    }
+}
+
+BEGIN { plan tests => 1 }
+
+if (!defined $ENV{BATCH}) { $ENV{BATCH} = 1 }
+
+my $mw = tkinit;
+my $t = $mw->Toplevel;
+
+$mw->Label(-text => "disabled")->pack;
+$mw->Entry->pack;
+
+$t->BrowseEntry->pack;
+$t->Button(-text => "OK",
+	   -command => sub { $mw->destroy })->pack;
+$t->grab;
+
+if ($ENV{BATCH}) {
+    $mw->after(500,sub{$mw->destroy});
+}
+
+MainLoop;
+
+ok(1);
+
+__END__
gdiff -up /dev/null '/usr/local/src/work/Tk800/t/browseentry-subclassing.t'
Index: ./t/browseentry-subclassing.t
--- ./t/browseentry-subclassing.t	Thu Jan  1 01:00:00 1970
+++ ./t/browseentry-subclassing.t	Mon Apr 21 21:50:20 2003
@@ -0,0 +1,83 @@
+#!/usr/bin/perl -w
+# -*- perl -*-
+
+#
+# $Id: browseentry-subclassing.t,v 1.4 2003/04/21 19:49:27 eserte Exp $
+# Author: Slaven Rezic
+#
+
+use strict;
+
+use Tk;
+use Tk::BrowseEntry;
+
+BEGIN {
+    if (!eval q{
+	use Test;
+	use Tk::NumEntry;
+	1;
+    }) {
+	print "1..0 # skip: no Test module\n";
+	exit;
+    }
+}
+
+BEGIN { plan tests => 2 }
+
+if (!defined $ENV{BATCH}) { $ENV{BATCH} = 1 }
+
+{
+    package Tk::NumBrowseEntry;
+    use base qw(Tk::BrowseEntry);
+    use Tk::NumEntry;
+    Construct Tk::Widget 'NumBrowseEntry';
+    sub LabEntryWidget { "NumEntry" }
+}
+
+my $mw = my $top = tkinit;
+my $ne = $mw->NumBrowseEntry(-minvalue => -10,
+			     -maxvalue => +10,
+			     -choices => [-6,-3,0,3,6],
+			    )->pack;
+ok($ne->isa('Tk::NumBrowseEntry'));
+
+{
+    package Tk::MyLabEntry;
+    use base qw(Tk::Frame);
+    Construct Tk::Widget 'MyLabEntry';
+
+    sub Populate {
+	my($cw, $args) = @_;
+	$cw->SUPER::Populate($args);
+	my $e = $cw->Component(Entry => 'entry');
+	$e->pack('-expand' => 1, '-fill' => 'both');
+	$cw->ConfigSpecs(DEFAULT => [$e]);
+	$cw->Delegates(DEFAULT => $e);
+	$cw->AddScrollbars($e) if (exists $args->{-scrollbars});
+	$cw->ConfigSpecs(-background => ['SELF', 'DESCENDANTS'],
+			 DEFAULT => [$e],);
+    }
+}
+
+{
+    package Tk::MyLabEntryBrowseEntry;
+    use base qw(Tk::BrowseEntry);
+    Construct Tk::Widget 'MyLabEntryBrowseEntry';
+    sub LabEntryWidget { "MyLabEntry" }
+}
+
+$mw->optionAdd("*MyLabEntryBrowseEntry*Entry.background", "red");
+my $le = $mw->MyLabEntryBrowseEntry(-label => "My LabEntry:")->pack;
+ok($le->isa('Tk::MyLabEntryBrowseEntry'));
+
+$top->Button(-text => "Ok",
+	     -command => sub {
+		$top->destroy;
+	    })->pack;
+$top->after(60*1000, sub { $top->destroy });
+
+if (!$ENV{BATCH}) {
+    MainLoop;
+}
+
+__END__
gdiff -up /dev/null '/usr/local/src/work/Tk800/t/browseentry2.t'
Index: ./t/browseentry2.t
--- ./t/browseentry2.t	Thu Jan  1 01:00:00 1970
+++ ./t/browseentry2.t	Mon Apr 21 21:50:20 2003
@@ -0,0 +1,95 @@
+#!/usr/bin/perl -w
+# -*- perl -*-
+
+#
+# $Id: browseentry2.t,v 1.9 2003/04/21 19:49:35 eserte Exp $
+# Author: Slaven Rezic
+#
+
+use strict;
+
+use Tk;
+use Tk::BrowseEntry;
+
+BEGIN {
+    if (!eval q{
+	use Test;
+	1;
+    }) {
+	print "# tests only work with installed Test module\n";
+	print "1..1\n";
+	print "ok 1\n";
+	exit;
+    }
+}
+
+BEGIN { plan tests => 6 }
+
+if (!defined $ENV{BATCH}) { $ENV{BATCH} = 1 }
+
+my $top = new MainWindow;
+
+my $var;
+my $robe = $top->BrowseEntry
+    (
+     -label      => "readonly, classic style",
+     -state      => 'readonly',
+     -autolistwidth   => 1,     # list width is dynamically calculated
+     -autolimitheight => 1,     # limit height of browseentry to number
+                                # of items
+     -browsecmd  => sub { warn "-browsecmd:  @_\n" }, # old plain callback
+     -browse2cmd => sub { warn "-browse2cmd: @_\n" }, # -browsecmd with index as argument
+     -variable   => \$var,
+    )->pack;
+
+$robe->insert("end", @INC);
+
+ok(ref $robe, 'Tk::BrowseEntry');
+ok($robe->isa('Tk::BrowseEntry'), 1);
+
+my $var2;
+my $robe2 = $top->BrowseEntry
+    (
+     -label      => "normal, windows style",
+     -autolistwidth   => 1,     # list width is dynamically calculated
+     -autolimitheight => 1,     # limit height of browseentry to number
+                                # of items
+     -style => 'MSWin32',
+     -variable   => \$var2,
+    )->pack;
+$robe2->insert("end", 1, 2, 3, "a very long entry exceeding the normal width");
+
+ok(ref $robe2, 'Tk::BrowseEntry');
+ok($robe2->isa('Tk::BrowseEntry'), 1);
+
+{
+    my $var;
+    my $robe = $top->BrowseEntry
+	(
+	 -label      => "readonly, windows style",
+	 -autolistwidth   => 1,     # list width is dynamically calculated
+	 -autolimitheight => 1,     # limit height of browseentry to number
+	                            # of items
+	 -style => 'MSWin32',
+	 -state => 'readonly',
+	 -variable   => \$var,
+	)->pack;
+    $robe->insert("end", 1, 2, 3, "a very long entry exceeding the normal width");
+
+    ok(ref $robe, 'Tk::BrowseEntry');
+    ok($robe->isa('Tk::BrowseEntry'), 1);
+
+    $robe->configure(-variable => \$var);
+}
+
+$top->Button(-text => "Ok",
+	     -command => sub {
+		$top->destroy;
+	    })->pack;
+$top->after(60*1000, sub { $top->destroy });
+
+if (!$ENV{BATCH}) {
+    MainLoop;
+}
+
+__END__
gdiff -up /dev/null '/usr/local/src/work/Tk800/t/cursor.t'
Index: ./t/cursor.t
--- ./t/cursor.t	Thu Jan  1 01:00:00 1970
+++ ./t/cursor.t	Sun Jun 15 22:08:36 2003
@@ -0,0 +1,34 @@
+# -*- perl -*-
+BEGIN { $|=1; $^W=1; }
+use strict;
+use Test;
+use Tk;
+
+BEGIN {
+    if ($Tk::platform eq 'MSWin32') {
+	plan test => 1;
+    } else {
+	plan test => 2, todo => [1];
+    }
+}
+
+my $mw;
+$mw = Tk::MainWindow->new();
+$mw->geometry('+10+10');  # This works for mwm and interactivePlacement
+
+if ($Tk::platform eq 'MSWin32') {
+    my $curfile = "demos/demos/images/cursor.cur";
+    $mw->configure(-cursor => $curfile);
+    $mw->update;
+    ok($mw->cget(-cursor), $curfile);
+} else {
+    $mw->configure(-cursor => ['@demos/demos/images/cursor.xbm','black']);
+    $mw->update;
+    $mw->after(200);
+    ok(ref $mw->cget(-cursor) eq 'ARRAY');
+    my $tclcurspec = '@demos/demos/images/cursor.xbm black';
+    $mw->configure(-cursor => $tclcurspec);
+    ok($mw->cget(-cursor), $tclcurspec);
+}
+
+__END__
gdiff -up /dev/null '/usr/local/src/work/Tk800/t/entry.t'
Index: ./t/entry.t
--- ./t/entry.t	Thu Jan  1 01:00:00 1970
+++ ./t/entry.t	Fri Apr 25 16:28:08 2003
@@ -0,0 +1,1297 @@
+#!/usr/bin/perl -w
+# -*- perl -*-
+
+# This file is a Tcl script to test entry widgets in Tk.  It is
+# organized in the standard fashion for Tcl tests.
+#
+# Copyright (c) 1994 The Regents of the University of California.
+# Copyright (c) 1994-1997 Sun Microsystems, Inc.
+# Copyright (c) 1998-1999 by Scriptics Corporation.
+# All rights reserved.
+#
+# Translated to Perl/Tk by Slaven Rezic
+
+use strict;
+
+use Tk;
+use Tk::Trace;
+
+BEGIN {
+    if (!eval q{
+	use Test;
+	1;
+    }) {
+	print "1..0 # SKIP: tests only work with installed Test module\n";
+	exit;
+    }
+}
+
+BEGIN {
+    if ($Tk::platform ne 'unix') {
+	print "1..0 # SKIP: tests are only successful on X11 platforms\n";
+	exit;
+    }
+}
+
+BEGIN { plan tests => 336 }
+
+my $mw = Tk::MainWindow->new();
+$mw->geometry('+10+10');
+
+my $e0 = $mw->Entry;
+ok(Tk::Exists($e0), 1);
+ok(ref $e0, "Tk::Entry");
+
+my @scrollInfo;
+sub scroll {
+    (@scrollInfo) = @_;
+}
+
+# Create additional widget that's used to hold the selection at times.
+
+my $sel = $mw->Entry;
+$sel->insert("end", "This is some sample text");
+
+# Font names
+
+my $big = "-adobe-helvetica-medium-r-normal--24-240-75-75-p-*-iso8859-1";
+my $fixed = "-adobe-courier-medium-r-normal--12-120-75-75-m-*-iso8859-1";
+
+# Create entries in the option database to be sure that geometry options
+# like border width have predictable values.
+
+$mw->option("add", "*Entry.borderWidth", 2);
+$mw->option("add", "*Entry.highlightThickness", 2);
+$mw->option("add", "*Entry.font", "Helvetica -12");
+
+my $e = $mw->Entry(qw(-bd 2 -relief sunken))->pack;
+
+$mw->update;
+
+my $i;
+
+use constant SKIP_CGET    => 5;
+use constant SKIP_CONF    => 6;
+use constant SKIP_ERROR   => 7;
+use constant SKIP_RESTORE => 8;
+
+my @tests = (
+    [qw(-background), '#ff0000', '#ff0000', 'non-existent',
+	    'unknown color name "non-existent"'],
+    [qw(-bd 4 4 badValue), 'bad screen distance "badValue"'],
+    [qw(-bg), '#ff0000', '#ff0000', 'non-existent', 'unknown color name "non-existent"'],
+    [qw(-borderwidth 1.3 1 badValue), 'bad screen distance "badValue"'],
+    [qw(-cursor arrow arrow badValue), 'bad cursor spec "badValue"'],
+    [qw(-exportselection yes 1 xyzzy), 'expected boolean value but got "xyzzy"', 0,0,1],
+    [qw(-fg), '#110022', '#110022', 'bogus', 'unknown color name "bogus"'],
+    [qw(-font -Adobe-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-*
+	-Adobe-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-*), undef,
+        'font "" doesn\'t exist',
+        1,0,1],
+    [qw(-foreground), '#110022', '#110022', 'bogus', 'unknown color name "bogus"'],
+    [qw(-highlightbackground), '#123456', '#123456', 'ugly', 'unknown color name "ugly"'],
+    [qw(-highlightcolor), '#123456', '#123456', 'bogus', 'unknown color name "bogus"'],
+    [qw(-highlightthickness 6 6 bogus), 'bad screen distance "bogus"'],
+    [qw(-highlightthickness -2 0), undef, undef],
+    [qw(-insertbackground), '#110022', '#110022', 'bogus', 'unknown color name "bogus"'],
+    [qw(-insertborderwidth 1.3 1 2.6x), 'bad screen distance "2.6x"'],
+    [qw(-insertofftime 100 100 3.2), 'expected integer but got "3.2"', 0,0,1],
+    [qw(-insertontime 100 100 3.2), 'expected integer but got "3.2"', 0,0,1],
+    [qw(-justify right right bogus), 'bad justification "bogus": must be left, right, or center'],
+    [qw(-relief groove groove 1.5), 'bad relief type "1.5": must be flat, groove, raised, ridge, solid, or sunken'],
+    [qw(-selectbackground), '#110022', '#110022', 'bogus', 'unknown color name "bogus"'],
+    [qw(-selectborderwidth 1.3 1 badValue), 'bad screen distance "badValue"'],
+    [qw(-selectforeground), '#654321', '#654321', 'bogus', 'unknown color name "bogus"'],
+    [qw(-show * *), undef, undef],
+    [qw(-state n normal bogus), 'bad state value "bogus": must be normal or disabled'],
+    [qw(-takefocus), "any string", "any string", undef, undef],
+    [qw(-textvariable), \$i, \$i, undef, undef],
+    [qw(-width 402 402 3p), "'3p' isn't numeric"],
+    [qw(-xscrollcommand), 'Some command', 'Some command', undef, undef, 1,1,1,1],
+);
+
+foreach my $test (@tests) {
+    my $name = $test->[0];
+    $e->configure($name, $test->[1]);
+    if ($test->[SKIP_CGET]) {
+	skip(1,1);
+    } else {
+	ok($e->cget($name), $test->[2], "Failed to cget $name");
+    }
+    if ($test->[SKIP_CONF]) {
+	skip(1,1);
+    } else {
+	ok(($e->configure($name))[4], $e->cget($name), "Failed comparing configure and cget values for $name");
+    }
+
+    if (defined $test->[4]) {
+	if ($test->[SKIP_ERROR]) {
+	    skip(1,1);
+	} else {
+	    eval { $e->configure($name, $test->[3]) };
+	    ok($@ =~ /$test->[4]/, 1, "Error message for $name: Got $@, expected $test->[4]");
+	}
+    }
+    if ($test->[SKIP_RESTORE]) {
+	skip(1,1);
+    } else {
+	$e->configure($name, ($e->configure($name))[3]);
+    }
+}
+
+eval { $e->destroy };
+$e = $mw->Entry;
+ok(Tk::Exists($e), 1);
+ok($e->class, 'Entry');
+ok(ref $e, 'Tk::Entry');
+
+eval { $e->destroy; undef $e };
+eval { $e = $mw->Entry(-gorp => 'foo') };
+ok($@ =~ /Bad option \`-gorp\'/, 1, $@);
+ok(!Tk::Exists($e), 1);
+ok(!defined $e, 1);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed)->pack;
+$e->update;
+
+my $cx = $mw->fontMeasure($fixed, 'a');
+my $cy = $mw->fontMetrics($fixed, '-linespace');
+#my $ux = $mw->fontMeasure($fixed, '\u4e4e'); # XXX no unicode yet
+
+eval { $e->bbox };
+ok($@ =~ /wrong \# args: should be ".* bbox index"/, 1, $@);
+
+eval { $e->bbox(qw(a b)) };
+ok($@ =~ /wrong \# args: should be ".* bbox index"/, 1, $@);
+
+eval { $e->bbox(qw(bogus)) };
+ok($@ =~ /bad entry index "bogus"/, 1, $@);
+
+$e->delete(0,"end");
+ok("5,5,0,$cy",join(",",$e->bbox(0)));
+
+$e->delete(0,"end");
+$e->insert(0,"abc");
+ok(join(",",$e->bbox(3)),join(",",5+2*$cx,5,$cx,$cy));
+ok(join(",",$e->bbox("end")), join(",",$e->bbox(3)));
+
+# XXX no unicode yet
+#  test entry-3.7 {EntryWidgetCmd procedure, "bbox" widget command} {
+#      # Tcl_UtfAtIndex(): utf at end
+#      .e delete 0 end
+#      .e insert 0 "ab\u4e4e"
+#      .e bbox end
+#  } "[expr 5+2*$cx] 5 $ux $cy"
+#  test entry-3.8 {EntryWidgetCmd procedure, "bbox" widget command} {
+#      # Tcl_UtfAtIndex(): utf before index
+#      .e delete 0 end
+#      .e insert 0 "ab\u4e4ec"
+#      .e bbox 3
+#  } "[expr 5+2*$cx+$ux] 5 $cx $cy"
+
+$e->delete(0,"end");
+ok("5,5,0,$cy",join(",",$e->bbox("end")));
+
+# XXX no unicode yet
+#  test entry-3.10 {EntryWidgetCmd procedure, "bbox" widget command} {
+#      .e delete 0 end
+#      .e insert 0 "abcdefghij\u4e4eklmnop"
+#      list [.e bbox 0] [.e bbox 1] [.e bbox 10] [.e bbox end]
+#  } [list "5 5 $cx $cy" "[expr 5+$cx] 5 $cx $cy" "[expr 5+10*$cx] 5 $ux $cy" "[expr 5+$ux+15*$cx] 5 $cx $cy"]
+
+eval { $e->cget };
+ok($@ =~ /wrong \# args: should be ".* cget option"/, 1, $@);
+
+eval { $e->cget(qw(a b)) };
+ok($@ =~ /wrong \# args: should be ".* cget option"/, 1, $@);
+
+eval { $e->cget(-gorp) };
+ok($@ =~ /unknown option "-gorp"/, 1, $@);
+
+$e->configure(-bd => 4);
+ok($e->cget(-bd), 4);
+ok(scalar @{$e->configure}, 38);
+
+eval { $e->configure('-foo') };
+ok($@ =~ /unknown option "-foo"/, 1, $@);
+
+$e->configure(-bd => 4);
+$e->configure(-bg => '#ffffff');
+ok(($e->configure(-bd))[4], 4);
+
+eval { $e->delete };
+ok($@ =~ /wrong \# args: should be ".* delete firstIndex \?lastIndex\?"/, 1, $@);
+
+eval { $e->delete(qw(a b c)) };
+ok($@ =~ /wrong \# args: should be ".* delete firstIndex \?lastIndex\?"/, 1, $@);
+
+eval { $e->delete("foo") };
+ok($@ =~ /bad entry index "foo"/, 1, $@);
+
+eval { $e->delete(0, "bar") };
+ok($@ =~ /bad entry index "bar"/, 1, $@);
+
+$e->delete(0, "end");
+$e->insert("end", "01234567890");
+$e->delete(2, 4);
+ok($e->get, "014567890");
+
+$e->delete(0, "end");
+$e->insert("end", "01234567890");
+$e->delete(6);
+ok($e->get, "0123457890");
+
+#  test entry-3.24 {EntryWidgetCmd procedure, "delete" widget command} {
+#      # UTF
+#      set x {}
+#      .e delete 0 end
+#      .e insert end "01234\u4e4e67890"
+#      .e delete 6
+#      lappend x [.e get]
+#      .e delete 0 end
+#      .e insert end "012345\u4e4e7890"
+#      .e delete 6
+#      lappend x [.e get]
+#      .e delete 0 end
+#      .e insert end "0123456\u4e4e890"
+#      .e delete 6
+#      lappend x [.e get]
+#  } [list "01234\u4e4e7890" "0123457890" "012345\u4e4e890"]
+
+
+$e->delete(0,"end");
+$e->insert("end", "01234567890");
+$e->delete(6, 5);
+ok($e->get, "01234567890");
+
+$e->delete(0,"end");
+$e->insert("end", "01234567890");
+$e->configure(-state => 'disabled');
+$e->delete(2, 8);
+$e->configure(-state => 'normal');
+ok($e->get, "01234567890");
+
+eval { $e->get("foo") };
+ok($@ =~ /wrong \# args: should be ".* get"/, 1, $@);
+
+eval { $e->icursor };
+ok($@ =~ /wrong \# args: should be ".* icursor pos"/, 1, $@);
+
+eval { $e->icursor("foo") };
+ok($@ =~ /bad entry index "foo"/, 1, $@);
+
+$e->delete(0,"end");
+$e->insert("end", "01234567890");
+$e->icursor(4);
+ok($e->index('insert'), 4);
+
+eval { $e->in };
+ok($@ =~ /Can\'t locate(?: file)? auto\/Tk\/Entry\/in\.al/, 1, $@);
+
+eval { $e->index };
+ok($@ =~ /wrong \# args: should be ".* index string"/, 1, $@);
+
+eval { $e->index("foo") };
+ok($@ =~ /bad entry index "foo"/, 1, $@);
+
+ok($e->index(0), 0);
+
+#  test entry-3.35 {EntryWidgetCmd procedure, "index" widget command} {
+#      # UTF
+#      .e delete 0 end
+#      .e insert 0 abc\u4e4e\u0153def
+#      list [.e index 3] [.e index 4] [.e index end]
+#  } {3 4 8}
+
+eval { $e->insert(qw(a)) };
+ok($@ =~ /wrong \# args: should be ".* insert index text"/, 1, $@);
+
+eval { $e->insert(qw(a b c)) };
+ok($@ =~ /wrong \# args: should be ".* insert index text"/, 1, $@);
+
+eval { $e->insert(qw(foo Text)) };
+ok($@ =~ /bad entry index "foo"/, 1, $@);
+
+$e->delete(0,"end");
+$e->insert("end", "01234567890");
+$e->insert(3, "xxx");
+ok($e->get, '012xxx34567890');
+
+$e->delete(0,"end");
+$e->insert("end", "01234567890");
+$e->configure(qw(-state disabled));
+$e->insert(qw(3 xxx));
+$e->configure(qw(-state normal));
+ok($e->get, "01234567890");
+
+eval { $e->insert(qw(a b c)) };
+ok($@ =~ /wrong \# args: should be ".* insert index text"/, 1, $@);
+
+eval { $e->scan(qw(a)) };
+ok($@ =~ /wrong \# args: should be ".* scan mark\|dragto x"/, 1, $@);
+
+eval { $e->scan(qw(a b c)) };
+ok($@ =~ /wrong \# args: should be ".* scan mark\|dragto x"/, 1, $@);
+
+eval { $e->scan(qw(foobar 20)) };
+ok($@ =~ /bad scan option "foobar": must be mark or dragto/, 1, $@);
+
+eval { $e->scan(qw(mark 20.1)) };
+ok($@, '');
+
+# This test is non-portable because character sizes vary.
+
+$e->delete(qw(0 end));
+$e->update;
+$e->insert(end => "This is quite a long string, in fact a ");
+$e->insert(end => "very very long string");
+$e->scan(qw(mark 30));
+$e->scan(qw(dragto 28));
+ok($e->index('@0'), 2);
+
+eval {$e->select };
+ok($@ =~ /Can\'t locate(?: file)? auto\/Tk\/Entry\/select\.al/, 1, $@);
+
+eval {$e->selection };
+ok($@ =~ /wrong \# args: should be ".* select option \?index\?"/, 1, $@);
+
+eval {$e->selection('foo') };
+ok($@ =~ /bad selection option "foo": must be adjust, clear, from, present, range, or to/, 1, $@);
+
+eval { $e->selection("clear", "gorp") };
+ok($@ =~ /wrong \# args: should be ".* selection clear"/, 1, $@);
+
+$e->delete(0, "end");
+$e->insert("end", "01234567890");
+$e->selection("from", 1);
+$e->selection("to", 4);
+$e->update;
+$e->selection("clear");
+eval { $mw->SelectionGet };
+ok($@ =~ /PRIMARY selection doesn\'t exist or form "STRING" not defined/, 1, $@);
+ok($mw->SelectionOwner, $e);
+
+eval { $e->selection("present", "foo") };
+ok($@ =~ /wrong \# args: should be ".* selection present"/, 1, $@);
+
+$e->delete(0, "end");
+$e->insert("end", "01234567890");
+$e->selectionFrom(3);
+$e->selectionTo(6);
+ok($e->selectionPresent,1);
+
+$e->delete(0, "end");
+$e->insert("end", "01234567890");
+$e->selectionFrom(3);
+$e->selectionTo(6);
+$e->configure(-exportselection => 0);
+ok($e->selection('present'), 1);
+
+$e->configure(-exportselection => 1);
+
+$e->delete(0, "end");
+$e->insert("end", "01234567890");
+$e->selectionFrom(3);
+$e->selectionTo(6);
+$e->delete(0,"end");
+ok($e->selectionPresent, 0);
+
+eval { $e->selectionAdjust("x") };
+ok($@ =~ /bad entry index "x"/, 1, $@);
+
+eval { $e->selection(qw(adjust 2 3)) };
+ok($@ =~ /wrong \# args: should be ".* selection adjust index"/, 1, $@);
+
+$e->delete(0, "end");
+$e->insert("end", "01234567890");
+$e->selectionFrom(1);
+$e->selection(qw(to 5));
+$e->update;
+$e->selectionAdjust(4);
+ok($mw->SelectionGet, "123");
+
+$e->delete(0, "end");
+$e->insert("end", "01234567890");
+$e->selectionFrom(1);
+$e->selection(qw(to 5));
+$e->update;
+$e->selectionAdjust(2);
+ok($mw->SelectionGet, "234");
+
+eval { $e->selectionFrom(qw(2 3)) };
+ok($@ =~ /wrong \# args: should be ".* selection from index"/, 1, $@);
+
+eval { $e->selection(qw(range 2)) };
+ok($@ =~ /wrong \# args: should be ".* selection range start end"/, 1, $@);
+
+eval { $e->selection(qw(range 2 3 4)) };
+ok($@ =~ /wrong \# args: should be ".* selection range start end"/, 1, $@);
+
+$e->delete(0, "end");
+$e->insert("end", "01234567890");
+$e->selectionFrom(1);
+$e->selection(qw(to 5));
+$e->selection(qw(range 4 4 ));
+eval { $e->index("sel.first") };
+ok($@ =~ /selection isn\'t in entry/, 1, $@);
+
+$e->delete(0, "end");
+$e->insert("end", "0123456789");
+$e->selectionFrom(3);
+$e->selection(qw(to 7));
+$e->selection(qw(range 2 9));
+ok($e->index("sel.first"), 2);
+ok($e->index("sel.last"), 9);
+ok($e->index("anchor"), 3);
+
+$e->delete(qw(0 end));
+$e->insert(end => "This is quite a long text string, so long that it ");
+$e->insert(end => "runs off the end of the window quite a bit.");
+
+eval { $e->selectionTo(2,3) };
+ok($@ =~ /wrong \# args: should be ".* selection to index"/, 1, $@);
+
+$e->xview(5);
+ok(join(",", map { substr($_, 0, 8) } $e->xview), "0.053763,0.268817");
+
+eval { $e->xview(qw(gorp)) };
+ok($@ =~ /bad entry index "gorp"/, 1, $@);
+
+$e->xview(0);
+$e->icursor(10);
+$e->xview('insert');
+ok(join(",", map { substr($_, 0, 7) } $e->xview), "0.10752,0.32258");
+
+eval { $e->xviewMoveto(qw(foo bar)) };
+ok($@ =~ /wrong \# args: should be ".* xview moveto fraction"/, 1, $@);
+
+eval { $e->xview(qw(moveto foo)) };
+ok($@ =~ /\'foo\' isn\'t numeric/, 1, $@);
+
+$e->xviewMoveto(0.5);
+ok(join(",", map { substr($_, 0, 7) } $e->xview), "0.50537,0.72043");
+
+eval { $e->xviewScroll(24) };
+ok($@ =~ /wrong \# args: should be ".* xview scroll number units\|pages"/, 1, $@);
+
+eval { $e->xviewScroll(qw(gorp units)) };
+ok($@ =~ /\'gorp\' isn\'t numeric/, 1, $@);
+
+$e->xviewMoveto(0);
+$e->xview(qw(scroll 1 pages));
+ok(join(",", map { substr($_, 0, 7) } $e->xview), "0.19354,0.40860");
+
+$e->xview(qw(moveto .9));
+$e->update;
+$e->xview(qw(scroll -2 p));
+ok(join(",", map { substr($_, 0, 7) } $e->xview), "0.39784,0.61290");
+
+$e->xview(30);
+$e->update;
+$e->xview(qw(scroll 2 units));
+ok($e->index('@0'), 32);
+
+$e->xview(30);
+$e->update;
+$e->xview(qw(scroll -1 units));
+ok($e->index('@0'), 29);
+
+eval { $e->xviewScroll(23,"foobars") };
+ok($@ =~ /bad argument "foobars": must be units or pages/, 1, $@);
+
+eval { $e->xview(qw(eat 23 hamburgers)) };
+ok($@ =~ /unknown option "eat": must be moveto or scroll/, 1, $@);
+
+$e->xview(0);
+$e->update;
+$e->xview(-4);
+ok($e->index('@0'), 0);
+
+$e->xview(300);
+ok($e->index('@0'), 73);
+
+#  .e insert 10 \u4e4e
+#  test entry-3.81 {EntryWidgetCmd procedure, "xview" widget command} {
+#      # UTF
+#      # If Tcl_NumUtfChars wasn't used, wrong answer would be:
+#      # 0.106383 0.117021 0.117021
+
+#      set x {}
+#      .e xview moveto .1
+#      lappend x [lindex [.e xview] 0]
+#      .e xview moveto .11
+#      lappend x [lindex [.e xview] 0]
+#      .e xview moveto .12
+#      lappend x [lindex [.e xview] 0]
+#  } {0.0957447 0.106383 0.117021}
+
+eval { $e->gorp };
+ok($@ =~ /Can\'t locate(?: file)? auto\/Tk\/Entry\/gorp\.al/, 1, $@);
+
+# The test below doesn't actually check anything directly, but if run
+# with Purify or some other memory-allocation-checking program it will
+# ensure that resources get properly freed.
+
+eval { $e->destroy };
+my $x;
+$e = $mw->Entry(-textvariable => \$x, -show => '*')->pack;
+$e->insert('end', "Sample text");
+$e->update;
+$e->destroy;
+
+my $f = $mw->Frame(qw(-width 200 -height 50 -relief raised -bd 2))
+    ->pack(-side => "right");
+
+#eval { $e->destroy };
+$x = 12345;
+$e = $mw->Entry(-textvariable => \$x);
+ok($e->get, "12345");
+
+eval { $e->destroy };
+$x = "12345";
+$e = $mw->Entry(-textvariable => \$x);
+my $y = "abcde";
+$e->configure(-textvariable => \$y);
+$x = 54321;
+ok($e->get, "abcde");
+
+eval { $e->destroy };
+undef $x;
+$e = $mw->Entry;
+$e->configure(-textvariable => \$x);
+$e->insert(0, "Some text");
+ok($x, "Some text");
+
+eval { $e->destroy };
+undef $x;
+$e = $mw->Entry;
+$e->insert(0, "Some text");
+$e->configure(-textvariable => \$x);
+#ok($x, "Some text"); # XXX does not work with Perl/Tk!
+
+sub override {
+    $x = 12345;
+}
+
+## XXX traceVariable does not work?
+eval { $e->destroy };
+undef $x;
+$mw->traceVariable(\$x, 'w' => \&override);
+$e = $mw->Entry;
+$e->configure(-textvariable => \$x);
+$e->insert('0', "Some text");
+my @result = ($x,$e->get);
+undef $x;
+ok($result[0], "12345");
+ok($result[1], "12345");
+
+eval { $e->destroy };
+$e = $mw->Entry(-exportselection => 0)->pack;
+$e->insert(qw(end 0123456789));
+$sel->selectionFrom(0);
+$sel->selectionTo(10);
+ok($mw->SelectionGet, "This is so");
+$e->selectionFrom(1);
+$e->selectionTo(5);
+ok($mw->SelectionGet, "This is so");
+$e->configure(-exportselection => 1);
+ok($mw->SelectionGet, "1234");
+
+eval { $e->destroy };
+$e = $mw->Entry->pack;
+$e->insert(qw(end 0123456789));
+$e->selectionFrom(1);
+$e->selectionTo(5);
+$e->configure(-exportselection => 0);
+eval { $mw->SelectionGet };
+ok($@ =~ /PRIMARY selection doesn\'t exist or form "STRING" not defined/, 1, $@);
+ok($e->index("sel.first"), 1);
+ok($e->index("sel.last"), 5);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed, qw(-width 4 -xscrollcommand), \&scroll)->pack;
+$e->insert(qw(end 01234567890));
+$e->update;
+$e->configure(qw(-width 5));
+ok(join(",", map { substr($_, 0, 8) } @scrollInfo), "0,0.363636");
+
+eval { $e->destroy };
+$e = $mw->Entry(-width => 0)->pack;
+$e->insert(end => "0123");
+$e->update;
+$e->configure(-font => $big);
+$e->update;
+ok($e->geometry, "62x37+0+0");
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed, -bd => 2, -relief => "raised")->pack;
+$e->insert(end => "0123");
+$e->update;
+ok($e->index('@10'), 0);
+ok($e->index('@11'), 0);
+ok($e->index('@12'), 1);
+ok($e->index('@13'), 1);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed, -bd => 2, -relief => "flat")->pack;
+$e->insert(end => "0123");
+$e->update;
+ok($e->index('@10'), 0);
+ok($e->index('@11'), 0);
+ok($e->index('@12'), 1);
+ok($e->index('@13'), 1);
+
+# If "0" in selected font had 0 width, caused divide-by-zero error.
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => '{open look glyph}')->pack;
+$e->scan('dragto', 30);
+$e->update;
+
+# No tests for DisplayEntry.
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed, -bd => 2, -relief => "raised", -width => 20, -highlightthickness => 3)->pack;
+$e->insert("end", "012\t45");
+$e->update;
+ok($e->index('@61'), 3);
+ok($e->index('@62'), 4);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed, qw(-bd 2 -relief raised -width 20 -justify center -highlightthickness 3))->pack;
+$e->insert("end", "012\t45");
+$e->update;
+ok($e->index('@96'), 3);
+ok($e->index('@97'), 4);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed, qw(-bd 2 -relief raised -width 20 -justify right -highlightthickness 3))->pack;
+$e->insert("end", "012\t45");
+$e->update;
+ok($e->index('@131'), 3);
+ok($e->index('@132'), 4);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed, qw(-bd 2 -relief raised -width 5))->pack;
+$e->insert(qw(end 01234567890));
+$e->update;
+$e->xview(6);
+ok($e->index('@0'), 6);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed, qw(-bd 2 -relief raised -width 5))->pack;
+$e->insert(qw(end 01234567890));
+$e->update;
+$e->xview(7);
+ok($e->index('@0'), 6);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $fixed, qw(-bd 2 -relief raised -width 10))->pack;
+$e->insert(qw(end), "01234\t67890");
+$e->update;
+$e->xview(3);
+ok($e->index('@39'), 5);
+ok($e->index('@40'), 6);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $big, qw(-bd 3 -relief raised -width 5))->pack;
+$e->insert(qw(end), "01234567");
+$e->update;
+ok($e->reqwidth, 77);
+ok($e->reqheight, 39);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $big, qw(-bd 3 -relief raised -width 0))->pack;
+$e->insert(qw(end), "01234567");
+$e->update;
+ok($e->reqwidth, 116);
+ok($e->reqheight, 39);
+
+eval { $e->destroy };
+$e = $mw->Entry(-font => $big, qw(-bd 3 -relief raised -width 0 -highlightthickness 2))->pack;
+$e->update;
+ok($e->reqwidth, 25);
+ok($e->reqheight, 39);
+
+eval { $e->destroy };
+$e = $mw->Entry(qw(-bd 1 -relief raised -width 0 -show .))->pack;
+$e->insert(0, "12345");
+$e->update;
+ok($e->reqwidth, 23);
+$e->configure(-show => 'X');
+ok($e->reqwidth, 53);
+#$e->configure(-show => '');
+#ok($e->reqwidth, 43);
+
+eval { $e->destroy };
+$e = $mw->Entry(qw(-bd 1 -relief raised -width 0 -show .),
+		-font => 'helvetica 12')->pack;
+$e->insert(0, "12345");
+$e->update;
+ok($e->reqwidth, 8+5*$mw->fontMeasure("helvetica 12", "."));
+$e->configure(-show => 'X');
+ok($e->reqwidth, 8+5*$mw->fontMeasure("helvetica 12", "X"));
+#$e->configure(-show => '');
+#ok($e->reqwidth, 8+$mw->fontMeasure("helvetica 12", "12345"));
+
+eval { $e->destroy };
+my $contents;
+$e = $mw->Entry(qw(-width 10 -font), $fixed, -textvariable => \$contents,
+		-xscrollcommand => \&scroll)->pack;
+$e->focus;
+$e->delete(0, "end");
+$e->insert(0, "abcde");
+$e->insert(2, "XXX");
+$e->update;
+ok($e->get, "abXXXcde");
+ok($contents, "abXXXcde");
+ok(join(" ", @scrollInfo), "0 1");
+
+$e->delete(0, "end");
+$e->insert(0, "abcde");
+$e->insert(500, "XXX");
+$e->update;
+ok($e->get, "abcdeXXX");
+ok($contents, "abcdeXXX");
+ok(join(" ", @scrollInfo), "0 1");
+
+$e->delete(0, "end");
+$e->insert(0, "0123456789");
+$e->selectionFrom(2);
+$e->selectionTo(6);
+$e->insert(2, "XXX");
+ok($e->index("sel.first"), 5);
+ok($e->index("sel.last"), 9);
+$e->selectionTo(8);
+ok($e->index("sel.first"), 5);
+ok($e->index("sel.last"), 8);
+
+$e->delete(0, "end");
+$e->insert(0, "0123456789");
+$e->selectionFrom(2);
+$e->selectionTo(6);
+$e->insert(3, "XXX");
+ok($e->index("sel.first"), 2);
+ok($e->index("sel.last"), 9);
+$e->selectionTo(8);
+ok($e->index("sel.first"), 2);
+ok($e->index("sel.last"), 8);
+
+$e->delete(0, "end");
+$e->insert(0, "0123456789");
+$e->selectionFrom(2);
+$e->selectionTo(6);
+$e->insert(5, "XXX");
+ok($e->index("sel.first"), 2);
+ok($e->index("sel.last"), 9);
+$e->selectionTo(8);
+ok($e->index("sel.first"), 2);
+ok($e->index("sel.last"), 8);
+
+$e->delete(0, "end");
+$e->insert(0, "0123456789");
+$e->selectionFrom(2);
+$e->selectionTo(6);
+$e->insert(6, "XXX");
+ok($e->index("sel.first"), 2);
+ok($e->index("sel.last"), 6);
+$e->selectionTo(5);
+ok($e->index("sel.first"), 2);
+ok($e->index("sel.last"), 5);
+
+$e->delete(0, "end");
+$e->insert(0, "0123456789");
+$e->icursor(4);
+$e->insert(4, "XXX");
+ok($e->index("insert"), 7);
+
+$e->delete(0, "end");
+$e->insert(0, "0123456789");
+$e->icursor(4);
+$e->insert(5, "XXX");
+ok($e->index("insert"), 4);
+
+$e->delete(0, "end");
+$e->insert(0, "This is a very long string");
+$e->update;
+$e->xview(4);
+$e->insert(qw(3 XXX));
+ok($e->index('@0'), 7);
+
+$e->delete(0, "end");
+$e->insert(0, "This is a very long string");
+$e->update;
+$e->xview(4);
+$e->insert(qw(4 XXX));
+ok($e->index('@0'), 4);
+
+$e->delete(0, "end");
+$e->insert(0, "xyzzy");
+$e->update;
+$e->insert(2, "00");
+## XXX ok($e->reqwidth, 59);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 abcde));
+$e->delete(qw(2 4));
+$e->update;
+ok($e->get, "abe");
+ok($contents, "abe");
+ok($scrollInfo[0], 0);
+ok($scrollInfo[1], 1);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 abcde));
+$e->delete(qw(-2 2));
+$e->update;
+ok($e->get, "cde");
+ok($contents, "cde");
+ok($scrollInfo[0], 0);
+ok($scrollInfo[1], 1);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 abcde));
+$e->delete(qw(3 1000));
+$e->update;
+ok($e->get, "abc");
+ok($contents, "abc");
+ok($scrollInfo[0], 0);
+ok($scrollInfo[1], 1);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->selection(qw(from 3));
+$e->selection(qw(to 8));
+$e->delete(qw(1 3));
+$e->update;
+ok($e->index("sel.first"), 1);
+ok($e->index("sel.last"), 6);
+$e->selectionTo(5);
+ok($e->index("sel.first"), 1);
+ok($e->index("sel.last"), 5);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->selection(qw(from 3));
+$e->selection(qw(to 8));
+$e->delete(qw(1 4));
+$e->update;
+ok($e->index("sel.first"), 1);
+ok($e->index("sel.last"), 5);
+$e->selectionTo(4);
+ok($e->index("sel.first"), 1);
+ok($e->index("sel.last"), 4);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->selection(qw(from 3));
+$e->selection(qw(to 8));
+$e->delete(qw(1 7));
+$e->update;
+ok($e->index("sel.first"), 1);
+ok($e->index("sel.last"), 2);
+$e->selectionTo(5);
+ok($e->index("sel.first"), 1);
+ok($e->index("sel.last"), 5);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->selection(qw(from 3));
+$e->selection(qw(to 8));
+$e->delete(qw(1 8));
+eval { $e->index("sel.first") };
+ok($@ =~ /selection isn\'t in entry/, 1, $@);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->selection(qw(from 3));
+$e->selection(qw(to 8));
+$e->delete(qw(3 7));
+$e->update;
+ok($e->index("sel.first"), 3);
+ok($e->index("sel.last"), 4);
+$e->selectionTo(8);
+ok($e->index("sel.first"), 3);
+ok($e->index("sel.last"), 8);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->selection(qw(from 3));
+$e->selection(qw(to 8));
+$e->delete(qw(3 8));
+eval { $e->index("sel.first") };
+ok($@ =~ /selection isn\'t in entry/, 1, $@);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->selection(qw(from 8));
+$e->selection(qw(to 3));
+$e->delete(qw(5 8));
+$e->update;
+ok($e->index("sel.first"), 3);
+ok($e->index("sel.last"), 5);
+$e->selectionTo(8);
+ok($e->index("sel.first"), 5);
+ok($e->index("sel.last"), 8);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->selection(qw(from 8));
+$e->selection(qw(to 3));
+$e->delete(qw(8 10));
+$e->update;
+ok($e->index("sel.first"), 3);
+ok($e->index("sel.last"), 8);
+$e->selectionTo(4);
+ok($e->index("sel.first"), 4);
+ok($e->index("sel.last"), 8);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->icursor(4);
+$e->delete(qw(1 4));
+ok($e->index("insert"), 1);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->icursor(4);
+$e->delete(qw(1 5));
+ok($e->index("insert"), 1);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcde));
+$e->icursor(4);
+$e->delete(qw(4 6));
+ok($e->index("insert"), 4);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0), "This is a very long string");
+$e->xview(4);
+$e->delete(qw(1 4));
+ok($e->index('@0'), 1);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0), "This is a very long string");
+$e->xview(4);
+$e->delete(qw(1 5));
+ok($e->index("\@0"), 1);
+
+$e->delete(qw(0 end));
+$e->insert(qw(0), "This is a very long string");
+$e->xview(4);
+$e->delete(qw(4 6));
+ok($e->index("\@0"), 4);
+
+$e->configure(qw(-width 0));
+
+$e->delete(qw(0 end));
+$e->insert(0, "xyzzy");
+$e->update;
+$e->delete(qw(2 4));
+ok($e->reqwidth, 31);
+
+eval { $e->destroy };
+
+sub _override2 {
+    $x = "12345";
+}
+undef $x;
+$mw->traceVariable(\$x, 'w', \&_override2);
+$e = $mw->Entry(-textvariable => \$x);
+$e->insert(0, "foo");
+ok($x, 12345);
+ok($e->get, 12345);
+undef $x;
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry->pack;
+$e->configure(-width => 0);
+
+$x = "abcde";
+$y = "ab";
+$e->configure(-textvariable => \$x);
+$e->update;
+$e->configure(-textvariable => \$y);
+$e->update;
+ok($e->get, "ab");
+ok($e->reqwidth, 24);
+
+$mw->traceVdelete(\$x); # XXX why?
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry(-textvariable => \$x);
+$e->insert(0, "abcdefghjklmnopqrstu");
+$e->selection(qw(range 4 10));
+$x = "a";
+eval { $e->index("sel.first") };
+ok($@ =~ /selection isn\'t in entry/, 1, $@);
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry(-textvariable => \$x);
+$e->insert(0, "abcdefghjklmnopqrstu");
+$e->selection(qw(range 4 10));
+$x = "abcdefg";
+ok($e->index("sel.first"), 4);
+ok($e->index("sel.last"), 7);
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry(-textvariable => \$x);
+$e->insert(0, "abcdefghjklmnopqrstu");
+$e->selection(qw(range 4 10));
+$x = "abcdefghijklmn";
+ok($e->index("sel.first"), 4);
+ok($e->index("sel.last"), 10);
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry(-textvariable => \$x)->pack;
+$e->insert(0, "abcdefghjklmnopqrstu");
+$e->xview(10);
+$e->update;
+$x = "abcdefg";
+$e->update;
+ok($e->index('@0'), 0);
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry(-font => $fixed, -width => 10, -textvariable => \$x)->pack;
+$e->insert(0, "abcdefghjklmnopqrstu");
+$e->xview(10);
+$e->update;
+$x = "1234567890123456789012";
+$e->update;
+ok($e->index('@0'), 10);
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry(-font => $fixed, -width => 10, -textvariable => \$x)->pack;
+$e->insert(0, "abcdefghjklmnopqrstu");
+$e->icursor(5);
+$x = "123";
+ok($e->index("insert"), 3);
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry(-font => $fixed, -width => 10, -textvariable => \$x)->pack;
+$e->insert(0, "abcdefghjklmnopqrstuvwxyz");
+$e->icursor(5);
+$x = "123456";
+ok($e->index("insert"), 5);
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry;
+$e->insert(0, "abcdefg");
+$e->destroy;
+$mw->update;
+
+$_->destroy for ($mw->children);
+my $e1 = $mw->Entry(-fg => '#112233');
+ok(($mw->children)[0], $e1);
+$e1->destroy;
+ok(scalar($mw->children), undef); # XXX why not 0?
+
+$e = $mw->Entry(-font => $fixed, qw(-width 5 -bd 2 -relief sunken))->pack;
+$e->insert(qw(0 012345678901234567890));
+$e->xview(4);
+$e->update;
+ok($e->index("end"), 21);
+
+eval { $e->index("abogus") };
+ok($@ =~ /bad entry index "abogus"/, 1, $@);
+
+$e->selection(qw(from 1));
+$e->selection(qw(to 6));
+ok($e->index(qw(anchor)), 1);
+
+$e->selection(qw(from 4));
+$e->selection(qw(to 1));
+ok($e->index(qw(anchor)), 4);
+
+$e->selection(qw(from 3));
+$e->selection(qw(to 15));
+$e->selection(qw(adjust 4));
+ok($e->index(qw(anchor)), 15);
+
+eval { $e->index("ebogus") };
+ok($@ =~ /bad entry index "ebogus"/, 1, $@);
+
+$e->icursor(2);
+ok($e->index('insert'), 2);
+
+eval { $e->index("ibogus") };
+ok($@ =~ /bad entry index "ibogus"/, 1, $@);
+
+$e->selectionFrom(1);
+$e->selectionTo(6);
+ok($e->index("sel.first"), 1);
+ok($e->index("sel.last"), 6);
+
+$mw->SelectionClear($e);
+
+if ($^O ne 'MSWin32') {
+    # On unix, when selection is cleared, entry widget's internal
+    # selection range is reset.
+
+    eval { $e->index("sel.first") };
+    ok($@ =~ /selection isn\'t in entry/, 1, $@);
+    skip(1,1);
+
+} else {
+    # On mac and pc, when selection is cleared, entry widget remembers
+    # last selected range.  When selection ownership is restored to
+    # entry, the old range will be rehighlighted.
+
+    ok($mw->SelectionGet, 1);
+    ok($e->index("sel.first"), 1);
+}
+
+if ($^O ne 'MSWin32') {
+    eval { $e->index("sbogus") };
+    ok($@ =~ /selection isn\'t in entry/, 1, $@);
+} else {
+    eval { $e->index("sbogus") };
+    ok($@ =~ /bad entry index "sbogus"/, 1, $@);
+}
+
+eval { $e->index('@xyz') };
+ok($@ =~ /bad entry index "\@xyz"/, 1, $@);
+
+ok($e->index('@4'), 4);
+ok($e->index('@11'), 4);
+ok($e->index('@12'), 5);
+ok($e->index('@' . ($e->width-6)), 8);
+ok($e->index('@' . ($e->width-5)), 9);
+ok($e->index('@1000'), 9);
+
+eval { $e->index('1xyz') };
+ok($@ =~ /bad entry index "1xyz"/, 1, $@);
+
+ok($e->index(-10), 0);
+ok($e->index(12), 12);
+ok($e->index(49), 21);
+
+Tk::catch { $e->destroy };
+$e = $mw->Entry(-show => ".");
+$e->insert(qw(0 XXXYZZY));
+$e->pack;
+$e->update;
+ok($e->index('@7'), 0);
+ok($e->index('@8'), 1);
+
+# XXX Still need to write tests for EntryScanTo and EntrySelectTo.
+
+$x = "";
+for my $i (1 .. 500) {
+    $x .= "This is line $i, out of 500\n";
+}
+
+Tk::catch { $e->destroy };
+$e = $mw->Entry;
+$e->insert(end => "This is a test string");
+$e->selection(qw(from 1));
+$e->selection(qw(to 18));
+ok($mw->SelectionGet, "his is a test str");
+
+Tk::catch { $e->destroy };
+$e = $mw->Entry(-show => "*");
+$e->insert(end => "This is a test string");
+$e->selection(qw(from 1));
+$e->selection(qw(to 18));
+ok($mw->SelectionGet, "*****************");
+
+Tk::catch { $e->destroy };
+$e = $mw->Entry;
+$e->insert("end", $x);
+$e->selectionFrom(0);
+$e->selectionTo("end");
+ok($mw->SelectionGet, $x);
+
+Tk::catch { $e->destroy };
+$e = $mw->Entry;
+$e->insert(0, "Text");
+$e->selectionFrom(0);
+$e->selectionTo(4);
+ok($mw->SelectionGet, "Text");
+$mw->SelectionClear;
+$e->selectionFrom(0);
+$e->selectionTo(4);
+ok($mw->SelectionGet, "Text");
+
+# No tests for EventuallyRedraw.
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry(qw(-width 10 -xscrollcommand), \&scroll)->pack;
+$e->update;
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 .............................));
+ok(join(" ", map { substr($_, 0, 8) } $e->xview), "0 0.827586");
+
+$e->configure(-show => 'X');
+$e->delete(qw(0 end));
+$e->insert(qw(0 .............................));
+ok(join(" ", map { substr($_, 0, 8) } $e->xview), "0 0.275862");
+
+$e->configure(-show => '.');
+$e->delete(qw(0 end));
+$e->insert(qw(0 XXXXXXXXXXXXXXXXXXXXXXXXXXXXX));
+ok(join(" ", map { substr($_, 0, 8) } $e->xview), "0 0.827586");
+
+$e->configure(-show => "");
+$e->delete(qw(0 end));
+ok(($e->xview)[$_], $_) for (0 .. 1);
+
+Tk::catch {$e->destroy};
+$e = $mw->Entry(qw(-width 10 -xscrollcommand), \&scroll, -font => $fixed)->pack;
+$e->update;
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 123));
+$e->update;
+ok(join(" ",@scrollInfo),"0 1");
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 0123456789abcdef));
+$e->xview(3);
+$e->update;
+ok(join(" ",@scrollInfo),"0.1875 0.8125");
+
+$e->delete(qw(0 end));
+$e->insert(qw(0 abcdefghijklmnopqrs));
+$e->xview(6);
+$e->update;
+ok(join(" ",map { sprintf "%8f", $_ } @scrollInfo),"0.315789 0.842105");
+
+Tk::catch {$e->destroy};
+my $err;
+eval {
+    sub Tk::Error { $err = $_[1] }
+    $e = $mw->Entry(qw(-width 5 -xscrollcommand thisisnotacommand))->pack;
+    $e->update;
+};
+ok($err =~ /Undefined subroutine &main::thisisnotacommand/);
+
+#      pack .e
+#      update
+#      rename bgerror {}
+#      list $x $errorInfo
+#  } {{invalid command name "thisisnotacommand"} {invalid command name "thisisnotacommand"
+#      while executing
+#  "thisisnotacommand 0 1"
+#      (horizontal scrolling command executed by entry)}}
+
+## XXX no interp hidden with Perl/Tk?
+#set l [interp hidden]
+#eval destroy [winfo children .]
+#  test entry-18.1 {Entry widget vs hiding} {
+#      catch {destroy .e}
+#      entry .e
+#      interp hide {} .e
+#      destroy .e
+#      list [winfo children .] [interp hidden]
+#  } [list {} $l]
+
+######################################################################
+# Additional tests
+
+$e->validate; # check whether validate method is defined
+ok(1);
+
+__END__
gdiff -up /dev/null '/usr/local/src/work/Tk800/t/leak.t'
Index: ./t/leak.t
--- ./t/leak.t	Thu Jan  1 01:00:00 1970
+++ ./t/leak.t	Mon Apr 21 17:53:48 2003
@@ -0,0 +1,139 @@
+#!/usr/bin/perl -w
+# -*- perl -*-
+
+#
+# $Id: leak.t.diff,v 1.1 2002/09/17 11:17:20 eserte Exp $
+# Author: Slaven Rezic
+#
+
+# Some leak tests. You need Devel::Leak installed and a debugging perl.
+# I usually use this arguments to perl's Configure:
+#
+#     -Doptimize='-g -DPERL_DEBUGGING_MSTATS' -Dusemymalloc='y'
+#
+# With the patches for tkGlue.c and pTkCallback.c (see the patches
+# subdirectory), the problems here should get away.
+#
+
+use strict;
+use Config;
+use Tk;
+use Tk::Button;
+use Tk::Canvas;
+
+BEGIN {
+    if (!eval q{
+	use Test;
+	use Devel::Leak;
+	die if $Config{optimize} !~ /-DPERL_DEBUGGING_MSTATS/;
+	1;
+    }) {
+	print "# tests only work with installed Test and Devel::Leak modules\n";
+	print "# also -DPERL_DEBUGGING_MSTATS have to be set\n";
+	print "1..1\n";
+	print "ok 1\n";
+	exit;
+    }
+}
+
+{
+    # gather all todos marked with "TODO: number"
+    my @todos;
+    open(DATA, $0) or die $!;
+    while(<DATA>) {
+	push @todos, $1 if (/^\#\s+TODO:\s+(\d+)/);
+    }
+    close DATA;
+    plan tests => 8, todo => [@todos];
+}
+
+my $mw = new MainWindow;
+my $handle;
+my($c1,$c2);
+
+# Tests for leaking subroutine set
+
+# first binding always creates some SVs
+$mw->bind("<Motion>" => [sub { warn }]);
+
+$c1 = Devel::Leak::NoteSV($handle);
+for(1..100) {
+    $mw->bind("<Motion>" => [sub { warn }]);
+}
+$c2 = Devel::Leak::NoteSV($handle);
+ok($c1, $c2);
+
+# TODO: 2
+$c1 = Devel::Leak::NoteSV($handle);
+for(1..100) {
+    $mw->bind("<Motion>" => sub { warn });
+}
+$c2 = Devel::Leak::NoteSV($handle);
+ok($c1, $c2);
+
+# TODO: 3
+$c1 = Devel::Leak::NoteSV($handle);
+for(1..100) {
+    $mw->bind("<Motion>" => \&test);
+}
+$c2 = Devel::Leak::NoteSV($handle);
+ok($c1, $c2);
+
+my $btn = $mw->Button(-command => sub { warn });
+# TODO: 4
+$c1 = Devel::Leak::NoteSV($handle);
+for(1..100) {
+    $btn->configure(-command => sub { warn });
+}
+$c2 = Devel::Leak::NoteSV($handle);
+ok($c1, $c2);
+
+# Tests for leaking Tk_GetUid (e.g. canvas items)
+
+my $c = $mw->Canvas->pack;
+$c->createLine(10,10,100,100, -tags => "a");
+
+$c1 = Devel::Leak::NoteSV($handle);
+for(1..100) {
+    $c->createLine(10,10,100,100,-tags => "a");
+    $c->delete("a");
+}
+$c2 = Devel::Leak::NoteSV($handle);
+ok($c1, $c2);
+
+# TODO: 6
+$c1 = Devel::Leak::NoteSV($handle);
+for(1..100) {
+    my $id = $c->createLine(10,10,100,100);
+    $c->delete($id);
+}
+$c2 = Devel::Leak::NoteSV($handle);
+ok($c1, $c2);
+
+# Tests for leaking widget destroys
+my $btn2 = $mw->Button;
+$btn2->destroy;
+
+# TODO: 7
+$c1 = Devel::Leak::NoteSV($handle);
+for(1..100) {
+    my $btn2 = $mw->Button;
+    $btn2->destroy;
+}
+$c2 = Devel::Leak::NoteSV($handle);
+ok($c1, $c2);
+
+# Tests for leaking fileevent callbacks
+$mw->fileevent(\*STDOUT, 'readable', sub { });
+$mw->fileevent(\*STDOUT, 'readable','');
+
+# TODO: 8
+$c1 = Devel::Leak::NoteSV($handle);
+$mw->fileevent(\*STDOUT, 'readable', sub { });
+$mw->fileevent(\*STDOUT, 'readable','');
+$c2 = Devel::Leak::CheckSV($handle);
+ok($c1, $c2);
+
+sub test { warn }
+
+__END__
gdiff -up /dev/null '/usr/local/src/work/Tk800/t/listbox.t'
Index: ./t/listbox.t
--- ./t/listbox.t	Thu Jan  1 01:00:00 1970
+++ ./t/listbox.t	Mon Apr 21 21:18:18 2003
@@ -0,0 +1,2098 @@
+#!/usr/bin/perl -w
+# -*- perl -*-
+
+# This file is the translation of a Tcl script to test out the "listbox"
+# command of Tk.  It is organized in the standard fashion for Tcl tests.
+#
+# Copyright (c) 1993-1994 The Regents of the University of California.
+# Copyright (c) 1994-1997 Sun Microsystems, Inc.
+# Copyright (c) 1998-1999 by Scriptics Corporation.
+# All rights reserved.
+#
+# RCS: @(#) $Id: listbox.t.diff,v 1.1 2002/09/17 11:17:27 eserte Exp $
+#
+# Translated to perl by Slaven Rezic
+#
+
+use strict;
+use vars qw($Listbox);
+
+use Tk;
+
+BEGIN {
+    $Listbox = "Listbox";
+    #$Listbox = "TextList";
+    eval "use Tk::$Listbox";
+}
+
+BEGIN {
+    if (!eval q{
+	use Test 1.13;
+	1;
+    }) {
+	print "1..0 # SKIP: tests only work with installed Test module:\n";
+	exit;
+    }
+}
+
+BEGIN {
+    if ($Tk::platform ne 'unix') {
+	print "1..0 # SKIP: tests are only successful on X11 platforms\n";
+	exit;
+    }
+}
+
+BEGIN { plan tests => 425 }
+
+my $partial_top;
+my $partial_lb;
+
+my $mw = new MainWindow;
+$mw->geometry('');
+$mw->raise;
+my $fixed = 'Courier -12';
+ok(Tk::Exists($mw), 1);
+
+# Create entries in the option database to be sure that geometry options
+# like border width have predictable values.
+$mw->optionAdd("*$Listbox.borderWidth",2);
+$mw->optionAdd("*$Listbox.highlightThickness",2);
+$mw->optionAdd("*$Listbox.font",'Helvetica -12 bold');
+
+my $lb = $mw->$Listbox->pack;
+ok(Tk::Exists($lb), 1);
+ok($lb->isa("Tk::$Listbox"), 1);
+$lb->update;
+
+resetGridInfo();
+
+foreach my $test
+    (['-background', '#ff0000', '#ff0000', 'non-existent',
+      'unknown color name "non-existent"'],
+     [qw{-bd 4 4 badValue}, q{bad screen distance "badValue"}],
+     ['-bg', '#ff0000', '#ff0000', 'non-existent',
+      'unknown color name "non-existent"'],
+     [qw{-borderwidth 1.3 1 badValue}, q{bad screen distance "badValue"}],
+     [qw{-cursor arrow arrow badValue}, q{bad cursor spec "badValue"}],
+# XXX error test skipped...
+     [qw{-exportselection yes 1}, "", #"xyzzy",
+      q{expected boolean value but got "xyzzy"}],
+     ['-fg', '#110022', '#110022', 'bogus', q{unknown color name "bogus"}],
+# XXX should test perl font object
+#     ['-font', 'Helvetica 12', 'Helvetica 12', '', "font \"\" doesn't exist"],
+     ['-foreground', '#110022', '#110022', 'bogus',
+      q{unknown color name "bogus"}],
+# XXX q{expected integer but got "20p"}
+     [qw{-height 30 30 20p}, "'20p' isn't numeric"],
+     ['-highlightbackground', '#112233', '#112233', 'ugly',
+      q{unknown color name "ugly"}],
+     ['-highlightcolor', '#123456', '#123456', 'bogus',
+      q{unknown color name "bogus"}],
+     [qw{-highlightthickness 6 6 bogus}, q{bad screen distance "bogus"}],
+     [qw{-highlightthickness -2 0}, '', ''],
+     [qw{-relief groove groove 1.5},
+      ($Tk::VERSION < 803
+       ? q{bad relief type "1.5": must be flat, groove, raised, ridge, solid, or sunken}
+       : q{bad relief "1.5": must be flat, groove, raised, ridge, solid, or sunken})],
+     ['-selectbackground', '#110022', '#110022', 'bogus',
+      q{unknown color name "bogus"}],
+     [qw{-selectborderwidth 1.3 1 badValue},
+      q{bad screen distance "badValue"}],
+     ['-selectforeground', '#654321', '#654321', 'bogus',
+      q{unknown color name "bogus"}],
+     [qw{-selectmode string string}, '', ''],
+     [qw{-setgrid false 0}, "", # XXX "lousy",
+      q{expected boolean value but got "lousy"}],
+     ['-takefocus', "any string", "any string", '', ''],
+     [qw{-width 45 45 3p}, "'3p' isn't numeric"],
+      #XXXq{expected integer but got "3p"}],
+#XXX Callback object      ['-xscrollcommand', 'Some command', 'Some command', '', ''],
+#XXX     ['-yscrollcommand', 'Another command', 'Another command', '', ''],
+#XXX not yet in 800.022     [qw{-listvar}, \$testVariable,  testVariable {}}, q{}],
+    ) {
+	my $name = $test->[0];
+
+	if ($Listbox eq 'TextList' &&
+	    $name =~ /^-(bg|fg|foreground|height|selectborderwidth)$/) {
+	    skip(1,1);
+	    if ($test->[3] ne "") {
+		skip(1,1);
+	    }
+	    next;
+	}
+
+	$lb->configure($name, $test->[1]);
+	ok(($lb->configure($name))[4], $test->[2], "configuration option $name");
+	ok($lb->cget($name), $test->[2], "cget call with $name");
+	if ($test->[3] ne "") {
+	    eval {
+		$lb->configure($name, $test->[3]);
+	    };
+	    ok($@ =~ /$test->[4]/, 1, "wrong error message for $name, got $@");
+	}
+	$lb->configure($name, ($lb->configure($name))[3]);
+    }
+
+if ($Listbox ne 'Listbox') {
+    skip(1, 1);
+} else {
+    eval { Tk::listbox() };
+    ok($@ =~ /Usage \$widget->listbox(...)/, 1, "wrong error message $@");
+}
+
+eval {
+    $lb->destroy;
+    $lb = $mw->$Listbox;
+};
+ok(Tk::Exists($lb), 1);
+ok($lb->class, "$Listbox");
+
+eval {
+    $lb->destroy;
+    $lb = $mw->$Listbox(-gorp => "foo");
+};
+ok($Tk::VERSION < 803
+   ? $@ =~ /Bad option \`-gorp\'/
+   : $@ =~ /unknown option \"-gorp\"/,
+   1, "wrong error message, got $@");
+ok(Tk::Exists($lb), 0);
+
+$lb = $mw->$Listbox(-width => 20, -height => 5, -bd => 4,
+		   -highlightthickness => 1,
+		   -selectborderwidth => 2)->pack;
+$lb->insert(0,
+	    'el0','el1','el2','el3','el4','el5','el6','el7','el8','el9','el10',
+	    'el11','el12','el13','el14','el15','el16','el17');
+$lb->update;
+eval { $lb->activate };
+ok($@ =~ /wrong \# args: should be "\.listbox.* activate index"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->activate("fooey") };
+ok($@ =~ /bad listbox index "fooey": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message, got $@");
+
+$lb->activate(3);
+ok($lb->index("active"), 3);
+
+$lb->activate(-1);
+ok($lb->index("active"), 0);
+
+$lb->activate(30);
+ok($lb->index("active"), 17);
+
+$lb->activate("end");
+ok($lb->index("active"), 17);
+
+eval { $lb->bbox };
+ok($@ =~ /wrong \# args: should be "\.listbox.* bbox index"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->bbox(qw/a b/) };
+ok($@ =~ /wrong \# args: should be "\.listbox.* bbox index"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->bbox("fooey") };
+ok($@ =~ /bad listbox index "fooey": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message, got $@");
+
+$lb->yview(3);
+$lb->update;
+ok($lb->bbox(2), undef);
+ok($lb->bbox(8), undef);
+
+# Used to generate a core dump before a bug was fixed (the last
+# element would be on-screen if it existed, but it doesn't exist).
+eval {
+    my $l2 = $mw->$Listbox;
+    $l2->pack(-side => "top");
+    $l2->waitVisibility;
+    my $x = $l2->bbox(0);
+    $l2->destroy;
+};
+ok($@, '', "wrong error message, got $@");
+
+$lb->yview(3);
+$lb->update;
+ok(join(" ", $lb->bbox(3)), "7 7 17 14");
+ok(scalar @{[$lb->bbox(3)]}, 4);
+ok(($lb->bbox(3))[0], 7);
+ok(($lb->bbox(3))[-1], 14);
+ok(join(" ", $lb->bbox(4)), "7 26 17 14");
+
+$lb->yview(0);
+$lb->update;
+ok($lb->bbox(-1), undef);
+ok(join(" ", $lb->bbox(0)), "7 7 17 14");
+
+$lb->yview("end");
+$lb->update;
+ok(join(" ", $lb->bbox(17)), "7 83 24 14");
+ok(join(" ", $lb->bbox("end")), "7 83 24 14");
+ok($lb->bbox(18), undef);
+
+{
+    my $t = $mw->Toplevel;
+    $t->geometry("+0+0");
+    my $lb = $t->$Listbox(-width => 10,
+			 -height => 5);
+    $lb->insert(0, "Short", "Somewhat longer",
+		"Really, quite a whole lot longer than can possibly fit on the screen",
+		"Short");
+    $lb->pack;
+    $lb->update;
+    $lb->xview(moveto => 0.2);
+    ok(join(" ", $lb->bbox(2)), '-72 39 393 14');
+    $t->destroy;
+}
+
+mkPartial();
+ok(join(" ", $partial_lb->bbox(3)), "5 56 24 14");
+ok(join(" ", $partial_lb->bbox(4)), "5 73 23 14");
+
+eval { $lb->cget };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* cget option\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->cget(qw/a b/) };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* cget option\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->cget(-gorp) };
+ok($@ =~ /unknown option "-gorp"/, 1, "wrong error message, got $@");
+
+ok($lb->cget(-setgrid), 0);
+# XXX why 25 in Tk800?
+ok(scalar @{[$lb->configure]}, ($Tk::VERSION < 803 ? 25 : 24));
+ok(join(" ", $lb->configure(-setgrid)),
+   "-setgrid setGrid SetGrid 0 0");
+eval { $lb->configure(-gorp) };
+ok($@ =~ /unknown option "-gorp"/, 1, "wrong error message, got $@");
+
+{
+    my $oldbd = $lb->cget(-bd);
+    my $oldht = $lb->cget(-highlightthickness);
+    $lb->configure(-bd => 3, -highlightthickness => 0);
+    ok($lb->cget(-bd), 3);
+    ok($lb->cget(-highlightthickness), 0);
+    $lb->configure(-bd => $oldbd);
+    $lb->configure(-highlightthickness => $oldht);
+}
+
+eval { $lb->curselection("a") };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* curselection\"/, 1,
+   "wrong error message, got $@");
+
+$lb->selection("clear", 0, "end");
+$lb->selection("set", 3, 6);
+$lb->selection("set", 9);
+ok(join(" ", $lb->curselection), "3 4 5 6 9");
+
+# alternative perl/Tk methods
+$lb->selectionClear(0, "end");
+$lb->selectionSet(3, 6);
+$lb->selectionSet(9);
+ok(join(" ", $lb->curselection), "3 4 5 6 9");
+
+eval { $lb->delete };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* delete firstIndex \?lastIndex\?\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->delete(qw/a b c/) };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* delete firstIndex \?lastIndex\?\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->delete("badindex") };
+ok($@ =~ /bad listbox index "badindex": must be active, anchor, end, \@x,y, or a number/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->delete(2, "123ab") };
+ok($@ =~ /bad listbox index "123ab": must be active, anchor, end, \@x,y, or a number/, 1,
+   "wrong error message, got $@");
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7));
+    $l2->delete(3);
+    ok($l2->get(2), "el2");
+    ok($l2->get(3), "el4");
+    ok($l2->index("end"), "7");
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7));
+    $l2->delete(2, 4);
+    ok($l2->get(1), "el1");
+    ok($l2->get(2), "el5");
+    ok($l2->index("end"), "5");
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7));
+    $l2->delete(-3, 2);
+    ok(join(" ", $l2->get(0, "end")), "el3 el4 el5 el6 el7");
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7));
+    $l2->delete(-3, -1);
+    ok(join(" ", $l2->get(0, "end")), join(" ", map { "el$_" } (0 .. 7)));
+    ok(scalar @{[$l2->get(0, "end")]}, 8);
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7));
+    $l2->delete(2, "end");
+    ok(join(" ", $l2->get(0, "end")), "el0 el1");
+    ok(scalar @{[$l2->get(0, "end")]}, 2);
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7));
+    $l2->delete(5, 20);
+    ok(join(" ", $l2->get(0, "end")), "el0 el1 el2 el3 el4");
+    ok(scalar @{[$l2->get(0, "end")]}, 5);
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7));
+    $l2->delete("end", 20);
+    ok(join(" ", $l2->get(0, "end")), "el0 el1 el2 el3 el4 el5 el6");
+    ok(scalar @{[$l2->get(0, "end")]}, 7);
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7));
+    $l2->delete(8, 20);
+    ok(join(" ", $l2->get(0, "end")), "el0 el1 el2 el3 el4 el5 el6 el7");
+    ok(scalar @{[$l2->get(0, "end")]}, 8);
+    $l2->destroy;
+}
+
+eval { $lb->get };
+ok($Tk::VERSION < 803
+   ? $@ =~ /wrong \# args: should be \"\.listbox.* get first \?last\?\"/
+   : $@ =~ /wrong \# args: should be \"\.listbox.* get firstIndex \?lastIndex\?\"/,
+   1,
+   "wrong error message, got $@");
+
+eval { $lb->get(qw/a b c/) };
+ok($Tk::VERSION < 803
+   ? $@ =~ /wrong \# args: should be \"\.listbox.* get first \?last\?\"/
+   : $@ =~ /wrong \# args: should be \"\.listbox.* get firstIndex \?lastIndex\?\"/,
+   1,
+   "wrong error message, got $@");
+
+# XXX ok in perl/Tk
+#  eval { $lb->get("2.4") };
+#  ok($@ =~ /bad listbox index "2.4": must be active, anchor, end, \@x,y, or a number/, 1,
+#     "wrong error message, got $@");
+
+eval { $lb->get("badindex") };
+ok($@ =~ /bad listbox index "badindex": must be active, anchor, end, \@x,y, or a number/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->get("end", "bogus") };
+ok($@ =~ /bad listbox index "bogus": must be active, anchor, end, \@x,y, or a number/, 1,
+   "wrong error message, got $@");
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7));
+    ok($l2->get(0), "el0");
+    ok($l2->get(3), "el3");
+    ok($l2->get("end"), "el7");
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    ok($l2->get(0), undef);
+    ok($l2->get("end"), undef);
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, qw(el0 el1 el2), "two words", qw(el4 el5 el6 el7));
+    ok($l2->get(3), "two words");
+    ok(($l2->get(3, "end"))[0], "two words");
+    ok(join(" ", $l2->get(3, "end")), "two words el4 el5 el6 el7");
+}
+
+ok($lb->get(-1), undef);
+ok($lb->get(-2, -1), undef);
+ok(join(" ", $lb->get(-2, 3)), "el0 el1 el2 el3");
+ok(scalar @{[ $lb->get(-2, 3) ]}, 4);
+
+ok(join(" ", $lb->get(12, "end")), "el12 el13 el14 el15 el16 el17");
+ok(scalar @{[ $lb->get(12, "end") ]}, 6);
+ok(join(" ", $lb->get(12, 20)), "el12 el13 el14 el15 el16 el17");
+ok(scalar @{[ $lb->get(12, 20) ]}, 6);
+
+ok($lb->get("end"), "el17");
+ok($lb->get(30), undef);
+ok($lb->get(30, 35), ());
+
+eval { $lb->index };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* index index\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->index(qw/a b/) };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* index index\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->index(qw/@/) };
+ok($@ =~ /bad listbox index "\@": must be active, anchor, end, \@x,y, or a number/, 1,
+   "wrong error message, got $@");
+
+ok($lb->index(2), 2);
+ok($lb->index(-1), -1);
+ok($lb->index("end"), 18);
+ok($lb->index(34), 34);
+
+eval { $lb->insert };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* insert index \?element element \.\.\.\?\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->insert("badindex") };
+ok($@ =~ /bad listbox index "badindex": must be active, anchor, end, \@x,y, or a number/, 1,
+   "wrong error message, got $@");
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert("end", qw/a b c d e/);
+    $l2->insert(3, qw/x y z/);
+    ok(join(" ", $l2->get(0, "end")), 'a b c x y z d e');
+    ok(scalar @{[ $l2->get(0, "end") ]}, 8);
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert("end", qw/a b c/);
+    $l2->insert(-1, qw/x/);
+    ok(join(" ", $l2->get(0, "end")), 'x a b c');
+    ok(scalar @{[ $l2->get(0, "end") ]}, 4);
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert("end", qw/a b c/);
+    $l2->insert("end", qw/x/);
+    ok(join(" ", $l2->get(0, "end")), 'a b c x');
+    ok(scalar @{[ $l2->get(0, "end") ]}, 4);
+    $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert("end", qw/a b c/);
+    $l2->insert(43, qw/x/);
+    ok(join(" ", $l2->get(0, "end")), 'a b c x');
+    ok(scalar @{[ $l2->get(0, "end") ]}, 4);
+    $l2->insert(4, qw/y/);
+    ok(join(" ", $l2->get(0, "end")), 'a b c x y');
+    $l2->insert(6, qw/z/);
+    ok(join(" ", $l2->get(0, "end")), 'a b c x y z');
+    $l2->destroy;
+}
+
+eval { $lb->nearest };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* nearest y\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->nearest(qw/a b/) };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* nearest y\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->nearest("badindex") };
+ok($@ =~ /\'badindex\' isn\'t numeric/, 1,
+   "wrong error message, got $@");
+
+$lb->yview(3);
+ok($lb->nearest(1000), 7);
+
+eval { $lb->scan };
+ok($Tk::VERSION < 803
+   ? $@ =~ /wrong \# args: should be \"\.listbox.* scan mark x y\" or \"\.listbox.* scan dragto x y \?gain\?\"/
+   : $@ =~ /wrong \# args: should be \"\.listbox.* scan mark\|dragto x y\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->scan(qw/a b/) };
+ok($Tk::VERSION < 803
+   ? $@ =~ /wrong \# args: should be \"\.listbox.* scan mark x y\" or \"\.listbox.* scan dragto x y \?gain\?\"/
+   : $@ =~ /wrong \# args: should be \"\.listbox.* scan mark\|dragto x y\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->scan(qw/a b c d/) };
+ok($Tk::VERSION < 803
+   ? $@ =~ /\'b\' isn\'t numeric/
+   : $@ =~ /wrong \# args: should be \"\.listbox.* scan mark\|dragto x y\"/,
+   1, "wrong error message, got $@");
+
+eval { $lb->scan(qw/foo bogus 2/) };
+ok($@ =~ /\'bogus\' isn\'t numeric/,
+   1, "wrong error message, got $@");
+
+## ok in perl
+#  eval { $lb->scan(qw/foo 2 2.3/) };
+#  ok($@ =~ /'2.3' isn't numeric/, 1,
+#     "wrong error message, got $@");
+
+eval { $lb->scan(qw/foo 2 3/) };
+ok($Tk::VERSION < 803
+   ? $@ =~ /bad scan option \"foo\": must be mark or dragto/
+   : $@ =~ /bad option \"foo\": must be mark, or dragto/,
+   1, "wrong error message, got $@");
+
+{
+    my $t = $mw->Toplevel;
+    $t->geometry("+0+0");
+    my $lb = $t->$Listbox(-width => 10, -height => 5);
+    $lb->insert(0, "Short", "Somewhat longer", 
+		"Really, quite a whole lot longer than can possibly fit on the screen", "Short",
+		qw/a b c d e f g h i j/);
+    $lb->pack;
+    $lb->update;
+    $lb->scan("mark", 100, 140);
+    $lb->scan("dragto", 90, 137);
+    $lb->update;
+    ok(join(",",$lb->xview) =~ /^0\.24936.*,0\.42748.*$/, 1,
+       join(",",$lb->xview));
+    ok(join(",",$lb->yview) =~ /^0\.071428.*,0\.428571.*$/, 1,
+       join(",",$lb->yview));
+    $t->destroy;
+}
+
+eval { $lb->see };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* see index\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->see("a","b") };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* see index\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->see("badindex") };
+ok($@ =~ /bad listbox index "badindex": must be active, anchor, end, \@x,y, or a number/, 1,
+   "wrong error message, got $@");
+
+$lb->yview(7);
+$lb->see(7);
+ok($lb->index('@0,0'), 7);
+
+$lb->yview(7);
+$lb->see(11);
+ok($lb->index('@0,0'), 7);
+
+$lb->yview(7);
+$lb->see(6);
+ok($lb->index('@0,0'), 6);
+
+$lb->yview(7);
+$lb->see(5);
+ok($lb->index('@0,0'), 3);
+
+$lb->yview(7);
+$lb->see(12);
+ok($lb->index('@0,0'), 8);
+
+$lb->yview(7);
+$lb->see(13);
+ok($lb->index('@0,0'), 11);
+
+$lb->yview(7);
+$lb->see(-1);
+ok($lb->index('@0,0'), 0);
+
+$lb->yview(7);
+$lb->see("end");
+ok($lb->index('@0,0'), 13);
+
+$lb->yview(7);
+$lb->see(322);
+ok($lb->index('@0,0'), 13);
+
+mkPartial();
+$partial_lb->see(4);
+ok($partial_lb->index('@0,0'), 1);
+
+eval { $lb->selection };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* selection option index \?index\?\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->selection("a") };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* selection option index \?index\?\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->selection(qw/a b c d/) };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* selection option index \?index\?\"/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->selection(qw/a bogus/) };
+ok($@ =~ /bad listbox index \"bogus\": must be active, anchor, end, \@x,y, or a number/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->selection(qw/a 0 lousy/) };
+ok($@ =~ /bad listbox index \"lousy\": must be active, anchor, end, \@x,y, or a number/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->selection(qw/anchor 0 0/) };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* selection anchor index\"/, 1,
+   "wrong error message, got $@");
+
+$lb->selection("anchor", 5);
+ok($lb->index("anchor"), 5);
+$lb->selectionAnchor(0);
+ok($lb->index("anchor"), 0);
+
+$lb->selectionAnchor(-1);
+ok($lb->index("anchor"), 0);
+$lb->selectionAnchor("end");
+ok($lb->index("anchor"), 17);
+$lb->selectionAnchor(44);
+ok($lb->index("anchor"), 17);
+
+$lb->selection("clear", 0, "end");
+$lb->selection("set", 2, 8);
+$lb->selection("clear", 3, 4);
+ok(join(",",$lb->curselection), "2,5,6,7,8");
+
+$lb->selectionClear(0, "end");
+$lb->selectionSet(2, 8);
+$lb->selectionClear(3, 4);
+ok(join(",",$lb->curselection), "2,5,6,7,8");
+
+eval { $lb->selection(qw/includes 0 0/) };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* selection includes index\"/, 1,
+   "wrong error message, got $@");
+
+$lb->selectionClear(0, "end");
+$lb->selectionSet(2,8);
+$lb->selectionClear(4);
+ok($lb->selection("includes", 3), 1);
+ok($lb->selection("includes", 4), 0);
+ok($lb->selection("includes", 5), 1);
+ok($lb->selectionIncludes(3), 1);
+
+$lb->selectionSet(0, "end");
+ok($lb->selectionIncludes(-1), 0);
+
+$lb->selectionClear(0, "end");
+$lb->selectionSet("end");
+ok($lb->selection("includes", "end"), 1);
+
+$lb->selectionClear(0, "end");
+$lb->selectionSet("end");
+ok($lb->selection("includes", 44), 0);
+
+{
+    my $l2 = $mw->$Listbox;
+    ok($l2->selectionIncludes(0), 0);
+    $l2->destroy;
+}
+
+$lb->selection(qw(clear 0 end));
+$lb->selection(qw(set 2));
+$lb->selection(qw(set 5 7));
+ok(join(" ", $lb->curselection), "2 5 6 7");
+ok(scalar @{[$lb->curselection]}, 4);
+$lb->selection(qw(set 5 7));
+ok(join(" ", $lb->curselection), "2 5 6 7");
+ok(scalar @{[$lb->curselection]}, 4);
+
+eval { $lb->selection(qw/badOption 0 0/) };
+ok($Tk::VERSION < 803
+   ? $@ =~ /bad selection option \"badOption\": must be anchor, clear, includes, or set/
+   : $@ =~ /bad option \"badOption\": must be anchor, clear, includes, or set/,
+   1, "wrong error message, got $@");
+
+eval { $lb->size(qw/a/) };
+ok($@ =~ /wrong \# args: should be \"\.listbox.* size\"/, 1,
+   "wrong error message, got $@");
+
+ok($lb->size, 18);
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->update;
+    ok(($l2->xview)[0], 0);
+    ok(($l2->xview)[1], 1);
+    $l2->destroy;
+}
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox(-width => 10, -height => 5, -font => $fixed);
+$lb->insert(qw/0 a b c d e f g h i j k l m n o p q r s t/);
+$lb->pack;
+$lb->update;
+ok(($lb->xview)[0], 0);
+ok(($lb->xview)[1], 1);
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox(-width => 10, -height => 5, -font => $fixed);
+$lb->insert(qw/0 a b c d e f g h i j k l m n o p q r s t/);
+$lb->insert(qw/1 0123456789a123456789b123456789c123456789d123456789/);
+$lb->pack;
+$lb->update;
+
+$lb->xview(4);
+ok(join(",",$lb->xview), "0.08,0.28");
+
+eval { $lb->xview("foo") };
+ok($@ =~ /\'foo\' isn\'t numeric/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->xview("zoom", "a", "b") };
+ok($@ =~ /unknown option \"zoom\": must be moveto or scroll/, 1,
+   "wrong error message, got $@");
+
+$lb->xview(0);
+$lb->xview(moveto => 0.4);
+$lb->update;
+ok(($lb->xview)[0], 0.4);
+ok(($lb->xview)[1], 0.6);
+
+$lb->xview(0);
+$lb->xview(scroll => 2, "units");
+$lb->update;
+ok("@{[ $lb->xview ]}", '0.04 0.24');
+
+$lb->xview(30);
+$lb->xview(scroll => -1, "pages");
+$lb->update;
+ok("@{[ $lb->xview ]}", '0.44 0.64');
+
+$lb->configure(-width => 1);
+$lb->update;
+$lb->xview(30);
+$lb->xview("scroll", -4, "pages");
+$lb->update;
+ok("@{[ $lb->xview ]}", '0.52 0.54');
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox->pack;
+$lb->update;
+ok(($lb->yview)[0], 0);
+ok(($lb->yview)[1], 1);
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox->pack;
+$lb->insert(0, "el1");
+$lb->update;
+ok(($lb->yview)[0], 0);
+ok(($lb->yview)[1], 1);
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox(-width => 10, -height => 5, -font => $fixed);
+$lb->insert(0,'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o',
+	    'p','q','r','s','t');
+$lb->pack;
+$lb->update;
+$lb->yview(4);
+$lb->update;
+ok(($lb->yview)[0], 0.2);
+ok(($lb->yview)[1], 0.45);
+
+mkPartial();
+ok(($partial_lb->yview)[0], 0);
+ok(($partial_lb->yview)[1] =~ /^0\.26666/, 1,
+   "got " . (($partial_lb->yview)[1]));
+
+eval { $lb->xview("foo") };
+ok($@ =~ /\'foo\' isn\'t numeric/, 1,
+   "wrong error message, got $@");
+
+eval { $lb->xview("foo", "a", "b") };
+ok($@ =~ /unknown option \"foo\": must be moveto or scroll/, 1,
+   "wrong error message, got $@");
+
+$lb->yview(0);
+$lb->yview(moveto => 0.31);
+ok("@{[ $lb->yview ]}", "0.3 0.55");
+
+$lb->yview(2);
+$lb->yview(scroll => 2 => "pages");
+ok("@{[ $lb->yview ]}", "0.4 0.65");
+
+$lb->yview(10);
+$lb->yview(scroll => -3 => "units");
+ok("@{[ $lb->yview ]}", "0.35 0.6");
+
+$lb->configure(-height => 2);
+$lb->update;
+$lb->yview(15);
+$lb->yview(scroll => -4 => "pages");
+ok("@{[ $lb->yview ]}", "0.55 0.65");
+
+# No tests for DestroyListbox:  I can't come up with anything to test
+# in this procedure.
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox(-setgrid => 1, -width => 25, -height => 15);
+$lb->pack;
+$mw->update;
+ok(getsize($mw), "25x15");
+$lb->configure(-setgrid => 0);
+$mw->update;
+ok(getsize($mw), "185x263");
+
+resetGridInfo();
+
+$lb->configure(-highlightthickness => -3);
+ok($lb->cget(-highlightthickness), 0);
+
+$lb->configure(-exportselection => 0);
+$lb->delete(0, "end");
+$lb->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7 el8));
+$lb->selection("set", 3, 5);
+$lb->configure(-exportselection => 1);
+ok($mw->SelectionGet, "el3\nel4\nel5");
+
+my $e = $mw->Entry;
+$e->insert(0, "abc");
+$e->selection("from", 0);
+$e->selection("to", 2);
+$lb->configure(-exportselection => 0);
+$lb->delete(0, "end");
+$lb->insert(0, qw(el0 el1 el2 el3 el4 el5 el6 el7 el8));
+$lb->selectionSet(3, 5);
+$lb->selectionClear(3, 5);
+$lb->configure(-exportselection => 1);
+ok($mw->SelectionOwner, $e);
+ok($mw->SelectionGet, "ab");
+$e->destroy;
+
+$mw->SelectionClear;
+$lb->configure(-exportselection => 1);
+$lb->delete(0, "end");
+$lb->insert(qw(0 el0 el1 el2 el3 el4 el5 el6 el7 el8));
+$lb->selection("set", 1, 1);
+ok($mw->SelectionGet, "el1");
+ok($lb->curselection, "1");
+$lb->configure(-exportselection => 0);
+eval { $mw->SelectionGet };
+ok($@ =~ /PRIMARY selection doesn\'t exist or form \"STRING\" not defined/, 1,
+   "wrong error message: $@");
+ok($lb->curselection, "1");
+$lb->selection("clear", 0, "end");
+eval { $mw->SelectionGet };
+ok($@ =~ /PRIMARY selection doesn\'t exist or form \"STRING\" not defined/, 1,
+   "wrong error message: $@");
+ok($lb->curselection, ());
+$lb->selection("set", 1, 3);
+eval { $mw->SelectionGet };
+ok($@ =~ /PRIMARY selection doesn\'t exist or form \"STRING\" not defined/, 1,
+   "wrong error message: $@");
+ok("@{[$lb->curselection]}", "1 2 3");
+$lb->configure(-exportselection => 1);
+ok($mw->SelectionGet, "el1\nel2\nel3");
+ok("@{[$lb->curselection]}", "1 2 3");
+
+$lb->destroy;
+$mw->geometry("300x300");
+$mw->update;
+$mw->geometry("");
+$mw->withdraw;
+$lb = $mw->$Listbox(-font => $fixed, -width => 15, -height => 20);
+$lb->pack;
+$lb->update;
+$mw->deiconify;
+ok(getsize($mw), "115x328");
+$lb->configure(-setgrid => 1);
+$mw->update;
+ok(getsize($mw), "15x20");
+
+$lb->destroy;
+$mw->withdraw;
+$lb = $mw->$Listbox(-font => $fixed, -width => 30, -height => 20,
+		   -setgrid => 1);
+$mw->geometry("+0+0");
+$lb->pack;
+$mw->update;
+$mw->deiconify;
+ok(getsize($mw), "30x20");
+$mw->geometry("26x15");
+$mw->update;
+ok(getsize($mw), "26x15");
+$lb->configure(-setgrid => 1);
+$lb->update;
+ok(getsize($mw), "26x15");
+
+$mw->geometry("");
+$lb->destroy;
+resetGridInfo();
+
+my @log;
+
+$lb = $mw->$Listbox(-width => 15, -height => 20,
+		   -xscrollcommand => sub { record("x", @_) },
+		   -yscrollcommand => [qw/record y/],
+		  )->pack;
+$lb->update;
+$lb->configure(-fg => "black");
+@log = ();
+$lb->update;
+ok($log[0], "y 0 1");
+ok($log[1], "x 0 1");
+
+$lb->destroy;
+my @x = qw/a b c d/;
+#XXX these are missing: -listvar tests, because 800.023 do not know this option
+# $lb = $mw->$Listbox(-listvar => \@x);
+# ok(join(",",$lb->get(0, "end")), "a,b,c,d");
+
+#test listbox-4.10 {ConfigureListbox, no listvar -> existing listvar} {
+#    catch {destroy $_lb}
+#    set x [list a b c d]
+#    listbox $_lb
+#    $_lb insert end 1 2 3 4
+#    $_lb configure -listvar x
+#    $_lb get 0 end
+#} [list a b c d]
+#test listbox-4.11 {ConfigureListbox procedure, listvar -> no listvar} {
+#    catch {destroy $_lb}
+#    set x [list a b c d]
+#    listbox $_lb -listvar x
+#    $_lb configure -listvar {}
+#    $_lb insert end 1 2 3 4
+#    list $x [$_lb get 0 end]
+#} [list [list a b c d] [list a b c d 1 2 3 4]]
+#test listbox-4.12 {ConfigureListbox procedure, listvar -> different listvar} {
+#    catch {destroy $_lb}
+#    set x [list a b c d]
+#    set y [list 1 2 3 4]
+#    listbox $_lb 
+#    $_lb configure -listvar x
+#    $_lb configure -listvar y
+#    $_lb insert end 5 6 7 8
+#    list $x $y
+#} [list [list a b c d] [list 1 2 3 4 5 6 7 8]]
+#test listbox-4.13 {ConfigureListbox, no listvar -> non-existant listvar} {
+#    catch {destroy $_lb}
+#    catch {unset x}
+#    listbox $_lb
+#    $_lb insert end a b c d
+#    $_lb configure -listvar x
+#    set x
+#} [list a b c d]
+#test listbox-4.14 {ConfigureListbox, non-existant listvar} {
+#    catch {destroy $_lb}
+#    catch {unset x}
+#    listbox $_lb -listvar x
+#    list [info exists x] $x
+#} [list 1 {}]
+#test listbox-4.15 {ConfigureListbox, listvar -> non-existant listvar} {
+#    catch {destroy $_lb}
+#    catch {unset y}
+#    set x [list a b c d]
+#    listbox $_lb -listvar x
+#    $_lb configure -listvar y
+#    list [info exists y] $y
+#} [list 1 [list a b c d]]
+#test listbox-4.16 {ConfigureListbox, listvar -> same listvar} {
+#    catch {destroy $_lb}
+#    set x [list a b c d]
+#    listbox $_lb -listvar x
+#    $_lb configure -listvar x
+#    set x
+#} [list a b c d]
+#test listbox-4.17 {ConfigureListbox, no listvar -> no listvar} {
+#    catch {destroy $_lb}
+#    listbox $_lb
+#    $_lb insert end a b c d
+#    $_lb configure -listvar {}
+#    $_lb get 0 end
+#} [list a b c d]
+#test listbox-4.18 {ConfigureListbox, no listvar -> bad listvar} {
+#    catch {destroy $_lb}
+#    listbox $_lb
+#    $_lb insert end a b c d
+#    set x {this is a " bad list}
+#    catch {$_lb configure -listvar x} result
+#    list [$_lb get 0 end] [$_lb cget -listvar] $result
+#} [list [list a b c d] {} \
+#	"unmatched open quote in list: invalid listvar value"]
+
+# No tests for DisplayListbox:  I don't know how to test this procedure.
+
+Tk::catch { $lb->destroy if Tk::Exists($lb) };
+$lb = $mw->$Listbox(-font => $fixed, -width => 15, -height => 20)->pack;
+ok($lb->reqwidth, 115);
+ok($lb->reqheight, 328);
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox(-font => $fixed, -width => 0, -height => 10)->pack;
+$lb->update;
+ok($lb->reqwidth, 17);
+ok($lb->reqheight, 168);
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox(-font => $fixed, -width => 0, -height => 10,
+		   -bd => 3)->pack;
+$lb->insert(0, "Short", "Really much longer", "Longer");
+$lb->update;
+ok($lb->reqwidth, 138);
+ok($lb->reqheight, 170);
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox(-font => $fixed, -width => 10, -height => 0,
+		  )->pack;
+$lb->update;
+ok($lb->reqwidth, 80);
+ok($lb->reqheight, 24);
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox(-font => $fixed, -width => 10, -height => 0,
+		   -highlightthickness => 0)->pack;
+$lb->insert(0, "Short", "Really much longer", "Longer");
+$lb->update;
+ok($lb->reqwidth, 76);
+ok($lb->reqheight, 52);
+
+eval { $lb->destroy };
+# If "0" in selected font had 0 width, caused divide-by-zero error.
+$lb = $mw->$Listbox(-font => '{open look glyph}')->pack;
+$lb->update;
+
+eval { $lb->destroy };
+$lb = $mw->$Listbox(-height => 2,
+		   -xscrollcommand => sub { record("x", @_) },
+		   -yscrollcommand => sub { record("y", @_) })->pack;
+$lb->update;
+
+$lb->delete(0, "end");
+$lb->insert(qw/end a b c d/);
+$lb->insert(qw/5 x y z/);
+$lb->insert(qw/2 A/);
+$lb->insert(qw/0 q r s/);
+ok(join(" ",$lb->get(qw/0 end/)), 'q r s a b A c d x y z');
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->selection(qw/anchor 2/);
+$lb->insert(qw/2 A B/);
+ok($lb->index(qw/anchor/), 4);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->selection(qw/anchor 2/);
+$lb->insert(qw/3 A B/);
+ok($lb->index(qw/anchor/), 2);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->yview(qw/3/);
+$lb->update;
+$lb->insert(qw/2 A B/);
+ok($lb->index(q/@0,0/), 5);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->yview(qw/3/);
+$lb->update;
+$lb->insert(qw/3 A B/);
+ok($lb->index(q/@0,0/), 3);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->activate(qw/5/);
+$lb->insert(qw/5 A B/);
+ok($lb->index(qw/active/), 7);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->activate(qw/5/);
+$lb->insert(qw/6 A B/);
+ok($lb->index(qw/active/), 5);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c/);
+ok($lb->index(qw/active/), 2);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0/);
+ok($lb->index(qw/active/), 0);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b/, "two words", qw/c d e f g h i j/);
+$lb->update;
+@log = ();
+$lb->insert(qw/0 word/);
+$lb->update;
+ok("@log" =~ /^y 0 0\.166666/);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b/, "two words", qw/c d e f g h i j/);
+$lb->update;
+@log = ();
+$lb->insert(0, "much longer entry");
+$lb->update;
+ok("$log[0]" =~ /^y 0 0\.166666/);
+ok("$log[1]", "x 0 1");
+
+{
+    my $l2 = $mw->$Listbox(-width => 0, -height => 0)->pack(-side => "top");
+    $l2->insert(0, "a", "b", "two words", "c", "d");
+    ok($l2->reqwidth, 80);
+    ok($l2->reqheight, 93);
+    $l2->insert(0, "much longer entry");
+    ok($l2->reqwidth, 122);
+    ok($l2->reqheight, 110);
+    $l2->destroy;
+}
+
+{
+      my @x = qw(a b c d);
+    ## -listvar XXX
+#      my $l2 = $mw->$Listbox(-listvar => \@x);
+#      $l2->insert(0, 1 .. 4);
+#      ok(join(" ", @x), "1 2 3 4 a b c d");
+#      ok(scalar @x, 8);
+#      ok($x[0], 1);
+#      ok($x[-1], "d");
+#      $l2->destroy;
+}
+
+{
+    my $l2 = $mw->$Listbox;
+    $l2->insert(0, 0 .. 4);
+    $l2->selection("set", 2, 4);
+    $l2->insert(0, "a");
+    ok("@{[ $l2->curselection ]}", "3 4 5");
+    ok(scalar @{[ $l2->curselection ]}, 3);
+    $l2->destroy;
+}
+
+$lb->delete(0, "end");
+$lb->insert(0, qw/a b c d e f g h i j/);
+$lb->selectionSet(1, 6);
+$lb->delete(4, 3);
+ok($lb->size, 10);
+ok($mw->SelectionGet, "b
+c
+d
+e
+f
+g");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->selection(qw/set 3 6/);
+$lb->delete(qw/4 4/);
+ok($lb->size, 9);
+ok($lb->get(4), "f");
+ok("@{[ $lb->curselection ]}", "3 4 5");
+ok(scalar @{[ $lb->curselection ]}, 3);
+ok(($lb->curselection)[0], 3);
+ok(($lb->curselection)[-1], 5);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->delete(qw/0 3/);
+ok($lb->size, 6);
+ok($lb->get(0), "e");
+ok($lb->get(1), "f");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->delete(qw/8 1000/);
+ok($lb->size, 8);
+ok($lb->get(7), "h");
+
+$lb-> delete(0, qw/end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->selection(qw/anchor 2/);
+$lb->delete(qw/0 1/);
+ok($lb->index(qw/anchor/), 0);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->selection(qw/anchor 2/);
+$lb->delete(qw/2/);
+ok($lb->index(qw/anchor/), 2);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->selection(qw/anchor 4/);
+$lb->delete(qw/2 5/);
+ok($lb->index(qw/anchor/), 2);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->selection(qw/anchor 3/);
+$lb->delete(qw/4 5/);
+ok($lb->index(qw/anchor/), 3);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->yview(qw/3/);
+$lb->update;
+$lb->delete(qw/1 2/);
+ok($lb->index(q/@0,0/), 1);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->yview(qw/3/);
+$lb->update;
+$lb->delete(qw/3 4/);
+ok($lb->index(q/@0,0/), 3);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->yview(qw/3/);
+$lb->update;
+$lb->delete(qw/4 6/);
+ok($lb->index(q/@0,0/), 3);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->yview(qw/3/);
+$lb->update;
+$lb->delete(qw/3 end/);
+ok($lb->index(q/@0,0/), 1);
+
+mkPartial();
+$partial_lb->yview(8);
+$mw->update;
+$partial_lb->delete(10, 13);
+ok($partial_lb->index('@0,0'), 7);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->activate(qw/6/);
+$lb->delete(qw/3 4/);
+ok($lb->index(qw/active/), 4);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->activate(qw/6/);
+$lb->delete(qw/5 7/);
+ok($lb->index(qw/active/), 5);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->activate(qw/6/);
+$lb->delete(qw/5 end/);
+ok($lb->index(qw/active/), 4);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->activate(qw/6/);
+$lb->delete(qw/0 end/);
+ok($lb->index(qw/active/), 0);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c/, "two words", qw/d e f g h i j/);
+$lb->update;
+@log = ();
+$lb->delete(qw/4 6/);
+$lb->update;
+ok($log[0], "y 0 0.25");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c/, "two words", qw/d e f g h i j/);
+$lb->update;
+@log = ();
+$lb->delete(qw/3/);
+$lb->update;
+ok($log[0], "y 0 0.2");
+ok($log[1], "x 0 1");
+
+{
+    my $l2 = $mw->$Listbox(-width => 0, -height => 0)->pack(-side => "top");
+    $l2->insert(0, "a", "b", "two words", qw/c d e f g/);
+    ok($l2->reqwidth, 80);
+    ok($l2->reqheight, 144);
+    $l2->delete(2, 4);
+    ok($l2->reqwidth, 17);
+    ok($l2->reqheight, 93);
+    $l2->destroy;
+}
+
+## -listvar
+#  catch {destroy .l2}
+#  test listbox-7.21 {DeleteEls procedure, check -listvar update} {
+#      catch {destroy .l2}
+#      set x [list a b c d]
+#      listbox .l2 -listvar x
+#      .l2 delete 0 1
+#      set x
+#  } [list c d]
+
+$lb->destroy;
+$lb = $mw->$Listbox(-setgrid => 1)->pack;
+$lb->update;
+ok(getsize($mw), "20x10");
+$lb->destroy;
+ok(getsize($mw), "150x178");
+ok(Tk::Exists($lb), 0);
+
+resetGridInfo();
+
+$lb = $mw->$Listbox(-height => 5, -width => 10);
+$lb->insert(qw/0 a b c/, "A string that is very very long",
+	    qw/ d e f g h i j k/);
+$lb->pack;
+$lb->update;
+$lb->place(qw/-width 50 -height 80/);
+$lb->update;
+ok(join(" ", $lb->xview) =~ /^0 0\.2222/);
+ok(join(" ", $lb->yview) =~ /^0 0\.3333/);
+
+map { $_->destroy } $mw->children;
+my $l1 = $mw->$Listbox(-bg => "#543210");
+my $l2 = $l1;
+ok(join(",", map { $_->PathName } $mw->children) =~ /^\.listbox\d*$/, 1);
+ok($l2->cget(-bg), "#543210");
+$l2->destroy;
+
+my $top = $mw->Toplevel;
+$top->geometry("+0+0");
+my $top_lb = $top->$Listbox(-setgrid => 1,
+			   -width => 20,
+			   -height => 10)->pack;
+$top_lb->update;
+ok($top->geometry, "20x10+0+0");
+$top_lb->destroy;
+ok($top->geometry, "150x178+0+0");
+
+$lb = $mw->$Listbox->pack;
+$lb->delete(0, "end");
+$lb->insert(qw/0 el0 el1 el2 el3 el4 el5 el6 el7 el8 el9 el10 el11/);
+$lb->activate(3);
+ok($lb->index("active"), 3);
+$lb->activate(6);
+ok($lb->index("active"), 6);
+
+$lb->selection(qw/anchor 2/);
+ok($lb->index(qw/anchor/), 2);
+
+$lb->insert(qw/end A B C D E/);
+$lb->selection(qw/anchor end/);
+$lb->delete(qw/12 end/);
+ok($lb->index("anchor"), 12);
+ok($lb->index("end"), 12);
+
+eval { $lb->index("a") };
+ok($@ =~ /bad listbox index \"a\": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message $@");
+
+eval { $lb->index("\@") };
+ok($@ =~ /bad listbox index \"\@\": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message $@");
+
+eval { $lb->index("\@foo") };
+ok($@ =~ /bad listbox index \"\@foo\": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message $@");
+
+eval { $lb->index("\@1x3") };
+ok($@ =~ /bad listbox index \"\@1x3\": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message $@");
+
+eval { $lb->index("\@1,") };
+ok($@ =~ /bad listbox index \"\@1,\": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message $@");
+
+eval { $lb->index("\@1,foo") };
+ok($@ =~ /bad listbox index \"\@1,foo\": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message $@");
+
+eval { $lb->index("\@1,2x") };
+ok($@ =~ /bad listbox index \"\@1,2x\": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message $@");
+
+eval { $lb->index("1xy") };
+ok($@ =~ /bad listbox index \"1xy\": must be active, anchor, end, \@x,y, or a number/, 1, "wrong error message $@");
+
+ok($lb->index("end"), 12);
+
+ok($lb->get(qw/end/), "el11");
+
+$lb->delete(qw/0 end/);
+ok($lb->index(qw/end/), 0);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 el0 el1 el2 el3 el4 el5 el6 el7 el8 el9 el10 el11/);
+$lb->update;
+
+ok($lb->index(q/@5,57/), 3);
+ok($lb->index(q/@5,58/), 3);
+
+ok($lb->index(qw/3/), 3);
+ok($lb->index(qw/20/), 20);
+
+ok($lb->get(qw/20/), undef);
+
+ok($lb->index(qw/-2/), -2);
+
+$lb->delete(qw/0 end/);
+ok($lb->index(qw/1/), 1);
+
+$lb->destroy;
+$lb = $mw->$Listbox(-height => 5)->pack;
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->yview(qw/3/);
+$lb->update;
+ok($lb->index(q/@0,0/), 3);
+$lb->yview(qw/-1/);
+$lb->update;
+ok($lb->index(q/@0,0/), 0);
+
+$lb->destroy;
+$lb = $mw->$Listbox(qw/-height 5/)->pack;
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->yview(qw/3/);
+$lb->update;
+ok($lb->index(q/@0,0/), 3);
+$lb->yview(qw/20/);
+$lb->update;
+ok($lb->index(q/@0,0/), 5);
+
+$lb->destroy;
+$lb = $mw->$Listbox(qw/-height 5 -yscrollcommand/, [qw/record y/])->pack;
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->update;
+@log = ();
+$lb->yview(qw/2/);
+$lb->update;
+ok("@{[ $lb->yview ]}", "0.2 0.7");
+ok($log[0], "y 0.2 0.7");
+
+$lb->destroy;
+$lb = $mw->$Listbox(qw/-height 5 -yscrollcommand/, [qw/record y/])->pack;
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->update;
+@log = ();
+$lb->yview(qw/8/);
+$lb->update;
+ok("@{[ $lb->yview ]}", "0.5 1");
+ok($log[0], "y 0.5 1");
+
+$lb->destroy;
+$lb = $mw->$Listbox(qw/-height 5 -yscrollcommand/, [qw/record y/])->pack;
+$lb->insert(qw/0 a b c d e f g h i j/);
+$lb->yview(qw/3/);
+$lb->update;
+@log = ();
+$lb->yview(qw/3/);
+$lb->update;
+ok("@{[ $lb->yview ]}", "0.3 0.8");
+ok(scalar @log, 0);
+
+mkPartial();
+$partial_lb->yview(13);
+ok($partial_lb->index('@0,0'), 11);
+
+$lb->destroy;
+$lb = $mw->$Listbox(-font => $fixed,
+		   -xscrollcommand => ["record", "x"],
+		   -width => 10);
+$lb->insert(qw/0 0123456789a123456789b123456789c123456789d123456789e123456789f123456789g123456789h123456789i123456789/);
+$lb->pack;
+$lb->update;
+
+@log = ();
+$lb->xview(qw/99/);
+$lb->update;
+ok("@{[ $lb->xview ]}", "0.9 1");
+ok(($lb->xview)[0], 0.9);
+ok(($lb->xview)[1], 1);
+ok($log[0], "x 0.9 1");
+
+@log = ();
+$lb->xview(qw/moveto -.25/);
+$lb->update;
+ok("@{[ $lb->xview ]}", "0 0.1");
+ok($log[0], "x 0 0.1");
+
+$lb->xview(qw/10/);
+$lb->update;
+@log = ();
+$lb->xview(qw/10/);
+$lb->update;
+ok("@{[ $lb->xview ]}", "0.1 0.2");
+ok(scalar @log, 0);
+
+$lb->destroy;
+$lb = $mw->$Listbox(-font => $fixed, -width => 10, -height => 5)->pack;
+$lb->insert(qw/0 a bb c d e f g h i j k l m n o p q r s/);
+$lb->insert(qw/0 0123456789a123456789b123456789c123456789d123456789/);
+$lb->update;
+my $width  = ($lb->bbox(2))[2] - ($lb->bbox(1))[2];
+my $height = ($lb->bbox(2))[1] - ($lb->bbox(1))[1];
+
+$lb->yview(qw/0/);
+$lb->xview(qw/0/);
+$lb->scan(qw/mark 10 20/);
+$lb->scan(qw/dragto/, 10-$width, 20-$height);
+$lb->update;
+ok("@{[ $lb->xview ]}", "0.2 0.4");
+ok("@{[ $lb->yview ]}", "0.5 0.75");
+
+$lb->yview(qw/5/);
+$lb->xview(qw/10/);
+$lb->scan(qw/mark 10 20/);
+$lb->scan(qw/dragto 20 40/);
+$lb->update;
+ok("@{[ $lb->xview ]}", "0 0.2");
+ok("@{[ $lb->yview ]}", "0 0.25");
+
+$lb->scan(qw/dragto/, 20-$width, 40-$height);
+$lb->update;
+ok("@{[ $lb->xview ]}", "0.2 0.4");
+ok("@{[ $lb->yview ]}", "0.5 0.75");
+
+$lb->yview(qw/moveto 1.0/);
+$lb->xview(qw/moveto 1.0/);
+$lb->scan(qw/mark 10 20/);
+$lb->scan(qw/dragto 5 10/);
+$lb->update;
+ok("@{[ $lb->xview ]}", "0.8 1");
+ok("@{[ $lb->yview ]}", "0.75 1");
+$lb->scan(qw/dragto/, 5+$width, 10+$height);
+$lb->update;
+ok("@{[ $lb->xview ]}", "0.62 0.82");
+ok("@{[ $lb->yview ]}", "0.25 0.5");
+
+mkPartial();
+ok($partial_lb->nearest($partial_lb->height), 4);
+
+$lb->destroy;
+$lb = $mw->$Listbox(-font => $fixed,
+		   -width => 20,
+		   -height => 10);
+$lb->insert(qw/0 a b c d e f g h i j k l m n o p q r s t/);
+$lb->yview(qw/4/);
+$lb->pack;
+$lb->update;
+
+ok($lb->index(q/@50,0/), 4);
+
+ok($lb->index(q/@50,35/), 5);
+ok($lb->index(q/@50,36/), 6);
+
+ok($lb->index(q/@50,200/), 13);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j k l m n o p/);
+$lb->selection(qw/set 2 4/);
+$lb->selection(qw/set 7 12/);
+$lb->selection(qw/clear 4 7/);
+ok("@{[ $lb->curselection ]}", "2 3 8 9 10 11 12");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f g h i j k l m n o p/);
+
+$e = $mw->Entry;
+$e->insert(0, "This is some text");
+$e->selection(qw/from 0/);
+$e->selection(qw/to 7/);
+$lb->selection(qw/clear 2 4/);
+ok($mw->SelectionOwner, $e);
+$lb->selection(qw/set 3/);
+ok($mw->SelectionOwner, $lb);
+ok($mw->SelectionGet, "d");
+
+$lb->delete(qw/0 end/);
+$lb->selection(qw/clear 0 end/);
+$lb->selection(qw/set 0 end/);
+ok($lb->curselection, ());
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f/);
+$lb->selection(qw/clear 0 end/);
+$lb->selection(qw/set -2 -1/);
+ok($lb->curselection, ());
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f/);
+$lb->selection(qw/clear 0 end/);
+$lb->selection(qw/set -1 3/);
+ok(join(",",$lb->curselection), "0,1,2,3");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f/);
+$lb->selection(qw/clear 0 end/);
+$lb->selection(qw/set 2 4/);
+ok(join(" ", $lb->curselection), "2 3 4");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f/);
+$lb->selection(qw/clear 0 end/);
+$lb->selection(qw/set 4 end/);
+ok(join(" ", $lb->curselection), "4 5");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f/);
+$lb->selection(qw/clear 0 end/);
+$lb->selection(qw/set 4 30/);
+ok(join(",", $lb->curselection), "4,5");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f/);
+$lb->selection(qw/clear 0 end/);
+$lb->selection(qw/set end 30/);
+ok(join(",", $lb->curselection), 5);
+ok(scalar @{[ $lb->curselection ]}, 1);
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e f/);
+$lb->selection(qw/clear 0 end/);
+$lb->selection(qw/set 20 25/);
+ok($lb->curselection, ());
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c/, "two words", qw/ e f g h i \ k l m n o p/);
+$lb->selection(qw/set 2 4/);
+$lb->selection(qw/set 9/);
+$lb->selection(qw/set 11 12/);
+ok($mw->SelectionGet, "c\ntwo words\ne\n\\\nl\nm");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c/, "two words", qw/ e f g h i \ k l m n o p/);
+$lb->selection(qw/set 3/);
+ok($mw->SelectionGet, "two words");
+
+my $long = "This is quite a long string\n" x 11;
+$lb->delete(qw/0 end/);
+$lb->insert(0, "1$long", "2$long", "3$long", "4$long", "5$long");
+$lb->selection(qw/set 0 end/);
+ok($mw->SelectionGet, "1$long\n2$long\n3$long\n4$long\n5$long");
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e/);
+$lb->selection(qw/set 0 end/);
+$e->destroy;
+$e = $mw->Entry;
+$e->insert(0, "This is some text");
+$e->selection(qw/from 0/);
+$e->selection(qw/to 5/);
+ok($lb->curselection, ());
+
+$lb->delete(qw/0 end/);
+$lb->insert(qw/0 a b c d e/);
+$lb->selection(qw/set 0 end/);
+$lb->configure(qw/-exportselection 0/);
+$e->destroy;
+$e = $top->Entry;
+$e->insert(0, "This is some text");
+$e->selection(qw/from 0/);
+$e->selection(qw/to 5/);
+ok(join(" ", $lb->curselection), "0 1 2 3 4");
+
+$lb->destroy;
+$lb = $mw->$Listbox(-font => $fixed, -width => 10, -height => 5);
+$lb->pack;
+$lb->update;
+
+$lb->configure(qw/-yscrollcommand/, [qw/record y/]);
+@log = ();
+$lb->insert(qw/0 a b c/);
+$lb->update;
+$lb->insert(qw/end d e f g h/);
+$lb->update;
+$lb->delete(qw/0 end/);
+$lb->update;
+ok($log[0], "y 0 1");
+ok($log[1], "y 0 0.625");
+ok($log[2], "y 0 1");
+
+mkPartial();
+$partial_lb->configure(-yscrollcommand => ["record", "y"]);
+@log = ();
+$partial_lb->yview(3);
+$partial_lb->update;
+ok($log[0] =~ /^y 0\.2 0\.46666/);
+
+@x = ();
+
+sub Tk::Error {
+    push @x, @_;
+}
+
+# XXX dumps core with 5.7.0 and 803.023
+$lb->configure(qw/-yscrollcommand gorp/);
+$lb->insert(qw/0 foo/);
+$lb->update;
+ok("@x" =~ /Undefined subroutine &main::gorp called.*vertical scrolling command executed by listbox/s, 1, "x is @x");
+
+$lb->destroy;
+$lb = $mw->$Listbox(-font => $fixed, qw/-width 10 -height 5/)->pack;
+$lb->update;
+
+$lb->configure(qw/-xscrollcommand/, ["record", "x"]);
+@log = ();
+$lb->insert(qw/0 abc/);
+$lb->update;
+$lb->insert(qw/0/, "This is a much longer string...");
+$lb->update;
+$lb->delete(qw/0 end/);
+$lb->update;
+ok($log[0], "x 0 1");
+ok($log[1] =~ /^x 0 0\.32258/, 1, "expected: x 0 0.32258 in $log[1]");
+ok($log[2], "x 0 1");
+
+@x = ();
+$lb->configure(qw/-xscrollcommand bogus/);
+$lb->insert(qw/0 foo/);
+$lb->update;
+ok("@x" =~ /Undefined subroutine &main::bogus.*horizontal scrolling command executed by listbox/s, 1, "x is @x");
+
+foreach ($mw->children) { $_->destroy }
+
+## XXX not yet
+#  # tests for ListboxListVarProc
+#  test listbox-21.1 {ListboxListVarProc} {
+#      catch {destroy $_lb}
+#      catch {unset x}
+#      listbox $_lb -listvar x
+#      set x [list a b c d]
+#      $_lb get 0 end
+#  } [list a b c d]
+#  test listbox-21.2 {ListboxListVarProc} {
+#      catch {destroy $_lb}
+#      set x [list a b c d]
+#      listbox $_lb -listvar x
+#      unset x
+#      set x
+#  } [list a b c d]
+#  test listbox-21.3 {ListboxListVarProc} {
+#      catch {destroy $_lb}
+#      set x [list a b c d]
+#      listbox $_lb -listvar x
+#      $_lb configure -listvar {}
+#      unset x
+#      info exists x
+#  } 0
+#  test listbox-21.4 {ListboxListVarProc} {
+#      catch {destroy $_lb}
+#      set x [list a b c d]
+#      listbox $_lb -listvar x
+#      lappend x e f g
+#      $_lb size
+#  } 7
+#  test listbox-21.5 {ListboxListVarProc, test selection after listvar mod} {
+#      catch {destroy $_lb}
+#      set x [list a b c d e f g]
+#      listbox $_lb -listvar x
+#      $_lb selection set end
+#      set x [list a b c d]
+#      set x [list 0 1 2 3 4 5 6]
+#      $_lb curselection
+#  } {}
+#  test listbox-21.6 {ListboxListVarProc, test selection after listvar mod} {
+#      catch {destroy $_lb}
+#      set x [list a b c d]
+#      listbox $_lb -listvar x
+#      $_lb selection set 3
+#      lappend x e f g
+#      $_lb curselection
+#  } 3
+#  test listbox-21.7 {ListboxListVarProc, test selection after listvar mod} {
+#      catch {destroy $_lb}
+#      set x [list a b c d]
+#      listbox $_lb -listvar x
+#      $_lb selection set 0
+#      set x [linsert $x 0 1 2 3 4]
+#      $_lb curselection
+#  } 0
+#  test listbox-21.8 {ListboxListVarProc, test selection after listvar mod} {
+#      catch {destroy $_lb}
+#      set x [list a b c d]
+#      listbox $_lb -listvar x
+#      $_lb selection set 2
+#      set x [list a b c]
+#      $_lb curselection
+#  } 2
+#  test listbox-21.9 {ListboxListVarProc, test hscrollbar after listvar mod} {
+#      catch {destroy $_lb}
+#      catch {unset x}
+#      set log {}
+#      listbox $_lb -font $fixed -width 10 -xscrollcommand "record x" -listvar x
+#      pack $_lb
+#      update
+#      lappend x "0000000000"
+#      update
+#      lappend x "00000000000000000000"
+#      update
+#      set log
+#  } [list {x 0 1} {x 0 1} {x 0 0.5}]
+#  test listbox-21.10 {ListboxListVarProc, test hscrollbar after listvar mod} {
+#      catch {destroy $_lb}
+#      catch {unset x}
+#      set log {}
+#      listbox $_lb -font $fixed -width 10 -xscrollcommand "record x" -listvar x
+#      pack $_lb
+#      update
+#      lappend x "0000000000"
+#      update
+#      lappend x "00000000000000000000"
+#      update
+#      set x [list "0000000000"]
+#      update
+#      set log
+#  } [list {x 0 1} {x 0 1} {x 0 0.5} {x 0 1}]
+#  test listbox-21.11 {ListboxListVarProc, bad list} {
+#      catch {destroy $_lb}
+#      catch {unset x}
+#      listbox $_lb -listvar x
+#      set x [list a b c d]
+#      catch {set x {this is a " bad list}} result
+#      set result
+#  } {can't set "x": invalid listvar value}
+#  test listbox-21.12 {ListboxListVarProc, cleanup item attributes} {
+#      catch {destroy $_lb}
+#      set x [list a b c d e f g]
+#      listbox $_lb -listvar x
+#      $_lb itemconfigure end -fg red
+#      set x [list a b c d]
+#      set x [list 0 1 2 3 4 5 6]
+#      $_lb itemcget end -fg
+#  } {}
+#  test listbox-21.12 {ListboxListVarProc, cleanup item attributes} {
+#      catch {destroy $_lb}
+#      set x [list a b c d e f g]
+#      listbox $_lb -listvar x
+#      $_lb itemconfigure end -fg red
+#      set x [list a b c d]
+#      set x [list 0 1 2 3 4 5 6]
+#      $_lb itemcget end -fg
+#  } {}
+#  test listbox-21.13 {listbox item configurations and listvar based deletions} {
+#      catch {destroy $_lb}
+#      catch {unset x}
+#      listbox $_lb -listvar x
+#      $_lb insert end a b c
+#      $_lb itemconfigure 1 -fg red
+#      set x [list b c]
+#      $_lb itemcget 1 -fg
+#  } red
+#  test listbox-21.14 {listbox item configurations and listvar based inserts} {
+#      catch {destroy $_lb}
+#      catch {unset x}
+#      listbox $_lb -listvar x
+#      $_lb insert end a b c
+#      $_lb itemconfigure 0 -fg red
+#      set x [list 1 2 3 4 a b c]
+#      $_lb itemcget 0 -fg
+#  } red
+#  test listbox-21.15 {ListboxListVarProc, update vertical scrollbar} {
+#      catch {destroy $_lb}
+#      catch {unset x}
+#      set log {}
+#      listbox $_lb -listvar x -yscrollcommand "record y" -font fixed -height 3
+#      pack $_lb
+#      update
+#      lappend x a b c d e f
+#      update
+#      set log
+#  } [list {y 0 1} {y 0 0.5}]
+#  test listbox-21.16 {ListboxListVarProc, update vertical scrollbar} {
+#      catch {destroy $_lb}
+#      catch {unset x}
+#      listbox $_lb -listvar x -height 3
+#      pack $_lb
+#      update
+#      set x [list 0 1 2 3 4 5]
+#      $_lb yview scroll 3 units
+#      update
+#      set result {}
+#      lappend result [$_lb yview]
+#      set x [lreplace $x 3 3]
+#      set x [lreplace $x 3 3]
+#      set x [lreplace $x 3 3]
+#      update
+#      lappend result [$_lb yview]
+#      set result
+#  } [list {0.5 1} {0 1}]
+
+# UpdateHScrollbar
+
+@log = ();
+$lb = $mw->Listbox(-font => $fixed, -width => 10, -xscrollcommand => ["record", "x"])->pack;
+$mw->update;
+$lb->insert("end", "0000000000");
+$mw->update;
+$lb->insert("end", "00000000000000000000");
+$mw->update;
+ok($log[0], "x 0 1");
+ok($log[1], "x 0 1");
+ok($log[2], "x 0 0.5");
+
+## no itemconfigure in Tk800.x
+#  # ConfigureListboxItem
+#  test listbox-23.1 {ConfigureListboxItem} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      catch {$_lb itemconfigure 0} result
+#      set result
+#  } {item number "0" out of range}
+#  test listbox-23.2 {ConfigureListboxItem} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      $_lb insert end a b c d
+#      $_lb itemconfigure 0
+#  } [list {-background background Background {} {}} \
+#  	{-bg -background} \
+#  	{-fg -foreground} \
+#  	{-foreground foreground Foreground {} {}} \
+#  	{-selectbackground selectBackground Foreground {} {}} \
+#  	{-selectforeground selectForeground Background {} {}}]
+#  test listbox-23.3 {ConfigureListboxItem, itemco shortcut} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      $_lb insert end a b c d
+#      $_lb itemco 0 -background
+#  } {-background background Background {} {}}
+#  test listbox-23.4 {ConfigureListboxItem, wrong num args} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      $_lb insert end a
+#      catch {$_lb itemco} result
+#      set result
+#  } {wrong # args: should be "$_lb itemconfigure index ?option? ?value? ?option value ...?"}
+#  test listbox-23.5 {ConfigureListboxItem, multiple calls} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      set i 0
+#      foreach color {red orange yellow green blue darkblue violet} {
+#  	$_lb insert end $color
+#  	$_lb itemconfigure $i -bg $color
+#  	incr i
+#      }
+#      pack $_lb
+#      update
+#      list [$_lb itemcget 0 -bg] [$_lb itemcget 1 -bg] [$_lb itemcget 2 -bg] \
+#  	    [$_lb itemcget 3 -bg] [$_lb itemcget 4 -bg] [$_lb itemcget 5 -bg] \
+#  	    [$_lb itemcget 6 -bg]
+#  } {red orange yellow green blue darkblue violet}
+#  catch {destroy $_lb}
+#  listbox $_lb
+#  $_lb insert end a b c d
+#  set i 6
+#  #      {-background #ff0000 #ff0000 non-existent
+#  #  	    {unknown color name "non-existent"}}
+#  #      {-bg #ff0000 #ff0000 non-existent {unknown color name "non-existent"}}
+#  #      {-fg #110022 #110022 bogus {unknown color name "bogus"}}
+#  #      {-foreground #110022 #110022 bogus {unknown color name "bogus"}}
+#  #      {-selectbackground #110022 #110022 bogus {unknown color name "bogus"}}
+#  #      {-selectforeground #654321 #654321 bogus {unknown color name "bogus"}}
+#  #XXX
+#  foreach test { A } {
+#      set name [lindex $test 0]
+#      test listbox-23.$i {configuration options} {
+#  	$_lb itemconfigure 0 $name [lindex $test 1]
+#  	list [lindex [$_lb itemconfigure 0 $name] 4] [$_lb itemcget 0 $name]
+#      } [list [lindex $test 2] [lindex $test 2]]
+#      incr i
+#      if {[lindex $test 3] != ""} {
+#  	test listbox-1.$i {configuration options} {
+#  	    list [catch {$_lb configure $name [lindex $test 3]} msg] $msg
+#  	} [list 1 [lindex $test 4]]
+#      }
+#      $_lb configure $name [lindex [$_lb configure $name] 3]
+#      incr i
+#  }
+
+#  # ListboxWidgetObjCmd, itemcget
+#  test listbox-24.1 {itemcget} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      $_lb insert end a b c d
+#      $_lb itemcget 0 -fg
+#  } {}
+#  test listbox-24.2 {itemcget} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      $_lb insert end a b c d
+#      $_lb itemconfigure 0 -fg red
+#      $_lb itemcget 0 -fg
+#  } red
+#  test listbox-24.3 {itemcget} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      $_lb insert end a b c d
+#      catch {$_lb itemcget 0} result
+#      set result
+#  } {wrong # args: should be "$_lb itemcget index option"}
+#  test listbox-24.3 {itemcget, itemcg shortcut} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      $_lb insert end a b c d
+#      catch {$_lb itemcg 0} result
+#      set result
+#  } {wrong # args: should be "$_lb itemcget index option"}
+
+#  # General item configuration issues
+#  test listbox-25.1 {listbox item configurations and widget based deletions} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      $_lb insert end a
+#      $_lb itemconfigure 0 -fg red
+#      $_lb delete 0 end
+#      $_lb insert end a
+#      $_lb itemcget 0 -fg
+#  } {}
+#  test listbox-25.2 {listbox item configurations and widget based inserts} {
+#      catch {destroy $_lb}
+#      listbox $_lb
+#      $_lb insert end a b c
+#      $_lb itemconfigure 0 -fg red
+#      $_lb insert 0 1 2 3 4
+#      list [$_lb itemcget 0 -fg] [$_lb itemcget 4 -fg]
+#  } [list {} red]
+
+resetGridInfo();
+
+sub record {
+    push @log, join(" ", @_);
+}
+
+sub getsize {
+    my $w = shift;
+    my $geom = $w->geometry;
+    $geom =~ /(\d+x\d+)/;
+    $1;
+}
+
+sub resetGridInfo {
+    # Some window managers, such as mwm, don't reset gridding information
+    # unless the window is withdrawn and re-mapped.  If this procedure
+    # isn't invoked, the window manager will stay in gridded mode, which
+    # can cause all sorts of problems.  The "wm positionfrom" command is
+    # needed so that the window manager doesn't ask the user to
+    # manually position the window when it is re-mapped.
+    $mw->withdraw;
+    $mw->positionfrom('user');
+    $mw->deiconify;
+}
+
+# Procedure that creates a second listbox for checking things related
+# to partially visible lines.
+sub mkPartial {
+    eval {
+	$partial_top->destroy
+	    if Tk::Exists($partial_top);
+    };
+    $partial_top = $mw->Toplevel;
+    $partial_top->geometry('+0+0');
+    $partial_lb = $partial_top->Listbox(-width => 30, -height => 5);
+    $partial_lb->pack('-expand',1,'-fill','both');
+    $partial_lb->insert('end','one','two','three','four','five','six','seven',
+			'eight','nine','ten','eleven','twelve','thirteen',
+			'fourteen','fifteen');
+    $partial_top->update;
+    my $geom = $partial_top->geometry;
+    my($width, $height) = $geom =~ /(\d+)x(\d+)/;
+    $partial_top->geometry($width . "x" . ($height-3));
+    $partial_top->update;
+}
+
+__END__
gdiff -up '/usr/local/src/Tk800.024/tkGlue.c' '/usr/local/src/work/Tk800/tkGlue.c'
Index: ./tkGlue.c
--- ./tkGlue.c	Tue Mar  5 14:55:48 2002
+++ ./tkGlue.c	Tue Jun 17 01:55:24 2003
@@ -584,8 +584,8 @@ ClientData clientData;
 {
  HV *hv = InterpHv(interp,1);
  AV *av = FindAv(interp, "Tcl_CallWhenDeleted", 1, "_When_Deleted_");
- av_push(av, newSViv((IV) proc));
- av_push(av, newSViv((IV) clientData));
+ av_push(av, newSViv(PTR2IV(proc)));
+ av_push(av, newSViv(PTR2IV(clientData)));
 }
 
 XS(XS_Tk__Interp_DESTROY)
@@ -603,8 +603,8 @@ XS(XS_Tk__Interp_DESTROY)
     {
      SV *cd = av_pop(av);
      SV *pr = av_pop(av);
-     Tcl_InterpDeleteProc *proc = (Tcl_InterpDeleteProc *) SvIV(pr);
-     ClientData clientData = (ClientData) SvIV(cd);
+     Tcl_InterpDeleteProc *proc = INT2PTR(Tcl_InterpDeleteProc *, SvIV(pr));
+     ClientData clientData = INT2PTR(ClientData, SvIV(cd));
      (*proc) (clientData, interp);
      SvREFCNT_dec(cd);
      SvREFCNT_dec(pr);
@@ -713,7 +713,7 @@ Lang_NewMainWindow(interp,tkwin)
 Tcl_Interp *interp;
 Tk_Window tkwin;
 {
- tilde_magic((SV *) InterpHv(interp,1),newSViv((IV) tkwin));
+ tilde_magic((SV *) InterpHv(interp,1),newSViv(PTR2IV(tkwin)));
 }
 
 #define mSVPV(sv,na) (SvOK(sv) ? SvPV(sv,na) : "undef")
@@ -2261,7 +2261,20 @@ SV **args;
        PL_tainted = old_taint;
        DecInterp(interp, "Call_Tk");
        SvREFCNT_dec(what);
+
+       /* This causes problems with perl 5.6.1, perl5.8.1 and maybe others */
+#if 0
+       ENTER;
+       SAVETMPS;
+       PUSHMARK(SP);
+       XPUSHs(msg);
+       PUTBACK;
+       perl_call_pv("Carp::confess", G_DISCARD);
+       FREETMPS;
+       LEAVE;
+#else
        croak("%s",SvPV(msg,na));
+#endif
       }
     }
    else
@@ -2304,7 +2317,7 @@ InitVtabs(void)
    install_vtab("TkwinVtab",TkwinVGet(),sizeof(TkwinVtab));
    install_vtab("TkwinintVtab",TkwinintVGet(),sizeof(TkwinintVtab));
 #endif
-   TkeventVptr  = (TkeventVtab *) SvIV(perl_get_sv("Tk::TkeventVtab",GV_ADDWARN|GV_ADD));   \
+   TkeventVptr  = INT2PTR(TkeventVtab *, SvIV(perl_get_sv("Tk::TkeventVtab",GV_ADDWARN|GV_ADD)));   \
    Boot_Tix();
   }
  initialized++;
@@ -2548,7 +2561,7 @@ Tcl_Interp *interp;
    MAGIC *mg = mg_find((SV *) hv, '~');
    if (mg)
     {
-     return (Tk_Window) SvIV(mg->mg_obj);
+     return INT2PTR(Tk_Window, SvIV(mg->mg_obj));
     }
   }
  return NULL;
@@ -3054,6 +3067,7 @@ Tk_Window tkwin;
        if (info->interp != interp)
         Tcl_Panic("%s->interp=%p expected %p", cmdName, info->interp, interp);
        DecInterp(info->interp, cmdName);
+       SvREFCNT_dec(mg->mg_obj); /* added by SRT: prevents memory leak */
        sv_unmagic((SV *) hash,'~');
       }
     }
@@ -3426,7 +3440,7 @@ int flags;
 static
 DECL_MG_UFUNC(Perl_Value, ix, sv)
 {
- Tk_TraceInfo *p = (Tk_TraceInfo *) ix;
+ Tk_TraceInfo *p = INT2PTR(Tk_TraceInfo *, ix);
  char *result;
 
  /* We are a "magic" set processor, whether we like it or not
@@ -3457,7 +3471,7 @@ DECL_MG_UFUNC(Perl_Value, ix, sv)
 
 static DECL_MG_UFUNC(Perl_Trace, ix, sv)
 {
- Tk_TraceInfo *p = (Tk_TraceInfo *) ix;
+ Tk_TraceInfo *p = INT2PTR(Tk_TraceInfo *, ix);
  char *result;
 
  /* We are a "magic" set processor, whether we like it or not
@@ -3474,6 +3488,10 @@ static DECL_MG_UFUNC(Perl_Trace, ix, sv)
     some magic list or be careful how we insert ourselves in the list?
 
   */
+ /* This seems to be wrong in at least one case --- see t/Trace.t and
+    Message-ID: <3ef348b.0304240510.299e5519@posting.google.com>
+ */
+#if 0
  if (!SvPOK(sv) && SvPOKp(sv))
   SvPOK_on(sv);
 
@@ -3482,6 +3500,7 @@ static DECL_MG_UFUNC(Perl_Trace, ix, sv)
 
  if (!SvIOK(sv) && SvIOKp(sv))
   SvIOK_on(sv);
+#endif
 
  ENTER;
  SvREFCNT_inc(sv);
@@ -3549,7 +3568,7 @@ ClientData clientData;
  Newz(666, ufp, 1, struct ufuncs);
  ufp->uf_val = Perl_Value;
  ufp->uf_set = Perl_Trace;
- ufp->uf_index = (IV) p;
+ ufp->uf_index = PTR2IV(p);
 
  mg = SvMAGIC(sv);
  mg->mg_ptr = (char *) ufp;
@@ -3601,7 +3620,7 @@ LangLibraryDir()
 static
 DECL_MG_UFUNC(LinkIntSet,ix,sv)
 {
- int *p = (int *) ix;
+ int *p = INT2PTR(int *, ix);
  (*p) = SvIV(sv);
  return 0;
 }
@@ -3609,7 +3628,7 @@ DECL_MG_UFUNC(LinkIntSet,ix,sv)
 static
 DECL_MG_UFUNC(LinkDoubleSet,ix,sv)
 {
- double *p = (double *) ix;
+ double *p = INT2PTR(double *, ix);
  (*p) = SvNV(sv);
  return 0;
 }
@@ -3624,7 +3643,7 @@ DECL_MG_UFUNC(LinkCannotSet,ix,sv)
 static
 DECL_MG_UFUNC(LinkIntVal,ix,sv)
 {
- int *p = (int *) ix;
+ int *p = INT2PTR(int *, ix);
  sv_setiv(sv,*p);
  return 0;
 }
@@ -3632,7 +3651,7 @@ DECL_MG_UFUNC(LinkIntVal,ix,sv)
 static
 DECL_MG_UFUNC(LinkDoubleVal,ix,sv)
 {
- double *p = (double *) ix;
+ double *p = INT2PTR(double *, ix);
  sv_setnv(sv,*p);
  return 0;
 }
@@ -3648,7 +3667,7 @@ int type;
  if (sv)
   {
    struct ufuncs uf;
-   uf.uf_index = (IV) addr;
+   uf.uf_index = PTR2IV(addr);
    switch(type & ~TCL_LINK_READ_ONLY)
     {
      case TCL_LINK_INT:
@@ -3721,7 +3740,7 @@ ClientData clientData;
          ((struct ufuncs *) (mg->mg_ptr))->uf_set == Perl_Trace)
       {
        struct ufuncs *uf = (struct ufuncs *) (mg->mg_ptr);
-       Tk_TraceInfo *p = (Tk_TraceInfo *) (uf->uf_index);
+       Tk_TraceInfo *p = INT2PTR(Tk_TraceInfo *, uf->uf_index);
        if (p && p->proc == tkproc && p->interp == interp &&
            p->clientData == clientData)
         {
@@ -3878,6 +3897,10 @@ int type;
 #else
    CopSTASH(PL_curcop) = NULL;
 #endif
+   /* Removed this warning, because the default radiobutton -variable name
+    * is DEF_RADIOBUTTON_VARIABLE, which is a PV.
+    * warn("Using symbolic references is deprecated. Please use the \\$var syntax");
+    */
    switch (type)
     {
      case TK_CONFIG_SCALARVAR:
@@ -4925,8 +4948,12 @@ char *start;
  return pregexec(re,SvPVX(tmp),SvEND(tmp),start,0,
                  tmp,REXEC_COPY_STR);
 #else
+#  ifdef REXEC_COPY
  return pregexec(re,string,string+strlen(string),start,0,
                  tmp,NULL,REXEC_COPY);
+#  else
+ return pregexec(re,string,string+strlen(string),start,0,NULL,1);
+#  endif
 #endif
 }
 
@@ -5051,7 +5078,7 @@ size_t size;
    typedef int (*fptr)_((void));
    fptr *q = table;
    unsigned i;
-   sv_setiv(FindTkVarName(name,GV_ADD|GV_ADDMULTI),(IV) table);
+   sv_setiv(FindTkVarName(name,GV_ADD|GV_ADDMULTI),PTR2IV(table));
    if (size % sizeof(fptr))
     {
      warn("%s is strange size %d",name,size);
@@ -5153,7 +5180,9 @@ Tk_GetUid(key)
     HE *he;
     if (!uidHV)
      uidHV = newHV();
-    he = hv_fetch_ent(uidHV,svkey,1,0);
+    he = hv_fetch_ent(uidHV,svkey,0,0); /* added by SRT: prevents leak of auto-created SVs */
+    if (!he)
+     he = hv_store_ent(uidHV,svkey,Nullsv,0); /* ... */
     SvREFCNT_dec(svkey);
     return (Tk_Uid) HePV(he,klen);
 }
gdiff -up '/usr/local/src/Tk800.024/tkGlue.h' '/usr/local/src/work/Tk800/tkGlue.h'
Index: ./tkGlue.h
--- ./tkGlue.h	Fri Apr 21 10:13:10 2000
+++ ./tkGlue.h	Tue Jun 17 01:45:01 2003
@@ -53,15 +53,22 @@ do {                                    
 #define IMPORT_WIN32_VTABLES
 #endif
 
+#ifndef INT2PTR
+#define INT2PTR(any,d) (any)(d)
+#endif
+#ifndef PTR2IV
+#define PTR2IV(p)	INT2PTR(IV,p)
+#endif
+
 #define IMPORT_VTABLES                                                         \
 do {                                                                           \
-  TkoptionVptr = (TkoptionVtab *) SvIV(perl_get_sv("Tk::TkoptionVtab",GV_ADDWARN|GV_ADD)); \
-  LangVptr     = (LangVtab *) SvIV(perl_get_sv("Tk::LangVtab",GV_ADDWARN|GV_ADD));         \
-  TkeventVptr  = (TkeventVtab *) SvIV(perl_get_sv("Tk::TkeventVtab",GV_ADDWARN|GV_ADD));   \
-  TkVptr       = (TkVtab *) SvIV(perl_get_sv("Tk::TkVtab",GV_ADDWARN|GV_ADD));             \
-  TkintVptr    = (TkintVtab *) SvIV(perl_get_sv("Tk::TkintVtab",GV_ADDWARN|GV_ADD));       \
-  TkglueVptr   = (TkglueVtab *) SvIV(perl_get_sv("Tk::TkglueVtab",GV_ADDWARN|GV_ADD));     \
-  XlibVptr     = (XlibVtab *) SvIV(perl_get_sv("Tk::XlibVtab",GV_ADDWARN|GV_ADD));         \
+  TkoptionVptr = INT2PTR(TkoptionVtab *, SvIV(perl_get_sv("Tk::TkoptionVtab",GV_ADDWARN|GV_ADD))); \
+  LangVptr     = INT2PTR(LangVtab *, SvIV(perl_get_sv("Tk::LangVtab",GV_ADDWARN|GV_ADD)));         \
+  TkeventVptr  = INT2PTR(TkeventVtab *, SvIV(perl_get_sv("Tk::TkeventVtab",GV_ADDWARN|GV_ADD)));   \
+  TkVptr       = INT2PTR(TkVtab *, SvIV(perl_get_sv("Tk::TkVtab",GV_ADDWARN|GV_ADD)));             \
+  TkintVptr    = INT2PTR(TkintVtab *, SvIV(perl_get_sv("Tk::TkintVtab",GV_ADDWARN|GV_ADD)));       \
+  TkglueVptr   = INT2PTR(TkglueVtab *, SvIV(perl_get_sv("Tk::TkglueVtab",GV_ADDWARN|GV_ADD)));     \
+  XlibVptr     = INT2PTR(XlibVtab *, SvIV(perl_get_sv("Tk::XlibVtab",GV_ADDWARN|GV_ADD)));         \
  } while (0)
 
 #define VTABLE_INIT() IMPORT_VTABLES
#### End of Patch data ####

#### ApplyPatch data follows ####
# Data version        : 1.0
# Date generated      : Sat Jun 28 17:50:47 2003
# Generated by        : makepatch 2.00_05
# Recurse directories : Yes
# v 'pTk/patchlevel.h' 934 1050940300 33200
# c 'BUGS' 0 1056228004 0100660
# p 'Canvas/canvtxt' 6143 1050940404 0100771
# p 'Compound/Compound.xs' 853 1055805846 0100660
# p 'DragDrop/DragDrop.pm' 7261 1051278857 0100660
# p 'DragDrop/Win32Site/Win32Site.xs' 1357 1050940405 0100660
# p 'Entry/Entry.pm' 13001 1051278857 0100660
# p 'Event/Event.pm' 402 1055014106 0100664
# p 'Event/Event.xs' 26309 1055807118 0100660
# p 'Event/pTkCallback.c' 5960 1050940404 0100660
# p 'Event/typemap' 284 1055807934 0100660
# p 'HList/HList.pm' 12866 1051278857 0100660
# p 'HList/HList.xs' 893 1055806204 0100660
# p 'IO/IO.xs' 6104 1055805912 0100660
# p 'InputO/InputO.xs' 914 1055805946 0100660
# p 'Listbox/Listbox.pm' 20944 1050940389 0100660
# p 'MANIFEST' 33060 1052460547 0100660
# p 'Makefile.PL' 4062 1051953759 0100660
# p 'Mwm/Mwm.xs' 996 1055805974 0100660
# p 'NBFrame/NBFrame.xs' 915 1055806017 0100660
# p 'README.cygwin' 4984 1050942496 0100660
# p 'Scrollbar/Scrollbar.pm' 9795 1050940389 0100660
# p 'TList/TList.xs' 890 1055806039 0100660
# p 'Text/Text.pm' 41797 1051050503 0100664
# p 'TextList/TextList.pm' 26287 1051279972 0100660
# p 'TextList/textlist_demo' 1146 1051279978 0100771
# p 'TixPixmap/Pixmap.xs' 1397 1055831269 0100660
# p 'Tixish/Balloon.pm' 10922 1052460572 0100660
# p 'Tixish/BrowseEntry.pm' 8346 1050954605 0100660
# p 'Tixish/DialogBox.pm' 3408 1051278858 0100660
# p 'Tixish/DirTree.pm' 4156 1051279575 0100660
# p 'Tixish/LabFrame.pm' 1669 1050940389 0100660
# p 'Tixish/NoteBook.pm' 10355 1051798766 0100664
# p 'Tixish/Tree.pm' 4465 1053632575 0100664
# p 'Tk.pm' 14763 1055013524 0100664
# p 'Tk.xs' 13215 1050940404 0100660
# p 'Tk/Adjuster.pm' 10977 1050940379 0100660
# p 'Tk/After.pm' 1589 1051277181 0100660
# p 'Tk/ColorEditor.pm' 22827 1051277940 0100660
# p 'Tk/ErrorDialog.pm' 4833 1051277463 0100660
# p 'Tk/FBox.pm' 25239 1056227601 0100664
# p 'Tk/FileSelect.pm' 14016 1051276306 0100660
# p 'Tk/IconList.pm' 14377 1056227202 0100664
# p 'Tk/MMutil.pm' 12003 1056815379 0100660
# p 'Tk/Menu.pm' 28719 1050940389 0100660
# p 'Tk/Optionmenu.pm' 2600 1054329877 0100660
# p 'Tk/Pane.pm' 13078 1050940389 0100660
# p 'Tk/Table.pm' 10288 1055011908 0100664
# p 'Tk/TextUndo.pm' 24547 1051277025 0100664
# p 'Tk/Trace.pm' 8917 1055707986 0100664
# p 'Tk/Widget.pm' 30976 1051277346 0100660
# p 'Tk/Wm.pm' 3548 1051908022 0100664
# c 'Tk/arrowdownwin.xbm' 0 1050954645 0100440
# p 'Tk/typemap' 1555 1055806899 0100660
# p 'chnGlue.c' 2053 1055805629 0100660
# p 'demos/demos/widget_lib/Plot.pm' 5586 1051279161 0100660
# p 'demos/demos/widget_lib/WidgetDemo.pm' 2883 1051279196 0100660
# p 'demos/demos/widget_lib/arrows.pl' 8336 1051279034 0100660
# p 'demos/demos/widget_lib/bind.pl' 2790 1051279089 0100660
# p 'demos/demos/widget_lib/floor.pl' 97327 1051278858 0100660
# p 'demos/demos/widget_lib/form.pl' 991 1051279107 0100660
# p 'demos/demos/widget_lib/hscale.pl' 1454 1051279119 0100660
# p 'demos/demos/widget_lib/menus.pl' 6470 1050940404 0100660
# p 'demos/demos/widget_lib/search.pl' 5649 1051279174 0100660
# p 'demos/demos/widget_lib/style.pl' 7931 1051280417 0100660
# p 'demos/demos/widget_lib/vscale.pl' 1415 1051279183 0100660
# p 'demos/demos/widtrib/Gedi.pl' 11549 1050940404 0100660
# p 'demos/demos/widtrib/HList2.pl' 2880 1050940404 0100660
# p 'demos/demos/widtrib/balloon.pl' 5244 1051049429 0100660
# p 'demos/widget' 17588 1051279008 0100771
# p 'lib/Tie/Watch.pm' 17559 1055011590 0100660
# p 'myConfig' 9292 1051047195 0100660
# p 'pTk/Xlib.excwin' 604 1050941174 0100660
# p 'pTk/mTk/generic/tkBind.c' 150150 1050940405 0100660
# p 'pTk/mTk/generic/tkBitmap.c' 18714 1055992297 0100660
# p 'pTk/mTk/generic/tkImgPhoto.c' 143579 1050940405 0100660
# p 'pTk/mTk/generic/tkPlace.c' 31060 1050940405 0100660
# p 'pTk/mTk/generic/tkTextIndex.c' 20996 1050940405 0100660
# p 'pTk/mTk/tixGeneric/tixDiStyle.c' 27320 1051044997 0100660
# p 'pTk/mTk/unix/tkUnixWm.c' 162631 1051896366 0100660
# p 'pTk/mTk/win/tkWinCursor.c' 5315 1050949241 0100660
# p 'pTk/mTk/win/tkWinPort.h' 3510 1050949241 0100660
# p 'pTk/ptkCanvGrid.c' 23474 1051280290 0100660
# p 'pod/Animation.pod' 1160 1050940379 0100660
# p 'pod/Balloon.pod' 8144 1051282118 0100660
# p 'pod/BrowseEntry.pod' 2626 1050954611 0100660
# p 'pod/Dialog.pod' 2248 1051278859 0100660
# p 'pod/DialogBox.pod' 2493 1051278171 0100660
# p 'pod/Error.pod' 3770 1051276104 0100660
# c 'pod/FBox.pod' 0 1050940389 0100660
# c 'pod/IconList.pod' 0 1050940389 0100660
# p 'pod/LabFrame.pod' 1732 1050940389 0100660
# p 'pod/NoteBook.pod' 4580 1051050131 0100660
# c 'pod/Popup.pod' 0 1051277807 0100751
# p 'pod/Toplevel.pod' 5724 1050940395 0100660
# p 'pod/after.pod' 4913 1051278858 0100660
# p 'pod/mega.pod' 10155 1051280184 0100660
# p 'pod/messageBox.pod' 1776 1050940404 0100660
# p 'pod/options.pod' 24065 1051276432 0100660
# p 'pod/pack.pod' 10489 1051280218 0100660
# p 'ptked' 6122 1050940404 0100771
# p 'ptksh' 17445 1051429094 0100775
# p 't/Trace.t' 509 1051221168 0100775
# p 't/balloon.t' 1574 1050940428 0100660
# c 't/browseentry-grabtest.t' 0 1050954620 0100551
# c 't/browseentry-subclassing.t' 0 1050954620 0100551
# c 't/browseentry2.t' 0 1050954620 0100551
# c 't/cursor.t' 0 1055707716 0100775
# c 't/entry.t' 0 1051280888 0100775
# c 't/leak.t' 0 1050940428 0100660
# c 't/listbox.t' 0 1050952698 0100775
# p 'tkGlue.c' 104889 1055807724 0100660
# p 'tkGlue.h' 3763 1055807101 0100660
#### End of ApplyPatch data ####

#### End of Patch kit [created: Sat Jun 28 17:50:47 2003] ####
#### Patch checksum: 10184 318265 32487 ####
#### Checksum: 10236 319843 34444 ####
